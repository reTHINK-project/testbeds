{
  "sourceCode": "",
  "sourceCodeClassname": "ims.rethink-project.eu",
      "encoding": "base64",
      "signature": ""
}

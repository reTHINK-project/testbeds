(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _IdpProxy = __webpack_require__(1);\n\nvar _EdpInfo = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n* Google Identity Provider Proxy Protocol Stub\n*/\nvar EdpIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(EdpIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function EdpIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, EdpIdpProxyProtoStub);\n\n    config.domain = 'edpdistribuicao.pt';\n    config.idpUrl = 'domain-idp://edpdistribuicao.pt';\n    config.idpProxy = _IdpProxy.IdpProxy;\n    config.idpInfo = _EdpInfo.edpInfo;\n    config.apiInfo = _EdpInfo.edpInfo;\n    config.authEndpoint = _EdpInfo.authEndpoint;\n    config.accessTokenInput = _EdpInfo.accessTokenInput;\n    config.accessTokenEndpoint = _EdpInfo.authEndpoint;\n    return _possibleConstructorReturn(this, (EdpIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(EdpIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return EdpIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'EdpIdpProxyProtoStub',\n    instance: new EdpIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2VkcC9FZHBJZHBQcm94eVN0dWIuaWRwLmpzP2YxNTciXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJFZHBJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJkb21haW4iLCJpZHBVcmwiLCJpZHBQcm94eSIsIklkcFByb3h5IiwiaWRwSW5mbyIsImVkcEluZm8iLCJhcGlJbmZvIiwiYXV0aEVuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsImFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwidXJsIiwibmFtZSIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkF1Q3dCQSxROztBQXZDeEI7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBOzs7SUFHTUMsb0I7OztBQUVKOzs7Ozs7OztBQVFBLGdDQUFZQyxtQkFBWixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQThDO0FBQUE7O0FBQzVDQSxXQUFPQyxNQUFQLEdBQWdCLG9CQUFoQjtBQUNBRCxXQUFPRSxNQUFQLEdBQWdCLGlDQUFoQjtBQUNBRixXQUFPRyxRQUFQLEdBQWtCQyxrQkFBbEI7QUFDQUosV0FBT0ssT0FBUCxHQUFpQkMsZ0JBQWpCO0FBQ0FOLFdBQU9PLE9BQVAsR0FBaUJELGdCQUFqQjtBQUNBTixXQUFPUSxZQUFQLEdBQXNCQSxxQkFBdEI7QUFDQVIsV0FBT1MsZ0JBQVAsR0FBMEJBLHlCQUExQjtBQUNBVCxXQUFPVSxtQkFBUCxHQUE2QkYscUJBQTdCO0FBUjRDLHVJQVN0Q1YsbUJBVHNDLEVBU2pCQyxHQVRpQixFQVNaQyxNQVRZO0FBVTdDOzs7RUFwQmdDVyw4Qjs7QUF1Qm5DOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTZixRQUFULENBQWtCZ0IsR0FBbEIsRUFBdUJiLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xhLFVBQU0sc0JBREQ7QUFFTEMsY0FBVSxJQUFJakIsb0JBQUosQ0FBeUJlLEdBQXpCLEVBQThCYixHQUE5QixFQUFtQ0MsTUFBbkM7QUFGTCxHQUFQO0FBSUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkcFByb3h5IH0gZnJvbSBcIi4vSWRwUHJveHlcIlxuaW1wb3J0IHsgZWRwSW5mbywgYXV0aEVuZHBvaW50LCBhY2Nlc3NUb2tlbklucHV0LCByZXZva2VFbmRwb2ludCB9IGZyb20gXCIuL0VkcEluZm9cIlxuaW1wb3J0IEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIgZnJvbSBcIi4uL0Fic3RyYWN0SWRwUHJveHlTdHViXCJcblxuLyoqXG4qIEdvb2dsZSBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXG4qL1xuY2xhc3MgRWRwSWRwUHJveHlQcm90b1N0dWIgZXh0ZW5kcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBjb25maWcuZG9tYWluID0gJ2VkcGRpc3RyaWJ1aWNhby5wdCc7XG4gICAgY29uZmlnLmlkcFVybCA9ICdkb21haW4taWRwOi8vZWRwZGlzdHJpYnVpY2FvLnB0JztcbiAgICBjb25maWcuaWRwUHJveHkgPSBJZHBQcm94eTtcbiAgICBjb25maWcuaWRwSW5mbyA9IGVkcEluZm87XG4gICAgY29uZmlnLmFwaUluZm8gPSBlZHBJbmZvO1xuICAgIGNvbmZpZy5hdXRoRW5kcG9pbnQgPSBhdXRoRW5kcG9pbnQ7XG4gICAgY29uZmlnLmFjY2Vzc1Rva2VuSW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0O1xuICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gYXV0aEVuZHBvaW50O1xuICAgIHN1cGVyKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKTtcbiAgfVxufVxuXG4vLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjtcblxuLyoqXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnRWRwSWRwUHJveHlQcm90b1N0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgRWRwSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZWRwL0VkcElkcFByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import {getExpires} from './OAUTH';\n\nvar identities = {};\nvar nIdentity = 0;\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n//let tokenEndpoint;\n//let authorisationEndpoint;\nvar accessTokenEndpoint = void 0;\nvar refreshAccessTokenEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return false;else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n\n  /**\n  * Function to get an Access Token endpoint\n  *\n  * @param  {config}      Object information about IdP endpoints\n  * @param  {resources} Object contents includes information about the identity received\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, client_id) {\n    console.log('[Edp.IdpProxy.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[Edp.IdpProxy.getAccessTokenAuthorisationEndpoint:resources]', client_id);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.authEndpoint;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // TODO replace by resources[0]\n      resolve(accessTokenAuthorisationEndpoint(client_id));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {login} optional login result\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessToken: function getAccessToken(config, client_id, login) {\n    console.log('[OIDC.getAccessToken:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var isValid = urlParser(login, 'isValid') === 'true' ? true : false;\n\n      var consent = urlParser(login, 'consent') === 'true' ? true : false;\n\n      if (consent & isValid) {\n        var accessToken = consent;\n        var expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n        resolve(accessTokenResult(client_id, accessToken, expires, login));\n      } else {\n        reject({ consent: consent, isValid: isValid });\n      }\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authEndpoint = authEndpoint;\nexports.revokeEndpoint = revokeEndpoint;\nexports.accessTokenInput = accessTokenInput;\n\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\nvar edpInfo = exports.edpInfo = {\n  \"authorisationEndpoint\": \"https://online.edpdistribuicao.pt/sharing-cities/login?\",\n  \"revokeEndpoint\": \"https://online.edpdistribuicao.pt/sharing-cities/revoke?\",\n  //\"authorisationEndpoint\":  \"https://fe-dot-online-dist-edp-pre.appspot.com/sharing-cities/login?\",\n  //\"revokeEndpoint\": \"https://fe-dot-online-dist-edp-pre.appspot.com/sharing-cities/revoke?\",\n  \"domain\": \"edpdistribuicao.pt\"\n};\n\nfunction authEndpoint(client_id) {\n\n  return edpInfo.authorisationEndpoint + 'client_id=' + client_id + '&redirect_uri=' + redirectURI;\n};\n\nfunction revokeEndpoint(client_id) {\n\n  return edpInfo.revokeEndpoint + 'client_id=' + client_id;\n};\n\nfunction accessTokenInput(info) {\n\n  return { info: info };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2VkcC9FZHBJbmZvLmpzP2FkOTYiXSwibmFtZXMiOlsiYXV0aEVuZHBvaW50IiwicmV2b2tlRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbklucHV0IiwicmVkaXJlY3RVUkkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwiZWRwSW5mbyIsImNsaWVudF9pZCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsImluZm8iXSwibWFwcGluZ3MiOiI7Ozs7O1FBV2dCQSxZLEdBQUFBLFk7UUFPQUMsYyxHQUFBQSxjO1FBTUFDLGdCLEdBQUFBLGdCOztBQXZCaEIsSUFBSUMsY0FBY0MsU0FBU0MsUUFBVCxHQUFvQixJQUFwQixHQUEyQkQsU0FBU0UsUUFBcEMsSUFBZ0RGLFNBQVNHLElBQVQsS0FBa0IsRUFBbEIsR0FBdUIsTUFBTUgsU0FBU0csSUFBdEMsR0FBNkMsRUFBN0YsQ0FBbEI7O0FBRU8sSUFBSUMsNEJBQVU7QUFDbkIsMkJBQTBCLHlEQURQO0FBRW5CLG9CQUFrQiwwREFGQztBQUduQjtBQUNBO0FBQ0EsWUFBVTtBQUxTLENBQWQ7O0FBUUEsU0FBU1IsWUFBVCxDQUFzQlMsU0FBdEIsRUFBaUM7O0FBRXRDLFNBQU9ELFFBQVFFLHFCQUFSLEdBQ0gsWUFERyxHQUNZRCxTQURaLEdBRUgsZ0JBRkcsR0FFZ0JOLFdBRnZCO0FBR0Q7O0FBRU0sU0FBU0YsY0FBVCxDQUF3QlEsU0FBeEIsRUFBbUM7O0FBRXhDLFNBQU9ELFFBQVFQLGNBQVIsR0FDTCxZQURLLEdBQ1VRLFNBRGpCO0FBRUQ7O0FBRU0sU0FBU1AsZ0JBQVQsQ0FBMEJTLElBQTFCLEVBQWdDOztBQUVyQyxTQUFPLEVBQUNBLFVBQUQsRUFBUDtBQUNEIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmxldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcblxuZXhwb3J0IGxldCBlZHBJbmZvID0ge1xuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiAgXCJodHRwczovL29ubGluZS5lZHBkaXN0cmlidWljYW8ucHQvc2hhcmluZy1jaXRpZXMvbG9naW4/XCIsXG4gIFwicmV2b2tlRW5kcG9pbnRcIjogXCJodHRwczovL29ubGluZS5lZHBkaXN0cmlidWljYW8ucHQvc2hhcmluZy1jaXRpZXMvcmV2b2tlP1wiLFxuICAvL1wiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6ICBcImh0dHBzOi8vZmUtZG90LW9ubGluZS1kaXN0LWVkcC1wcmUuYXBwc3BvdC5jb20vc2hhcmluZy1jaXRpZXMvbG9naW4/XCIsXG4gIC8vXCJyZXZva2VFbmRwb2ludFwiOiBcImh0dHBzOi8vZmUtZG90LW9ubGluZS1kaXN0LWVkcC1wcmUuYXBwc3BvdC5jb20vc2hhcmluZy1jaXRpZXMvcmV2b2tlP1wiLFxuICBcImRvbWFpblwiOiBcImVkcGRpc3RyaWJ1aWNhby5wdFwiXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXV0aEVuZHBvaW50KGNsaWVudF9pZCkge1xuXG4gIHJldHVybiBlZHBJbmZvLmF1dGhvcmlzYXRpb25FbmRwb2ludFxuICAgICsgJ2NsaWVudF9pZD0nICsgY2xpZW50X2lkXG4gICAgKyAnJnJlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUkk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmV2b2tlRW5kcG9pbnQoY2xpZW50X2lkKSB7XG5cbiAgcmV0dXJuIGVkcEluZm8ucmV2b2tlRW5kcG9pbnRcbiAgKyAnY2xpZW50X2lkPScgKyBjbGllbnRfaWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzVG9rZW5JbnB1dChpbmZvKSB7XG5cbiAgcmV0dXJuIHtpbmZvfTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2VkcC9FZHBJbmZvLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error, 401);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error, value, 401);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error, 401);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error, 401);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error, 401);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: code }\n      };\n\n      if (code < 300) message.body.value = value;else message.body.description = value;\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});


var hello = {
  name: "hello",
  hello: "Hello buddy!!"
};

exports.default = hello;
module.exports = exports["default"];

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideURL = divideURL;
exports.deepClone = deepClone;
exports.getUserMedia = getUserMedia;
/**
 * Copyright 2016 PT Inovação e Sistemas SA
 * Copyright 2016 INESC-ID
 * Copyright 2016 QUOBIS NETWORKS SL
 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
 * Copyright 2016 ORANGE SA
 * Copyright 2016 Deutsche Telekom AG
 * Copyright 2016 Apizee
 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

// jshint browser:true, jquery: true
// jshint varstmt: true
/* global Handlebars */

/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  if (!url) throw Error('URL is needed to split');

  function recurse(value) {
    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
    var subst = '$1,$3,$4';
    var parts = value.replace(regex, subst).split(',');
    return parts;
  }

  var parts = recurse(url);

  // If the url has no scheme
  if (parts[0] === url && !parts[0].includes('@')) {

    var _result = {
      type: "",
      domain: url,
      identity: ""
    };

    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);

    return _result;
  }

  // check if the url has the scheme and includes an @
  if (parts[0] === url && parts[0].includes('@')) {
    var scheme = parts[0] === url ? 'smtp' : parts[0];
    parts = recurse(scheme + '://' + parts[0]);
  }

  // if the domain includes an @, divide it to domain and identity respectively
  if (parts[1].includes('@')) {
    parts[2] = parts[0] + '://' + parts[1];
    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
  } /*else if (parts[2].includes('/')) {
    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
    }*/

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse(JSON.stringify(obj));
}

/**
 * Get WebRTC API resources
 * @param  {object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
 * @return {Promise}
 */
function getUserMedia(constraints) {

  return new Promise(function (resolve, reject) {

    navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {
      resolve(mediaStream);
    }).catch(function (reason) {
      reject(reason);
    });
  });
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// version: 0.5.1
// date: Tue Mar 07 2017 16:18:13 GMT+0000 (WET)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Syncher", [], factory);
	else if(typeof exports === 'object')
		exports["Syncher"] = factory();
	else
		root[""] = root[""] || {}, root[""]["Syncher"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 166);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(11)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(30)('wks')
  , uid        = __webpack_require__(23)
  , Symbol     = __webpack_require__(1).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(5)
  , IE8_DOM_DEFINE = __webpack_require__(25)
  , toPrimitive    = __webpack_require__(21)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(2) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(4)
  , createDesc = __webpack_require__(15);
module.exports = __webpack_require__(2) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(1)
  , core      = __webpack_require__(0)
  , ctx       = __webpack_require__(14)
  , hide      = __webpack_require__(7)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(33);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(56)
  , defined = __webpack_require__(24);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(19);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6)
  , document = __webpack_require__(1).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(44)
  , enumBugKeys = __webpack_require__(29);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 20 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(6);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(4).f
  , has = __webpack_require__(12)
  , TAG = __webpack_require__(3)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 24 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(2) && !__webpack_require__(11)(function(){
  return Object.defineProperty(__webpack_require__(17)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = true;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(30)('keys')
  , uid    = __webpack_require__(23);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 29 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(79), __esModule: true };

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(24);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(36), __esModule: true };

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(75);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(74);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(59);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(59);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(38);
var $Object = __webpack_require__(0).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(5)
  , dPs         = __webpack_require__(64)
  , enumBugKeys = __webpack_require__(29)
  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(17)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(42).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(2), 'Object', {defineProperty: __webpack_require__(4).f});

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(26)
  , $export        = __webpack_require__(9)
  , redefine       = __webpack_require__(46)
  , hide           = __webpack_require__(7)
  , has            = __webpack_require__(12)
  , Iterators      = __webpack_require__(16)
  , $iterCreate    = __webpack_require__(62)
  , setToStringTag = __webpack_require__(22)
  , getPrototypeOf = __webpack_require__(43)
  , ITERATOR       = __webpack_require__(3)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(53), __esModule: true };

/***/ }),
/* 41 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1).document && document.documentElement;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(12)
  , toObject    = __webpack_require__(32)
  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(12)
  , toIObject    = __webpack_require__(13)
  , arrayIndexOf = __webpack_require__(61)(false)
  , IE_PROTO     = __webpack_require__(27)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(9)
  , core    = __webpack_require__(0)
  , fails   = __webpack_require__(11);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(7);

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(28)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(1)
  , core           = __webpack_require__(0)
  , LIBRARY        = __webpack_require__(26)
  , wksExt         = __webpack_require__(49)
  , defineProperty = __webpack_require__(4).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(3);

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(66)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(39)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(69);
var global        = __webpack_require__(1)
  , hide          = __webpack_require__(7)
  , Iterators     = __webpack_require__(16)
  , TO_STRING_TAG = __webpack_require__(3)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 52 */,
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var core  = __webpack_require__(0)
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {



/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(20)
  , TAG = __webpack_require__(3)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(20);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(41)
  , createDesc     = __webpack_require__(15)
  , toIObject      = __webpack_require__(13)
  , toPrimitive    = __webpack_require__(21)
  , has            = __webpack_require__(12)
  , IE8_DOM_DEFINE = __webpack_require__(25)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(2) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 58 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(77);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(76);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(13)
  , toLength  = __webpack_require__(47)
  , toIndex   = __webpack_require__(68);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(37)
  , descriptor     = __webpack_require__(15)
  , setToStringTag = __webpack_require__(22)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(7)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(4)
  , anObject = __webpack_require__(5)
  , getKeys  = __webpack_require__(18);

module.exports = __webpack_require__(2) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(44)
  , hiddenKeys = __webpack_require__(29).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(28)
  , defined   = __webpack_require__(24);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(14)
  , invoke             = __webpack_require__(88)
  , html               = __webpack_require__(42)
  , cel                = __webpack_require__(17)
  , global             = __webpack_require__(1)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(20)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(28)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(60)
  , step             = __webpack_require__(63)
  , Iterators        = __webpack_require__(16)
  , toIObject        = __webpack_require__(13);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(39)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(80), __esModule: true };

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(82), __esModule: true };

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(23)('meta')
  , isObject = __webpack_require__(6)
  , has      = __webpack_require__(12)
  , setDesc  = __webpack_require__(4).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(11)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(55)
  , ITERATOR  = __webpack_require__(3)('iterator')
  , Iterators = __webpack_require__(16);
module.exports = __webpack_require__(0).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(78), __esModule: true };

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(81), __esModule: true };

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(83), __esModule: true };

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(84), __esModule: true };

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(100);
var $Object = __webpack_require__(0).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(101);
module.exports = __webpack_require__(0).Object.getPrototypeOf;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(102);
module.exports = __webpack_require__(0).Object.keys;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(103);
module.exports = __webpack_require__(0).Object.setPrototypeOf;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(54);
__webpack_require__(50);
__webpack_require__(51);
__webpack_require__(104);
module.exports = __webpack_require__(0).Promise;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(105);
__webpack_require__(54);
__webpack_require__(106);
__webpack_require__(107);
module.exports = __webpack_require__(0).Symbol;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(50);
__webpack_require__(51);
module.exports = __webpack_require__(49).f('iterator');

/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(18)
  , gOPS    = __webpack_require__(58)
  , pIE     = __webpack_require__(41);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(14)
  , call        = __webpack_require__(91)
  , isArrayIter = __webpack_require__(89)
  , anObject    = __webpack_require__(5)
  , toLength    = __webpack_require__(47)
  , getIterFn   = __webpack_require__(73)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 88 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(16)
  , ITERATOR   = __webpack_require__(3)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(20);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(5);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(3)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(18)
  , toIObject = __webpack_require__(13);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(1)
  , macrotask = __webpack_require__(67).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(20)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(13)
  , gOPN      = __webpack_require__(65).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(7);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(6)
  , anObject = __webpack_require__(5);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(14)(Function.call, __webpack_require__(57).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(1)
  , core        = __webpack_require__(0)
  , dP          = __webpack_require__(4)
  , DESCRIPTORS = __webpack_require__(2)
  , SPECIES     = __webpack_require__(3)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(5)
  , aFunction = __webpack_require__(19)
  , SPECIES   = __webpack_require__(3)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(37)});

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(32)
  , $getPrototypeOf = __webpack_require__(43);

__webpack_require__(45)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(32)
  , $keys    = __webpack_require__(18);

__webpack_require__(45)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(9);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(97).set});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(26)
  , global             = __webpack_require__(1)
  , ctx                = __webpack_require__(14)
  , classof            = __webpack_require__(55)
  , $export            = __webpack_require__(9)
  , isObject           = __webpack_require__(6)
  , aFunction          = __webpack_require__(19)
  , anInstance         = __webpack_require__(85)
  , forOf              = __webpack_require__(87)
  , speciesConstructor = __webpack_require__(99)
  , task               = __webpack_require__(67).set
  , microtask          = __webpack_require__(94)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(3)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(96)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(22)($Promise, PROMISE);
__webpack_require__(98)(PROMISE);
Wrapper = __webpack_require__(0)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(92)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(1)
  , has            = __webpack_require__(12)
  , DESCRIPTORS    = __webpack_require__(2)
  , $export        = __webpack_require__(9)
  , redefine       = __webpack_require__(46)
  , META           = __webpack_require__(72).KEY
  , $fails         = __webpack_require__(11)
  , shared         = __webpack_require__(30)
  , setToStringTag = __webpack_require__(22)
  , uid            = __webpack_require__(23)
  , wks            = __webpack_require__(3)
  , wksExt         = __webpack_require__(49)
  , wksDefine      = __webpack_require__(48)
  , keyOf          = __webpack_require__(93)
  , enumKeys       = __webpack_require__(86)
  , isArray        = __webpack_require__(90)
  , anObject       = __webpack_require__(5)
  , toIObject      = __webpack_require__(13)
  , toPrimitive    = __webpack_require__(21)
  , createDesc     = __webpack_require__(15)
  , _create        = __webpack_require__(37)
  , gOPNExt        = __webpack_require__(95)
  , $GOPD          = __webpack_require__(57)
  , $DP            = __webpack_require__(4)
  , $keys          = __webpack_require__(18)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(65).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(41).f  = $propertyIsEnumerable;
  __webpack_require__(58).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(26)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('asyncIterator');

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('observable');

/***/ }),
/* 108 */,
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = __webpack_require__(40);

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = __webpack_require__(70);

var _keys2 = _interopRequireDefault(_keys);

exports.divideURL = divideURL;
exports.divideEmail = divideEmail;
exports.emptyObject = emptyObject;
exports.deepClone = deepClone;
exports.getUserURLFromEmail = getUserURLFromEmail;
exports.getUserEmailFromURL = getUserEmailFromURL;
exports.convertToUserURL = convertToUserURL;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  if (!url) throw Error('URL is needed to split');

  function recurse(value) {
    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
    var subst = '$1,$3,$4';
    var parts = value.replace(regex, subst).split(',');
    return parts;
  }

  var parts = recurse(url);

  // If the url has no scheme
  if (parts[0] === url && !parts[0].includes('@')) {

    var _result = {
      type: "",
      domain: url,
      identity: ""
    };

    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);

    return _result;
  }

  // check if the url has the scheme and includes an @
  if (parts[0] === url && parts[0].includes('@')) {
    var scheme = parts[0] === url ? 'smtp' : parts[0];
    parts = recurse(scheme + '://' + parts[0]);
  }

  // if the domain includes an @, divide it to domain and identity respectively
  if (parts[1].includes('@')) {
    parts[2] = parts[0] + '://' + parts[1];
    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
  } /*else if (parts[2].includes('/')) {
    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
    }*/

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

function divideEmail(email) {
  var indexOfAt = email.indexOf('@');

  var result = {
    username: email.substring(0, indexOfAt),
    domain: email.substring(indexOfAt + 1, email.length)
  };

  return result;
}

/**
 * Check if an Object is empty
 * @param  {Object} object Object to be checked
 * @return {Boolean}       status of Object, empty or not (true|false);
 */
function emptyObject(object) {
  return (0, _keys2.default)(object).length > 0 ? false : true;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse((0, _stringify2.default)(obj));
}

/**
 * Obtains the user URL that corresponds to a given email
 * @param  {string} userEmail The user email
 * @return {URL.URL} userURL The user URL
 */
function getUserURLFromEmail(userEmail) {
  var indexOfAt = userEmail.indexOf('@');
  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
}

/**
 * Obtains the user email that corresponds to a given URL
 * @param  {URL.URL} userURL The user URL
 * @return {string} userEmail The user email
 */
function getUserEmailFromURL(userURL) {
  var url = divideURL(userURL);
  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
}

/**
 * Check if the user identifier is already in the URL format, if not, convert to URL format
 * @param  {string}   identifier  user identifier
 * @return {string}   userURL    the user URL
 */
function convertToUserURL(identifier) {

  // check if the identifier is already in the url format
  if (identifier.substring(0, 7) === 'user://') {
    var dividedURL = divideURL(identifier);

    //check if the url is well formated
    if (dividedURL.domain && dividedURL.identity) {
      return identifier;
    } else {
      throw 'userURL with wrong format';
    }

    //if not, convert the user email to URL format
  } else {
    return getUserURLFromEmail(identifier);
  }
}

/***/ }),
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */
/***/ (function(module, exports) {

//     proxy-observe v0.0.18
//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay
//     MIT License - http://opensource.org/licenses/mit-license.php
(function() {
	"use strict";
	// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to
	// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe
	// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}
	// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.
	// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:
	// pausable - create the Observer so it can be paused
	// pause - create observer in paused state
	// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery
	// to pause delivery set a property called pause on the function deliver to true
	// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver
	if(!Object.observe && typeof(Proxy)==="function") {
		function Observer(target,callback,acceptlist,pausable,pause,delay) {
	    	var me = this, proxy;
	    	function deliver(ignorePrevious,delay) {
	    		deliver.delay = delay;
	    		if(!deliver.pause) {
	        		if(me.changeset.length>0) {
	        			if(!ignorePrevious) {
		    	    		var changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });
		        			if(changes.length>0) {
		        				callback(changes);
		        			}
	        			}
	        			me.changeset = [];
	        		}
	    		}
	    	}
	    	deliver.pause = pause;
	    	deliver.delay = delay;
		    me.get = function(target, property) {
		    	if(property==="__observer__") {
		    		return me;
		    	}
		    	if(property==="unobserve") {
		    		return function() {
		    			Object.unobserve(target);
		    			return target;
		    		};
		    	}
		    	if(property==="deliver") {
		    		return deliver;
		    	}
		    	return target[property];
		    }
	    	me.target = target;
	    	me.changeset = [];
	    	if(!me.target.__observerCallbacks__) {
	    		// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve
	    		Object.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});
	    		Object.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});
	    	}
	    	me.target.__observerCallbacks__.push(callback);
	    	me.target.__observers__.push(this);
	    	proxy = new Proxy(target,me);
	    	deliver(false,delay);
	    	return proxy;
	    }
		Observer.prototype.deliver = function() {
			return this.get(null,"deliver");
		}
	    Observer.prototype.set = function(target, property, value) { // , receiver
	    	var oldvalue = target[property];
	    	var type = (oldvalue===undefined ? "add" : "update");
	    	target[property] = value;
	    	if(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {
	        	var change = {object:target,name:property,type:type},
	        		start = this.changeset.length === 0,
	        		deliver = this.deliver();
	        	if(type==="update") {
	        		change.oldValue = oldvalue;
	        	}
	        	this.changeset.push(change);
	        	if(start) {
	        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
	        	}
	    	}
	    	return true;
	    };
	    Observer.prototype.deleteProperty = function(target, property) {
	    	var oldvalue = target[property];
	    	//if(typeof(oldvalue)!=="undefined") {
		    	delete target[property];
		    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {
		        	var change = {object:target,name:property,type:"delete",oldValue:oldvalue},
		        		start = this.changeset.length === 0,
		        		deliver = this.deliver();
		        	this.changeset.push(change);
		        	if(start) {
		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		        	}
		    	}
	    	//}
	    	return true;
	    };
	    Observer.prototype.defineProperty = function(target, property, descriptor) {
	    	Object.defineProperty(target, property, descriptor);
	    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {
	        	var change = {object:target,name:property,type:"reconfigure"},
        			start = this.changeset.length === 0,
        			deliver = this.deliver();
	        	this.changeset.push(change);
	        	if(start) {
	        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
	        	}
	    	}
	    	return true;
	    };
	    Observer.prototype.setPrototypeOf = function(target, prototype) {
	    	var oldvalue = Object.getPrototypeOf(target);
	    	Object.setPrototypeOf(target, prototype);
	    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {
	        	var change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},
    				start = this.changeset.length === 0,
    				deliver = this.deliver();
	        	this.changeset.push(change);
	        	if(start) {
	        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
	        	}
	    	}
	    	return true;
	    };
	    Observer.prototype.preventExtensions = function(target) {
	        Object.preventExtensions(target);
	    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {
	        	var change = {object:target,type:"preventExtensions"},
					start = this.changeset.length === 0,
					deliver = this.deliver();
	        	this.changeset.push(change);
	        	if(start) {
	        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
	        	}
	    	}
	    	return true;
	    };
	    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {
	    	return new Observer(object,callback,acceptlist,pausable,pause,delay);
	    };
	    Object.unobserve = function(object,callback) {
	    	if(object.__observerCallbacks__) {
	    		if(!callback) {
	    			object.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);
	    			object.__observers__.splice(0,object.__observers__.length);
	    			return;
	    		}
	    		object.__observerCallbacks__.forEach(function(observercallback,i) {
	    			if(callback===observercallback) {
	    				object.__observerCallbacks__.splice(i,1);
	    				delete object.__observers__[i].callback;
	    				object.__observers__.splice(i,1);
	    			}
	    		});
	    	}
	    };
	    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {
	    	if(!(object instanceof Array) && !Array.isArray(object)) {
	    		throw new TypeError("First argument to Array.observer is not an Array");
	    	}
            	acceptlist = acceptlist || ["add", "update", "delete", "splice"];
	    	var arrayproxy = new Proxy(object,{get: function(target,property) {
	    		if(property==="unobserve") {
		    		return function(callback) {
		    			if(callback) {
		    				return Object.unobserve(target,callback);
		    			}
		    			return target.unobserve();
		    		};
		    	}
	    		if(property==="splice") {
	    			return function(start,end) {
	    				if(typeof(start)!=="number" || typeof(end)!=="number") {
	    					throw new TypeError("First two arguments to Array splice are not number, number");
	    				}
	    	    		var removed = this.slice(start,start+end),
	    	    			addedCount = (arguments.length > 1 ? arguments.length-2 : 0),
	    	    			change =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};
	    	    		target.splice.apply(target,arguments);
	    	    		if(acceptlist.indexOf("splice")>=0) {
	    	    			var start = proxy.__observer__.changeset.length === 0,
	    	        			deliver = proxy.__observer__.deliver();
	    	    			proxy.__observer__.changeset.push(change);
	    	    			if(start) {
	    		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
	    		        	}
	    	    		}
	    	    	}
	    		}
	    		if(property==="push") {
	    			 return function(item) {
	    		    	return this.splice(this.length,0,item);
	    		    }
	    		}
	    		if(property==="pop") {
	    			 return function() {
	    		    	return this.splice(this.length-1,1);
	    		    }
	    		}
	    		if(property==="unshift") {
	    			 return function(item) {
    		    		return this.splice(0,0,item);
    		    	}
	    		}
	    		if(property==="shift") {
	    			return function() {
	    	    		return this.splice(0,1);
	    	    	}
	    		}
	    		return target[property];
	    	}});
	    	var proxy = Object.observe(arrayproxy,function(changeset) { 
	    		var changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });
	    		if(changes.length>0) {
	    			callback(changes);
	    		}
	    	},acceptlist,pausable,pause,delay);
	    	return proxy;
	    };
	    Array.unobserve = function(object,callback) {
		  return object.unobserve(callback);
	    }
	}
	Object.deepObserve = function(object,callback,parts) {

		parts = (parts ? parts : []);

		var toTypeName = function(obj) {
			return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
		}

		function reobserve(value, parts) {
			var keys = Object.keys(value);
			keys.forEach(function(key) {
				if((toTypeName(value[key]) === 'object' || toTypeName(value[key]) === 'array') && !value[key].hasOwnProperty('__observers__')) {
					var newparts = parts.slice(0);
					newparts.push(key);
					value[key] = Object.deepObserve(value[key],callback,newparts);
				}
			});
		}

		reobserve(object, parts);

		var observed = Object.observe(object,function(changeset) {
			var changes = [];
			function recurse(name,rootObject,oldObject,newObject,path) {
				if(newObject instanceof Object) {
					var newkeys = Object.keys(newObject);
					newkeys.forEach(function(key) {
						if(!oldObject || (oldObject[key]!==newObject[key])) {
							var oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),
								change = (oldvalue===undefined ? "add" : "update"),
								keypath = path + "." + key;

							changes.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});
							recurse(name,rootObject,oldvalue,newObject[key],keypath);
						}
					});
				} else if(oldObject instanceof Object) {
					var oldkeys = Object.keys(oldObject);
					oldkeys.forEach(function(key) {
						var change = (newObject===null ? "update" : "delete"),
							keypath = path + "." + key;
							
						changes.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});
						recurse(name,rootObject,oldObject[key],undefined,keypath);
					});
				}
			}
			changeset.forEach(function(change) {
				var keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;

				if (change.type === "update" || change.type === "add") { 
					reobserve(change.object, parts);
				}

				changes.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});
				recurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);
			});
			callback(changes);
		});
		return observed;
	};
})();


/***/ }),
/* 119 */,
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(70);

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = __webpack_require__(31);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(35);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(125);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(34);

var _inherits3 = _interopRequireDefault(_inherits2);

var _DataObject2 = __webpack_require__(122);

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _DataObjectChild = __webpack_require__(123);

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var FilterType = { ANY: 'any', START: 'start', EXACT: 'exact' };

/**
 * The class returned from the Syncher subscribe call.
 * To be used as an observation point from a DataObjectReporter change.
 */

var DataObjectObserver = function (_DataObject) {
  (0, _inherits3.default)(DataObjectObserver, _DataObject);

  /* private
  _changeListener: MsgListener
   ----event handlers----
  _filters: {<filter>: {type: <start, exact>, callback: <function>} }
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method
   */

  //TODO: For Further Study
  function DataObjectObserver(syncher, url, schema, initialStatus, initialData, childrens, initialVersion, mutual) {
    (0, _classCallCheck3.default)(this, DataObjectObserver);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (DataObjectObserver.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver)).call(this, syncher, url, schema, initialStatus, initialData.data, childrens, mutual));

    var _this = _this2;

    _this._version = initialVersion;
    _this._filters = {};

    _this._syncObj.observe(function (event) {
      _this._onFilter(event);
    });

    //setup childrens data from subscription
    (0, _keys2.default)(initialData.childrens).forEach(function (childId) {
      var childData = initialData.childrens[childId];
      _this._childrenObjects[childId] = new _DataObjectChild2.default(_this, childId, childData);
    });

    _this._allocateListeners();
    return _this2;
  }

  (0, _createClass3.default)(DataObjectObserver, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      (0, _get3.default)(DataObjectObserver.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {
        if (msg.type === 'update') {
          console.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);
          _this._changeObject(_this._syncObj, msg);
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      (0, _get3.default)(DataObjectObserver.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._changeListener.remove();
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      _this._releaseListeners();
      delete _this._syncher._observers[_this._url];
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      var _this = this;

      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalUnSubscribe
      var unSubscribeMsg = {
        type: 'unsubscribe', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(unSubscribeMsg, function (reply) {
        console.log('DataObjectObserver-UNSUBSCRIBE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._observers[_this._url];
        }
      });
    }

    /**
     * Register the change listeners sent by the reporter
     * @param {string} filter - Filter that identifies the field (separated dot path). Accepts * at the end for a more unrestricted filtering.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onChange',
    value: function onChange(filter, callback) {
      var key = filter;
      var filterObj = {
        type: FilterType.EXACT,
        callback: callback
      };

      var idx = filter.indexOf('*');
      if (idx === filter.length - 1) {
        if (idx === 0) {
          filterObj.type = FilterType.ANY;
        } else {
          filterObj.type = FilterType.START;
          key = filter.substr(0, filter.length - 1);
        }
      }

      this._filters[key] = filterObj;
    }
  }, {
    key: '_onFilter',
    value: function _onFilter(event) {
      var _this = this;

      (0, _keys2.default)(_this._filters).forEach(function (key) {
        var filter = _this._filters[key];
        if (filter.type === FilterType.ANY) {
          //match anything
          filter.callback(event);
        } else if (filter.type === FilterType.START) {
          //if starts with filter...
          if (event.field.indexOf(key) === 0) {
            filter.callback(event);
          }
        } else if (filter.type === FilterType.EXACT) {
          //exact match
          if (event.field === key) {
            filter.callback(event);
          }
        }
      });
    }
  }]);
  return DataObjectObserver;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectObserver;
module.exports = exports['default'];

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(70);

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = __webpack_require__(31);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(35);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = __webpack_require__(125);

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = __webpack_require__(34);

var _inherits3 = _interopRequireDefault(_inherits2);

var _DataObject2 = __webpack_require__(122);

var _DataObject3 = _interopRequireDefault(_DataObject2);

var _utils = __webpack_require__(109);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The class returned from the Syncher create call.
 * To be used as a reporter point, changes will be submited to DataObjectObserver instances.
 */
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var DataObjectReporter = function (_DataObject) {
  (0, _inherits3.default)(DataObjectReporter, _DataObject);

  /* private
  _subscriptions: <hypertyUrl: { status: string } }>
   ----event handlers----
  _onSubscriptionHandler: (event) => void
  _onResponseHandler: (event) => void
  _onReadHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher.create method
   */
  function DataObjectReporter(syncher, url, schema, initialStatus, initialData, childrens) {
    (0, _classCallCheck3.default)(this, DataObjectReporter);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (DataObjectReporter.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter)).call(this, syncher, url, schema, initialStatus, initialData, childrens));

    var _this = _this2;

    _this._subscriptions = {};

    _this._syncObj.observe(function (event) {
      console.log('DataObjectReporter-' + url + '-SEND: ', event);
      _this._onChange(event);
    });

    _this._allocateListeners();
    return _this2;
  }

  (0, _createClass3.default)(DataObjectReporter, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      (0, _get3.default)(DataObjectReporter.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter.prototype), '_allocateListeners', this).call(this);
      var _this = this;

      _this._objectListener = _this._bus.addListener(_this._url, function (msg) {
        console.log('DataObject-' + _this._url + '-RCV: ', msg);
        switch (msg.type) {
          case 'response':
            _this._onResponse(msg);break;
          case 'read':
            _this._onRead(msg);break;
        }
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      (0, _get3.default)(DataObjectReporter.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter.prototype), '_releaseListeners', this).call(this);
      var _this = this;

      _this._objectListener.remove();
    }

    /**
     * Send invitations (create messages) to hyperties, observers list.
     * @param  {HypertyURL[]} observers List of Hyperty URL's
     */

  }, {
    key: 'inviteObservers',
    value: function inviteObservers(observers) {
      var _this = this;

      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate
      var inviteMsg = {
        type: 'create', from: _this._syncher._owner, to: _this._syncher._subURL,
        body: { resume: false, resource: _this._url, schema: _this._schema, value: _this._syncObj.data, authorise: observers }
      };

      _this._bus.postMessage(inviteMsg);
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onDelete
      var deleteMsg = {
        type: 'delete', from: _this._owner, to: _this._syncher._subURL,
        body: { resource: _this._url }
      };

      _this._bus.postMessage(deleteMsg, function (reply) {
        console.log('DataObjectReporter-DELETE: ', reply);
        if (reply.body.code === 200) {
          _this._releaseListeners();
          delete _this._syncher._reporters[_this._url];
        }
      });
    }

    /**
     * Subscriptions requested and accepted to this reporter
     * @type {Object<HypertyURL, SyncSubscription>}
     */

  }, {
    key: 'onSubscription',


    /**
     * Setup the callback to process subscribe and unsubscribe notifications
     * @param {function(event: MsgEvent)} callback function to receive events
     */
    value: function onSubscription(callback) {
      this._onSubscriptionHandler = callback;
    }

    /**
     * Setup the callback to process response notifications of the create's
     * @param {function(event: MsgEvent)} callback function to receive events
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }

    /**
     * Setup the callback to process read notifications
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onRead',
    value: function onRead(callback) {
      this._onReadHandler = callback;
    }

    //FLOW-IN: message received from parent Syncher -> _onForward

  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      console.log('DataObjectReporter-RCV: ', msg);
      switch (msg.body.type) {
        case 'subscribe':
          _this._onSubscribe(msg);break;
        case 'unsubscribe':
          _this._onUnSubscribe(msg);break;
      }
    }

    //FLOW-IN: message received from this -> _onForward: emitted by a remote Syncher -> subscribe

  }, {
    key: '_onSubscribe',
    value: function _onSubscribe(msg) {
      var _this3 = this;

      var _this = this;
      var hypertyUrl = msg.body.from;
      console.log('[DataObjectReporter._onSubscribe]', msg);

      var event = {
        type: msg.body.type,
        url: hypertyUrl,

        identity: msg.body.identity,

        accept: function accept() {
          //create new subscription
          var sub = { url: hypertyUrl, status: 'on' };
          _this._subscriptions[hypertyUrl] = sub;

          //process and send childrens data
          var childrenValues = {};
          (0, _keys2.default)(_this._childrenObjects).forEach(function (childId) {
            var childData = _this._childrenObjects[childId].data;
            childrenValues[childId] = (0, _utils.deepClone)(childData);
          });

          var sendMsg = {
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 200, schema: _this._schema, version: _this._version, value: { data: (0, _utils.deepClone)(_this.data), childrens: childrenValues } }
          };

          //TODO: For Further Study
          if (msg.body.hasOwnProperty('mutualAuthentication') && !msg.body.mutualAuthentication) {
            sendMsg.body.mutualAuthentication = _this3._mutualAuthentication;
            _this3._mutualAuthentication = msg.body.mutualAuthentication;
          }

          //send ok response message
          _this._bus.postMessage(sendMsg);

          return sub;
        },

        reject: function reject(reason) {
          //send reject response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 403, desc: reason }
          });
        }
      };

      if (_this._onSubscriptionHandler) {
        console.log('SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }

    //FLOW-IN: message received from this -> _onForward: emitted by a remote DataObjectObserver -> unsubscribe

  }, {
    key: '_onUnSubscribe',
    value: function _onUnSubscribe(msg) {
      var _this = this;
      var hypertyUrl = msg.body.from;

      var sub = _this._subscriptions[hypertyUrl];
      delete _this._subscriptions[hypertyUrl];

      var event = {
        type: msg.body.type,
        url: hypertyUrl,
        object: sub
      };

      if (_this._onSubscriptionHandler) {
        console.log('UN-SUBSCRIPTION-EVENT: ', event);
        _this._onSubscriptionHandler(event);
      }
    }

    //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> _onRemoteCreate -> event.ack

  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.from,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        console.log('RESPONSE-EVENT: ', event);
        _this._onResponseHandler(event);
      }
    }

    //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> read

  }, {
    key: '_onRead',
    value: function _onRead(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.from,

        accept: function accept() {
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 200, value: (0, _utils.deepClone)(_this.data) }
          });
        },

        reject: function reject(reason) {
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 401, desc: reason }
          });
        }
      };

      if (_this._onReadHandler) {
        console.log('READ-EVENT: ', event);
        _this._onReadHandler(event);
      }
    }
  }, {
    key: 'subscriptions',
    get: function get() {
      return this._subscriptions;
    }
  }]);
  return DataObjectReporter;
}(_DataObject3.default /* implements SyncStatus */);

exports.default = DataObjectReporter;
module.exports = exports['default'];

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(71);

var _promise2 = _interopRequireDefault(_promise);

var _keys = __webpack_require__(70);

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

var _ProxyObject = __webpack_require__(124);

var _ProxyObject2 = _interopRequireDefault(_ProxyObject);

var _DataObjectChild = __webpack_require__(123);

var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);

var _utils = __webpack_require__(109);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Main extension class for observers and reporters, with common properties and methods.
 * Children management is common for observers and reporters.
 */
var DataObject = function () {
  /* private
  _version: number
   _owner: HypertyURL
  _url: ObjectURL
  _schema: Schema
  _bus: MiniBus
  _status: on | paused
  _syncObj: SyncData
   _children: { id: DataObjectChild }
  _childrenListeners: [MsgListener]
   ----event handlers----
  _onAddChildHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's
   */
  function DataObject(syncher, url, schema, initialStatus, initialData, childrens) {
    var mutual = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
    (0, _classCallCheck3.default)(this, DataObject);

    var _this = this;

    _this._syncher = syncher;
    _this._url = url;
    _this._schema = schema;
    _this._status = initialStatus;
    _this._syncObj = new _ProxyObject2.default(initialData);
    _this._childrens = childrens;

    //TODO: For Further Study
    _this._mutualAuthentication = mutual;

    _this._version = 0;
    _this._childId = 0;
    _this._childrenObjects = {};
    _this._childrenListeners = [];

    _this._owner = syncher._owner;
    _this._bus = syncher._bus;
  }

  (0, _createClass3.default)(DataObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this2 = this;

      var _this = this;

      var childBaseURL = _this._url + '/children/';
      console.log('[Data Object - AllocateListeners] - ', _this._childrens);
      if (_this._childrens) {
        _this._childrens.forEach(function (child) {
          var childURL = childBaseURL + child;
          var listener = _this._bus.addListener(childURL, function (msg) {
            //ignore msg sent by himself
            if (msg.from !== _this2._owner) {
              console.log('DataObject-Children-RCV: ', msg);
              switch (msg.type) {
                case 'create':
                  _this._onChildCreate(msg);break;
                case 'delete':
                  console.log(msg);break;
                default:
                  _this._changeChildren(msg);break;
              }
            }
          });

          _this._childrenListeners.push(listener);
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._childrenListeners.forEach(function (listener) {
        listener.remove();
      });

      (0, _keys2.default)(_this._childrenObjects).forEach(function (key) {
        _this._childrenObjects[key]._releaseListeners();
      });
    }

    /**
     * Object URL of reporter or observer
     * @type {ObjectURL}
     */

  }, {
    key: 'pause',


    /**
     * @ignore
     */
    value: function pause() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'resume',
    value: function resume() {
      //TODO: this feature needs more analise
      throw 'Not implemented';
    }

    /**
     * @ignore
     */

  }, {
    key: 'stop',
    value: function stop() {
      //TODO: should remove the subscription and send message unsubscribe?
      throw 'Not implemented';
    }

    /**
     * Create and add a DataObjectChild to a children collection.
     * @param {String} children - Children name where the child is added.
     * @param {JSON} initialData - Initial data of the child
     * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.
     * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.
     */

  }, {
    key: 'addChild',
    value: function addChild(children, initialData, identity) {
      var _this = this;

      //create new child unique ID, based on hypertyURL
      _this._childId++;
      var msgChildId = _this._owner + '#' + _this._childId;
      var msgChildPath = _this._url + '/children/' + children;

      //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus
      var requestMsg = {
        type: 'create', from: _this._owner, to: msgChildPath,
        body: { resource: msgChildId, value: initialData }
      };

      if (identity) {
        requestMsg.body.identity = identity;
      }

      //TODO: For Further Study
      if (!_this._mutualAuthentication) requestMsg.body.mutualAuthentication = _this._mutualAuthentication;

      //returns promise, in the future, the API may change to asynchronous call
      return new _promise2.default(function (resolve) {
        var msgId = _this._bus.postMessage(requestMsg);

        console.log('create-reporter-child( ' + _this._owner + ' ): ', requestMsg);
        var newChild = new _DataObjectChild2.default(_this, msgChildId, initialData, _this._owner, msgId);
        newChild.onChange(function (event) {
          _this._onChange(event, { path: msgChildPath, childId: msgChildId });
        });

        _this._childrenObjects[msgChildId] = newChild;

        resolve(newChild);
      });
    }

    /**
     * Setup the callback to process create and delete of childrens.
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onAddChild',
    value: function onAddChild(callback) {
      this._onAddChildrenHandler = callback;
    }

    //FLOW-IN: message received from a remote DataObject -> addChild

  }, {
    key: '_onChildCreate',
    value: function _onChildCreate(msg) {
      var _this = this;
      var msgChildId = msg.body.resource;

      console.log('create-observer-child( ' + _this._owner + ' ): ', msg);
      var newChild = new _DataObjectChild2.default(_this, msgChildId, msg.body.value);
      _this._childrenObjects[msgChildId] = newChild;

      setTimeout(function () {
        //FLOW-OUT: will flow to DataObjectChild -> _onResponse
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200, source: _this._owner }
        });
      });

      var event = {
        type: msg.type,
        from: msg.from,
        url: msg.to,
        value: msg.body.value,
        childId: msgChildId,
        identity: msg.body.identity
      };

      if (_this._onAddChildrenHandler) {
        console.log('ADD-CHILDREN-EVENT: ', event);
        _this._onAddChildrenHandler(event);
      }
    }

    //send delta messages to subscriptions

  }, {
    key: '_onChange',
    value: function _onChange(event, childInfo) {
      var _this = this;

      _this._version++;

      if (_this._status === 'on') {
        //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus
        var changeMsg = {
          type: 'update', from: _this._url, to: _this._url + '/changes',
          body: { version: _this._version, source: _this._owner, attribute: event.field }
        };

        console.log('[DataObject - _onChange] - ', event, childInfo, changeMsg);

        if (event.oType === _ProxyObject.ObjectType.OBJECT) {
          if (event.cType !== _ProxyObject.ChangeType.REMOVE) {
            changeMsg.body.value = event.data;
          }
        } else {
          changeMsg.body.attributeType = event.oType;
          changeMsg.body.value = event.data;
          if (event.cType !== _ProxyObject.ChangeType.UPDATE) {
            changeMsg.body.operation = event.cType;
          }
        }

        //childInfo must have (path, childId)
        if (childInfo) {
          changeMsg.to = childInfo.path;
          changeMsg.body.resource = childInfo.childId;
        }

        //TODO: For Further Study
        if (!_this._mutualAuthentication) changeMsg.body.mutualAuthentication = _this._mutualAuthentication;

        _this._bus.postMessage(changeMsg);
      }
    }

    //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data

  }, {
    key: '_changeObject',
    value: function _changeObject(syncObj, msg) {
      var _this = this;

      //TODO: update version ?
      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?
      //will we need to confirm the reception ?
      if (_this._version + 1 === msg.body.version) {
        _this._version++;
        var path = msg.body.attribute;
        var value = (0, _utils.deepClone)(msg.body.value);
        var findResult = syncObj.findBefore(path);

        if (msg.body.attributeType === _ProxyObject.ObjectType.ARRAY) {
          if (msg.body.operation === _ProxyObject.ChangeType.ADD) {
            var arr = findResult.obj;
            var index = findResult.last;
            Array.prototype.splice.apply(arr, [index, 0].concat(value));
          } else if (msg.body.operation === _ProxyObject.ChangeType.REMOVE) {
            var _arr = findResult.obj;
            var _index = findResult.last;
            _arr.splice(_index, value);
          } else {
            findResult.obj[findResult.last] = value; // UPDATE
          }
        } else {
          if (msg.body.value) {
            findResult.obj[findResult.last] = value; // UPDATE or ADD
          } else {
            delete findResult.obj[findResult.last]; // REMOVE
          }
        }
      } else {
        //TODO: how to handle unsynchronized versions?
        console.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');
      }
    }

    //FLOW-IN: message received from a remote DataObjectChild when changing data

  }, {
    key: '_changeChildren',
    value: function _changeChildren(msg) {
      var _this = this;
      console.log('Change children: ', _this._owner, msg);

      var childId = msg.body.resource;
      var children = _this._childrenObjects[childId];

      if (children) {
        _this._changeObject(children._syncObj, msg);
      } else {
        console.log('No children found for: ', childId);
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }

    /**
     * Object schema URL (this field is not yet stable, and is subsject to change)
     * @type {SchemaURL}
     */

  }, {
    key: 'schema',
    get: function get() {
      return this._schema;
    }

    /**
     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)
     * @type {Status} - Enum of: on | paused
     */

  }, {
    key: 'status',
    get: function get() {
      return this._status;
    }

    /**
     * Data structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }

    /**
     * All created children's since the subscription, doesn't contain all children's since reporter creation.
     * @type {Object<ChildId, DataObjectChild>}
     */

  }, {
    key: 'childrens',
    get: function get() {
      return this._childrenObjects;
    }
  }]);
  return DataObject;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = DataObject;
module.exports = exports['default'];

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

var _ProxyObject = __webpack_require__(124);

var _ProxyObject2 = _interopRequireDefault(_ProxyObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.
 * Children object synchronization is a a fast forward mechanism, no need for direct subscriptions, it uses the already authorized subscription from the parent DataObject.
 */
var DataObjectChild /* implements SyncStatus */ = function () {
  /* private
   ----event handlers----
  _onResponseHandler: (event) => void
  */

  /**
   * @ignore
   * Should not be used directly by Hyperties. It's called by the DataObject.addChildren
   */
  function DataObjectChild(parent, childId, initialData, owner, msgId) {
    (0, _classCallCheck3.default)(this, DataObjectChild);

    var _this = this;

    _this._parent = parent;
    _this._childId = childId;
    _this._owner = owner;
    _this._msgId = msgId;

    _this._syncObj = new _ProxyObject2.default(initialData);

    _this._bus = parent._bus;
    _this._allocateListeners();
  }

  (0, _createClass3.default)(DataObjectChild, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //this is only needed for children reporters
      if (_this._owner) {
        _this._listener = _this._bus.addListener(_this._owner, function (msg) {
          if (msg.type === 'response' && msg.id === _this._msgId) {
            console.log('DataObjectChild.onResponse:', msg);
            _this._onResponse(msg);
          }
        });
      }
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      if (_this._listener) {
        _this._listener.remove();
      }
    }

    /**
     * Release and delete object data
     */

  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;

      delete _this._parent._children[_this._childId];

      _this._releaseListeners();

      //TODO: send delete message ?
    }

    /**
     * Children ID generated on addChildren. Unique identifier
     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>
     */

  }, {
    key: 'onChange',


    /**
     * Register the change listeners sent by the reporter child
     * @param {function(event: MsgEvent)} callback
     */
    value: function onChange(callback) {
      this._syncObj.observe(function (event) {
        callback(event);
      });
    }

    /**
     * Setup the callback to process response notifications of the creates
     * @param {function(event: MsgEvent)} callback
     */

  }, {
    key: 'onResponse',
    value: function onResponse(callback) {
      this._onResponseHandler = callback;
    }

    //FLOW-IN: message received from a remote DataObject -> _onChildCreate

  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      var event = {
        type: msg.type,
        url: msg.body.source,
        code: msg.body.code
      };

      if (_this._onResponseHandler) {
        _this._onResponseHandler(event);
      }
    }
  }, {
    key: 'childId',
    get: function get() {
      return this._childId;
    }

    /**
     * Data Structure to be synchronized.
     * @type {JSON} - JSON structure that should follow the defined schema, if any.
     */

  }, {
    key: 'data',
    get: function get() {
      return this._syncObj.data;
    }
  }]);
  return DataObjectChild;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = DataObjectChild;
module.exports = exports['default'];

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectType = exports.ChangeType = undefined;

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

__webpack_require__(118);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var objectType = { ARRAY: '[object Array]', OBJECT: '[object Object]' };

/**
 * @access private
 * Main class that maintains a JSON object, and observes changes in this object, recursively.
 * Internal objects and arrays are also observed.
 */

var SyncObject = function () {
  function SyncObject(initialData) {
    (0, _classCallCheck3.default)(this, SyncObject);

    var _this = this;

    _this._observers = [];
    _this._filters = {};

    this._data = initialData || {};

    this._internalObserve(this._data);
  }

  (0, _createClass3.default)(SyncObject, [{
    key: 'observe',
    value: function observe(callback) {
      this._observers.push(callback);
    }
  }, {
    key: 'find',
    value: function find(path) {
      var list = path.split('.');

      return this._findWithSplit(list);
    }
  }, {
    key: 'findBefore',
    value: function findBefore(path) {
      var result = {};
      var list = path.split('.');
      result.last = list.pop();
      result.obj = this._findWithSplit(list);

      return result;
    }
  }, {
    key: '_findWithSplit',
    value: function _findWithSplit(list) {
      var obj = this._data;
      list.forEach(function (value) {
        obj = obj[value];
      });

      return obj;
    }
  }, {
    key: '_internalObserve',
    value: function _internalObserve(object) {
      var _this2 = this;

      var handler = function handler(changeset) {

        changeset.every(function (change) {
          _this2._onChanges(change);
        });
      };

      this._data = Object.deepObserve(object, handler);
    }
  }, {
    key: '_fireEvent',
    value: function _fireEvent(event) {
      this._observers.forEach(function (callback) {
        callback(event);
      });
    }
  }, {
    key: '_onChanges',
    value: function _onChanges(change) {

      var obj = change.object;
      var objType = void 0;

      if (obj.constructor === Object) {
        objType = ObjectType.OBJECT;
      }

      if (obj.constructor === Array) {
        objType = ObjectType.ARRAY;
      }

      var fieldString = change.keypath;

      // console.log('Field:', fieldString);
      // console.log('type:', change.type);

      //let oldValue = change.oldValue;
      var newValue = obj[change.name];

      // console.info(change.type + ' | Field: ' + fieldString + ' | New Value:', JSON.stringify(newValue), fieldString.includes('length'));

      if (change.type === 'update' && !fieldString.includes('.length')) {
        this._fireEvent({
          cType: ChangeType.UPDATE,
          oType: objType,
          field: fieldString,
          data: newValue
        });
      }

      if (change.type === 'add') {
        this._fireEvent({
          cType: ChangeType.ADD,
          oType: objType,
          field: fieldString,
          data: newValue
        });
      }

      if (change.type === 'delete') {
        this._fireEvent({
          cType: ChangeType.REMOVE,
          oType: objType,
          field: fieldString
        });
      }
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }]);
  return SyncObject;
}();

var ChangeType = exports.ChangeType = { UPDATE: 'update', ADD: 'add', REMOVE: 'remove' };
var ObjectType = exports.ObjectType = { OBJECT: 'object', ARRAY: 'array' };
exports.default = SyncObject;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _getPrototypeOf = __webpack_require__(31);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = __webpack_require__(142);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

/***/ }),
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(71);

var _promise2 = _interopRequireDefault(_promise);

var _assign = __webpack_require__(140);

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

var _DataObjectReporter = __webpack_require__(121);

var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);

var _DataObjectObserver = __webpack_require__(120);

var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);

var _DataProvisional = __webpack_require__(137);

var _DataProvisional2 = _interopRequireDefault(_DataProvisional);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The main class for the syncher package.
* The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.
* Main functionality is to create reporters and to subscribe to existing ones.
*/
var Syncher = function () {
  /* private
  _owner: URL
  _bus: MiniBus
   _subURL: URL
   _reporters: <url: DataObjectReporter>
  _observers: <url: DataObjectObserver>
  _provisionals: <url: DataProvisional>
   ----event handlers----
  _onNotificationHandler: (event) => void
  _onResume: (event) => void
  */

  /**
  * Constructor that should be used by the Hyperty owner
  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.
  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.
  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.
  */
  function Syncher(owner, bus, config) {
    (0, _classCallCheck3.default)(this, Syncher);

    var _this = this;

    _this._owner = owner;
    _this._bus = bus;

    _this._subURL = config.runtimeURL + '/sm';

    _this._reporters = {};
    _this._observers = {};
    _this._provisionals = {};

    bus.addListener(owner, function (msg) {
      //ignore msg sent by himself
      if (msg.from !== owner) {
        console.info('[Syncher] Syncher-RCV: ', msg);
        switch (msg.type) {
          case 'forward':
            _this._onForward(msg);break;
          case 'create':
            _this._onRemoteCreate(msg);break;
          case 'delete':
            _this._onRemoteDelete(msg);break;
        }
      }
    });
  }

  /**
  * The owner of the Syncher and all created reporters.
  * @type {HypertyURL}
  */


  (0, _createClass3.default)(Syncher, [{
    key: 'create',


    /**
    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.
    * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema
    * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription
    * @param  {JSON} initialData - Initial data of the reporter
    * @param  {boolean} store - (Optional) if true, object will be stored by the runtime
    * @param  {boolean} p2p - (Optional) if true, data synchronisation stream will use p2p connection as much as possible
    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.
    * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP
    */
    value: function create(schema, observers, initialData) {
      var store = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var p2p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var identity = arguments[5];

      var _this = this;
      var criteria = {};

      criteria.p2p = p2p;
      criteria.store = store;
      criteria.schema = schema;
      criteria.observers = observers;
      criteria.initialData = initialData;

      if (identity) {
        criteria.identity = identity;
      }

      console.log('[syncher - create] - create Reporter - criteria: ', criteria);

      (0, _assign2.default)(criteria, { resume: false });

      return _this._create(criteria);
    }
  }, {
    key: 'resumeReporters',
    value: function resumeReporters(criteria) {
      var _this = this;
      console.log('[syncher - create] - resume Reporter - criteria: ', criteria);

      (0, _assign2.default)(criteria, { resume: true });

      return _this._create(criteria);
    }

    /**
    * Request a subscription to an existent reporter object.
    * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema
    * @param {ObjectURL} objURL - Address of the existent reporter object to be observed
    * @param {Boolean} [store=false] - Save the subscription on the Syncher Manager for further resume (Default is false)
    * @param {Boolean} [p2p=false] - Info about if should use p2p connection (Default is false)
    * @param {Boolean} [mutual=true] - Info about if messages of this object should be encrypted (Default is true)
    * @param  {MessageBodyIdentity} identity - (optional) identity data to be added to identity the user reporter. To be used for legacy identities.
    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.
    */

  }, {
    key: 'subscribe',
    value: function subscribe(schema, objURL) {
      var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var p2p = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var mutual = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      var identity = arguments[5];

      var _this = this;
      var criteria = {};

      criteria.p2p = p2p;
      criteria.store = store;
      criteria.schema = schema;

      criteria.resource = objURL;
      if (identity) {
        criteria.identity = identity;
      }

      //TODO: For Further Study
      criteria.mutual = mutual;

      console.log('[syncher - subscribe] - subscribe criteria: ', criteria);

      (0, _assign2.default)(criteria, { resume: false });

      return _this._subscribe(criteria);
    }

    /**
    * Request a subscription to an existent reporter object.
    * @param {criteria} criteria - Information to discovery the observer object
    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.
    */

  }, {
    key: 'resumeObservers',
    value: function resumeObservers(criteria) {
      var _this = this;
      var _criteria = criteria || {};

      (0, _assign2.default)(_criteria, { resume: true });

      return _this._subscribe(_criteria);
    }

    /**
    * Request a read action on the reporter object
    * @param {ObjectURL} objURL - URL of the reporter object to be read
    * @return {Promise<Object>} Return Promise to last available data of the reporter
    */

  }, {
    key: 'read',
    value: function read(objURL) {
      var _this = this;

      //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)
      //will reach the remote object in DataObjectReporter -> _onRead
      var readMsg = {
        type: 'read', from: _this._owner, to: objURL
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(readMsg, function (reply) {
          console.log('read-response: ', reply);
          if (reply.body.code === 200) {
            resolve(reply.body.value);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
    * Setup the callback to process create and delete events of remove Reporter objects.
    * This is releated to the messagens sent by create to the observers Hyperty array.
    * @param {function(event: MsgEvent)} callback
    */

  }, {
    key: 'onNotification',
    value: function onNotification(callback) {
      this._onNotificationHandler = callback;
    }
  }, {
    key: '_create',
    value: function _create(criteria) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var resume = criteria.resume;
        var initialData = criteria.initialData || {};
        var schema = void 0;

        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate
        var requestMsg = {
          type: 'create', from: _this._owner, to: _this._subURL,
          body: { resume: resume }
        };

        console.log('[syncher - create]: ', criteria, requestMsg);

        requestMsg.body.value = initialData;
        requestMsg.body.value.reporter = _this._owner;

        if (criteria.schema) {
          schema = criteria.schema;
          requestMsg.body.schema = criteria.schema;
        }

        if (criteria.p2p) requestMsg.body.p2p = criteria.p2p;
        if (criteria.store) requestMsg.body.store = criteria.store;
        if (criteria.observers) requestMsg.body.authorise = criteria.observers;
        if (criteria.identity) requestMsg.body.identity = criteria.identity;

        if (resume) {
          console.log('[syncher - create] - resume message: ', requestMsg);
        } else {
          console.log('[syncher - create] - create message: ', requestMsg);
        }

        //request create to the allocation system. Can be rejected by the PolicyEngine.
        _this._bus.postMessage(requestMsg, function (reply) {
          console.log('[syncher - create] - create-response: ', reply);
          if (reply.body.code === 200) {
            //reporter creation accepted
            var objURL = reply.body.resource;

            if (resume) {
              schema = reply.body.schema;
              initialData = reply.body.value;
            }

            var newObj = new _DataObjectReporter2.default(_this, objURL, schema, 'on', initialData, reply.body.childrenResources);
            _this._reporters[objURL] = newObj;

            resolve(newObj);
          } else {
            //reporter creation rejected
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: '_subscribe',
    value: function _subscribe(criteria) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe
        var subscribeMsg = {
          type: 'subscribe', from: _this._owner, to: _this._subURL,
          body: {}
        };

        // Hyperty request to be an Observer
        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer

        // Resume Subscriptions for the same Hyperty URL
        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url

        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.
        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url
        if (criteria) {
          if (criteria.hasOwnProperty('p2p')) subscribeMsg.body.p2p = criteria.p2p;
          if (criteria.hasOwnProperty('store')) subscribeMsg.body.store = criteria.store;
          if (criteria.hasOwnProperty('schema')) subscribeMsg.body.schema = criteria.schema;
          if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;
          if (criteria.hasOwnProperty('resource')) subscribeMsg.body.resource = criteria.resource;
          if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;
        }

        subscribeMsg.body.resume = criteria.resume;

        //TODO: For Further Study
        var mutualAuthentication = criteria.mutual;
        if (criteria.hasOwnProperty('mutual')) subscribeMsg.body.mutualAuthentication = mutualAuthentication;

        console.log('[syncher] - subscribe message: ', criteria, subscribeMsg);

        //request subscription
        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.
        //for more info see the DataProvisional class documentation.
        _this._bus.postMessage(subscribeMsg, function (reply) {
          console.log('[syncher] - subscribe-response: ', reply);

          var schema = reply.body.schema;
          var objURL = reply.body.resource;

          var newProvisional = _this._provisionals[objURL];
          delete _this._provisionals[objURL];
          if (newProvisional) newProvisional._releaseListeners();

          if (reply.body.code < 200) {
            console.log('[syncher] - new DataProvisional: ', reply.body.childrenResources, objURL);
            newProvisional = new _DataProvisional2.default(_this._owner, objURL, _this._bus, reply.body.childrenResources);
            _this._provisionals[objURL] = newProvisional;
          } else if (reply.body.code === 200) {
            console.log('[syncher] - new Data Object Observer: ', reply, _this._provisionals);

            var initialData = reply.body.value;
            if (!initialData.hasOwnProperty('childrens')) {
              initialData.childrens = {};
            }
            if (!initialData.hasOwnProperty('data')) {
              initialData.data = {};
            }

            //TODO: mutualAuthentication For Further Study
            var newObj = new _DataObjectObserver2.default(_this, objURL, schema, 'on', initialData, newProvisional.children, reply.body.version, mutualAuthentication);
            _this._observers[objURL] = newObj;

            resolve(newObj);
            newProvisional.apply(newObj);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe

  }, {
    key: '_onForward',
    value: function _onForward(msg) {
      var _this = this;

      var reporter = _this._reporters[msg.body.to];
      reporter._onForward(msg);
    }

    //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)

  }, {
    key: '_onRemoteCreate',
    value: function _onRemoteCreate(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.from.slice(0, -13);

      var event = {
        type: msg.type,
        from: msg.body.source,
        url: resource,
        schema: msg.body.schema,
        value: msg.body.value,
        identity: msg.body.identity,

        ack: function ack(type) {
          var lType = 200;
          if (type) {
            lType = type;
          }

          //send ack response message
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: lType }
          });
        }
      };

      if (_this._onNotificationHandler) {
        console.info('[Syncher] NOTIFICATION-EVENT: ', event);
        _this._onNotificationHandler(event);
      }
    }

    //FLOW-IN: message received from a remote DataObjectReporter -> delete

  }, {
    key: '_onRemoteDelete',
    value: function _onRemoteDelete(msg) {
      var _this = this;

      //remove "/subscription" from the URL
      var resource = msg.body.resource;

      var object = _this._observers[resource];
      if (object) {
        var event = {
          type: msg.type,
          url: resource,
          identity: msg.body.identity,

          ack: function ack(type) {
            var lType = 200;
            if (type) {
              lType = type;
            }

            //TODO: any other different options for the release process, like accept but nor release local?
            if (lType === 200) {
              object.delete();
            }

            //send ack response message
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: msg.from,
              body: { code: lType, source: _this._owner }
            });
          }
        };

        if (_this._onNotificationHandler) {
          console.log('NOTIFICATION-EVENT: ', event);
          _this._onNotificationHandler(event);
        }
      } else {
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 404, source: _this._owner }
        });
      }
    }
  }, {
    key: 'owner',
    get: function get() {
      return this._owner;
    }

    /**
    * All owned reporters, the ones that were created by a create
    * @type {Object<URL, DataObjectReporter>}
    */

  }, {
    key: 'reporters',
    get: function get() {
      return this._reporters;
    }

    /**
    * All owned observers, the ones that were created by a local subscription
    * @type {Object<URL, DataObjectObserver>}
    */

  }, {
    key: 'observers',
    get: function get() {
      return this._observers;
    }
  }]);
  return Syncher;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Syncher;
module.exports = exports['default'];

/***/ }),
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(8);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(10);

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
 * @access private
 * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.
 * It's used in Syncher -> subscribe. The flow is defined as:
 * 1. (observer) --subscribe--> (reporter)
 * 2. (observer) <--delta updates-- (reporter)
 * 3. (observer) <--subscribe response-- (reporter)
 * This means that there could be delta updates transferred before the subscription confirmation.
 * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.
 * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.
 */
var DataProvisional = function () {
  /* private
  _childrenListeners: [MsgListener]
  _listener: MsgListener
   _changes: []
  */

  function DataProvisional(owner, url, bus, children) {
    (0, _classCallCheck3.default)(this, DataProvisional);

    var _this = this;

    _this._owner = owner;
    _this._url = url;
    _this._bus = bus;
    _this._children = children;

    _this._changes = [];
    _this._allocateListeners();
  }

  (0, _createClass3.default)(DataProvisional, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      _this._listener = _this._bus.addListener(_this._url, function (msg) {
        console.log('DataProvisional-' + _this._url + '-RCV: ', msg);
        _this._changes.push(msg);
      });

      /*
      _this._childrenListeners = [];
      if (_this._children) {
        let childBaseURL = url + '/children/';
        _this._children.forEach((child) => {
          let childURL = childBaseURL + child;
          let listener = _this._bus.addListener(childURL, (msg) => {
            //ignore msg sent by himself
            if (msg.from !== owner) {
              console.log(msg);
            }
          });
           _this._childrenListeners.push(listener);
        });
      }*/
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._listener.remove();

      /*_this._childrenListeners.forEach((listener) => {
        listener.remove();
      });*/
    }
  }, {
    key: 'apply',
    value: function apply(observer) {
      var _this = this;
      _this._changes.forEach(function (change) {
        observer._changeObject(observer._syncObj, change);
      });
    }
  }, {
    key: 'children',
    get: function get() {
      return this._children;
    }
  }]);
  return DataProvisional;
}();

exports.default = DataProvisional;
module.exports = exports['default'];

/***/ }),
/* 138 */,
/* 139 */,
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(147), __esModule: true };

/***/ }),
/* 141 */,
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(149), __esModule: true };

/***/ }),
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(153);
module.exports = __webpack_require__(0).Object.assign;

/***/ }),
/* 148 */,
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(155);
var $Object = __webpack_require__(0).Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(18)
  , gOPS     = __webpack_require__(58)
  , pIE      = __webpack_require__(41)
  , toObject = __webpack_require__(32)
  , IObject  = __webpack_require__(56)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(11)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 151 */,
/* 152 */,
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(9);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(150)});

/***/ }),
/* 154 */,
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = __webpack_require__(13)
  , $getOwnPropertyDescriptor = __webpack_require__(57).f;

__webpack_require__(45)('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataObjectObserver = exports.DataObjectReporter = exports.Syncher = undefined;

var _Syncher = __webpack_require__(133);

var _Syncher2 = _interopRequireDefault(_Syncher);

var _DataObjectReporter = __webpack_require__(121);

var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);

var _DataObjectObserver = __webpack_require__(120);

var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Syncher = _Syncher2.default;
exports.DataObjectReporter = _DataObjectReporter2.default;
exports.DataObjectObserver = _DataObjectObserver2.default;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint undef: true */

exports.default = activate;

var _Syncher = __webpack_require__(2);

var _utils = __webpack_require__(1);

var _hello2 = __webpack_require__(0);

var _hello3 = _interopRequireDefault(_hello2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Hyperty Connector;
* @author Paulo Chainho [paulo-g-chainho@telecom.pt]
* @version 0.1.0
*/
var HelloWorldReporter = function () {

  /**
  * Create a new HelloWorldReporter
  * @param  {Syncher} syncher - Syncher provided from the runtime core
  */
  function HelloWorldReporter(hypertyURL, bus, configuration) {
    var _this2 = this;

    _classCallCheck(this, HelloWorldReporter);

    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');
    if (!bus) throw new Error('The MiniBus is a needed parameter');
    if (!configuration) throw new Error('The configuration is a needed parameter');

    var _this = this;

    var domain = (0, _utils.divideURL)(hypertyURL).domain;
    _this._domain = domain;
    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/HelloWorldDataSchema';

    var syncher = new _Syncher.Syncher(hypertyURL, bus, configuration);

    _this._syncher = syncher;

    _this._syncher.resumeReporters({}).then(function (resumeReporters) {

      if (!resumeReporters) return;

      // lets now observe any changes done in Hello World Object
      console.log('[hyperty syncher resume] - dataObject', resumeReporters);

      Object.values(resumeReporters).forEach(function (helloObjtReporter) {
        _this.helloObjtReporter = helloObjtReporter;

        _this2.prepareDataObjectReporter(helloObjtReporter);

        helloObjtReporter.data.hello = 'REPORTER RESUMED';

        console.log(_this2._onReporterResume);
        if (_this2._onReporterResume) _this2._onReporterResume(helloObjtReporter);
      });
    });
  }

  /**
  * Create HelloWorld Data Object
  * @param  {HypertyURL} HypertyURL - Invited
  */

  _createClass(HelloWorldReporter, [{
    key: 'hello',
    value: function hello(hypertyURL) {
      var _this = this;
      var syncher = _this._syncher;

      return new Promise(function (resolve, reject) {

        syncher.create(_this._objectDescURL, [hypertyURL], _hello3.default, false, false, 'hello').then(function (helloObjtReporter) {
          console.info('1. Return Created Hello World Data Object Reporter', helloObjtReporter);

          _this.helloObjtReporter = helloObjtReporter;

          _this.prepareDataObjectReporter(helloObjtReporter);

          resolve(helloObjtReporter);
        }).catch(function (reason) {
          console.error(reason);
          reject(reason);
        });
      });
    }
  }, {
    key: 'prepareDataObjectReporter',
    value: function prepareDataObjectReporter(helloObjtReporter) {

      helloObjtReporter.onSubscription(function (event) {
        console.info('-------- Hello World Reporter received subscription request --------- \n');

        // All subscription requested are accepted

        event.accept();
      });

      helloObjtReporter.onRead(function (event) {
        event.accept();
      });
    }

    /**
    * Update HelloWorld Data Object
    *
    */

  }, {
    key: 'bye',
    value: function bye(byeMsg) {
      var _this = this;

      console.log('bye:', _this.helloObjtReporter);

      if (byeMsg) _this.helloObjtReporter.data.hello = byeMsg;else {
        _this.helloObjtReporter.data.hello = "bye, bye";
      }
    }
  }, {
    key: 'onReporterResume',
    value: function onReporterResume(callback) {
      this._onReporterResume = callback;
    }
  }]);

  return HelloWorldReporter;
}();

function activate(hypertyURL, bus, configuration) {

  return {
    name: 'HelloWorldReporter',
    instance: new HelloWorldReporter(hypertyURL, bus, configuration)
  };
}
module.exports = exports['default'];

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBlNmVkMTdhMTcyZjBlMDAyMTJlZSIsIndlYnBhY2s6Ly8vLi9zcmMvaGVsbG8td29ybGQvaGVsbG8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL34vc2VydmljZS1mcmFtZXdvcmsvZGlzdC9TeW5jaGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxsby13b3JsZC9IZWxsb1dvcmxkUmVwb3J0ZXIuaHkuanMiXSwibmFtZXMiOlsiaGVsbG8iLCJuYW1lIiwiZGl2aWRlVVJMIiwiZGVlcENsb25lIiwiZ2V0VXNlck1lZGlhIiwidXJsIiwiRXJyb3IiLCJyZWN1cnNlIiwidmFsdWUiLCJyZWdleCIsInN1YnN0IiwicGFydHMiLCJyZXBsYWNlIiwic3BsaXQiLCJpbmNsdWRlcyIsInJlc3VsdCIsInR5cGUiLCJkb21haW4iLCJpZGVudGl0eSIsImNvbnNvbGUiLCJlcnJvciIsInNjaGVtZSIsInN1YnN0ciIsImluZGV4T2YiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJjb25zdHJhaW50cyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwidGhlbiIsIm1lZGlhU3RyZWFtIiwiY2F0Y2giLCJyZWFzb24iLCJhY3RpdmF0ZSIsIkhlbGxvV29ybGRSZXBvcnRlciIsImh5cGVydHlVUkwiLCJidXMiLCJjb25maWd1cmF0aW9uIiwiX3RoaXMiLCJfZG9tYWluIiwiX29iamVjdERlc2NVUkwiLCJzeW5jaGVyIiwiX3N5bmNoZXIiLCJyZXN1bWVSZXBvcnRlcnMiLCJsb2ciLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiaGVsbG9PYmp0UmVwb3J0ZXIiLCJwcmVwYXJlRGF0YU9iamVjdFJlcG9ydGVyIiwiZGF0YSIsIl9vblJlcG9ydGVyUmVzdW1lIiwiY3JlYXRlIiwiaW5mbyIsIm9uU3Vic2NyaXB0aW9uIiwiZXZlbnQiLCJhY2NlcHQiLCJvblJlYWQiLCJieWVNc2ciLCJjYWxsYmFjayIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUEyQyxjQUFjOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQzlEQSxJQUFJQSxRQUFRO0FBQ1ZDLFFBQU0sT0FESTtBQUVWRCxTQUFPO0FBRkcsQ0FBWjs7a0JBS2VBLEs7Ozs7Ozs7Ozs7Ozs7UUNzQ0NFLFMsR0FBQUEsUztRQXdEQUMsUyxHQUFBQSxTO1FBVUFDLFksR0FBQUEsWTtBQS9HaEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7QUFLQTs7Ozs7Ozs7QUFRQTs7Ozs7QUFLTyxTQUFTRixTQUFULENBQW1CRyxHQUFuQixFQUF3Qjs7QUFFN0IsTUFBSSxDQUFDQSxHQUFMLEVBQVUsTUFBTUMsTUFBTSx3QkFBTixDQUFOOztBQUVYLFdBQVNDLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQ3ZCLFFBQU1DLFFBQVEsMEZBQWQ7QUFDRSxRQUFNQyxRQUFRLFVB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QTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7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O0FBQ0QsT0FGRDtBQUlEOztBQUVEOzs7Ozs7O3dCQUtJRSxNLEVBQVE7QUFDVixVQUFJcEIsUUFBUSxJQUFaOztBQUVBeEIsY0FBUThCLEdBQVIsQ0FBWSxNQUFaLEVBQW9CTixNQUFNVSxpQkFBMUI7O0FBRUEsVUFBSVUsTUFBSixFQUNFcEIsTUFBTVUsaUJBQU4sQ0FBd0JFLElBQXhCLENBQTZCdkQsS0FBN0IsR0FBcUMrRCxNQUFyQyxDQURGLEtBRUs7QUFDSHBCLGNBQU1VLGlCQUFOLENBQXdCRSxJQUF4QixDQUE2QnZELEtBQTdCLEdBQXFDLFVBQXJDO0FBQ0M7QUFDSjs7O3FDQUVnQmdFLFEsRUFBVTtBQUN6QixXQUFLUixpQkFBTCxHQUF5QlEsUUFBekI7QUFDRDs7Ozs7O0FBT1ksU0FBUzFCLFFBQVQsQ0FBa0JFLFVBQWxCLEVBQThCQyxHQUE5QixFQUFtQ0MsYUFBbkMsRUFBa0Q7O0FBRS9ELFNBQU87QUFDTHpDLFVBQU0sb0JBREQ7QUFFTGdFLGNBQVUsSUFBSTFCLGtCQUFKLENBQXVCQyxVQUF2QixFQUFtQ0MsR0FBbkMsRUFBd0NDLGFBQXhDO0FBRkwsR0FBUDtBQUtEIiwiZmlsZSI6IkhlbGxvV29ybGRSZXBvcnRlci5oeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiYWN0aXZhdGVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYWN0aXZhdGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYWN0aXZhdGVcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZTZlZDE3YTE3MmYwZTAwMjEyZWUiLCJcblxubGV0IGhlbGxvID0ge1xuICBuYW1lOiBcImhlbGxvXCIsXG4gIGhlbGxvOiBcIkhlbGxvIGJ1ZGR5ISFcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVsbG87XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaGVsbG8td29ybGQvaGVsbG8uanMiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuICogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4gKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiovXG5cbi8vIGpzaGludCBicm93c2VyOnRydWUsIGpxdWVyeTogdHJ1ZVxuLy8ganNoaW50IHZhcnN0bXQ6IHRydWVcbi8qIGdsb2JhbCBIYW5kbGViYXJzICovXG5cbi8qKlxuICogU3VwcG9ydCBtb2R1bGUgd2l0aCBzb21lIGZ1bmN0aW9ucyB3aWxsIGJlIHVzZWZ1bFxuICogQG1vZHVsZSB1dGlsc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgZGl2aWRlVVJMXG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG9mIFVSTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkZW50aXR5IFRoZSBpZGVudGl0eSBvZiBVUkxcbiAqL1xuXG4vKipcbiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eVxuICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3NcbiAqIEByZXR1cm4ge2RpdmlkZVVSTH0gdGhlIHJlc3VsdCBvZiBkaXZpZGVVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHtcblxuICBpZiAoIXVybCkgdGhyb3cgRXJyb3IoJ1VSTCBpcyBuZWVkZWQgdG8gc3BsaXQnKTtcblxuXHRmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7XG5cdFx0Y29uc3QgcmVnZXggPSAvKFthLXpBLVotXSopKDpcXC9cXC8oPzpcXC4pP3w6KShbLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cXCt+Iz1cXC9dKikvZ2k7XG4gICAgY29uc3Qgc3Vic3QgPSAnJDEsJDMsJDQnO1xuXHQgIGxldCBwYXJ0cyA9IHZhbHVlLnJlcGxhY2UocmVnZXgsIHN1YnN0KS5zcGxpdCgnLCcpO1xuXHRcdHJldHVybiBwYXJ0cztcblx0fVxuXG5cdGxldCBwYXJ0cyA9IHJlY3Vyc2UodXJsKTtcblxuICAvLyBJZiB0aGUgdXJsIGhhcyBubyBzY2hlbWVcbiAgaWYgKHBhcnRzWzBdID09PSB1cmwgJiYgIXBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHtcblxuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICB0eXBlOiBcIlwiLFxuICAgICAgZG9tYWluOiB1cmwsXG4gICAgICBpZGVudGl0eTogXCJcIlxuICAgIH07XG5cbiAgICBjb25zb2xlLmVycm9yKCdbRGl2aWRlVVJMXSBEaXZpZGVVUkwgZG9uXFwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXHQvLyBjaGVjayBpZiB0aGUgdXJsIGhhcyB0aGUgc2NoZW1lIGFuZCBpbmNsdWRlcyBhbiBAXG5cdGlmIChwYXJ0c1swXSA9PT0gdXJsICYmIHBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHtcblx0XHRsZXQgc2NoZW1lID0gcGFydHNbMF0gPT09IHVybCA/ICdzbXRwJyA6IHBhcnRzWzBdO1xuXHRcdHBhcnRzID0gcmVjdXJzZShzY2hlbWUgKyAnOi8vJyArIHBhcnRzWzBdKTtcblx0fVxuXG5cdC8vIGlmIHRoZSBkb21haW4gaW5jbHVkZXMgYW4gQCwgZGl2aWRlIGl0IHRvIGRvbWFpbiBhbmQgaWRlbnRpdHkgcmVzcGVjdGl2ZWx5XG5cdGlmIChwYXJ0c1sxXS5pbmNsdWRlcygnQCcpKSB7XG5cdFx0cGFydHNbMl0gPSBwYXJ0c1swXSArICc6Ly8nICsgcGFydHNbMV07XG5cdFx0cGFydHNbMV0gPSBwYXJ0c1sxXS5zdWJzdHIocGFydHNbMV0uaW5kZXhPZignQCcpICsgMSlcbiAgICB9IFx0LyplbHNlIGlmIChwYXJ0c1syXS5pbmNsdWRlcygnLycpKSB7XG4gICAgcGFydHNbMl0gPSBwYXJ0c1syXS5zdWJzdHIocGFydHNbMl0ubGFzdEluZGV4T2YoJy8nKSsxKTtcbiAgfSovXG5cbiAgbGV0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiBwYXJ0c1swXSxcbiAgICBkb21haW46IHBhcnRzWzFdLFxuICAgIGlkZW50aXR5OiBwYXJ0c1syXVxuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIC0gb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lKG9iaikge1xuICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uXG4gIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG4vKipcbiAqIEdldCBXZWJSVEMgQVBJIHJlc291cmNlc1xuICogQHBhcmFtICB7b2JqZWN0fSAgICAgb3B0aW9ucyBPYmplY3QgY29udGFpbmluZyB0aGUgaW5mb3JtYXRpb24gdGhhdCByZXNvdXJjZXMgd2lsbCBiZSB1c2VkIChjYW1lcmEsIG1pYywgcmVzb2x1dGlvbiwgZXRjKTtcbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyTWVkaWEoY29uc3RyYWludHMpIHtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKG1lZGlhU3RyZWFtKSB7XG4gICAgICAgIHJlc29sdmUobWVkaWFTdHJlYW0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvdXRpbHMuanMiLCIvLyB2ZXJzaW9uOiAwLjUuMVxuLy8gZGF0ZTogVHVlIE1hciAwNyAyMDE3IDE2OjE4OjEzIEdNVCswMDAwIChXRVQpXG4vLyBsaWNlbmNlOiBcbi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIlN5bmNoZXJcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiU3luY2hlclwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJcIl0gPSByb290W1wiXCJdIHx8IHt9LCByb290W1wiXCJdW1wiU3luY2hlclwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNjYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDExKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc3RvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzApKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKVxuICAsIFN5bWJvbCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG4gICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oMikgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMikgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KVxuICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NilcbiAgLCBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuICAsIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKS5kb2N1bWVudFxuICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCdcbiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpXG4gICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGRlZiA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZlxuICAsIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG4gICwgVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygyKSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygxMSkoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHNoYXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApKCdrZXlzJylcbiAgLCB1aWQgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oNzkpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9KSxcbi8qIDM0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbi8qKiovIH0pLFxuLyogMzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG52YXIgJE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuICAsIGRQcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NClcbiAgLCBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG4gICwgSUVfUFJPVE8gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLmZ9KTtcblxuLyoqKi8gfSksXG4vKiAzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIExJQlJBUlkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcbiAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCByZWRlZmluZSAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpXG4gICwgaGlkZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG4gICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCAkaXRlckNyZWF0ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVxuICAsIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MylcbiAgLCBJVEVSQVRPUiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg1MyksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5leHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSkuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIHRvT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcbiAgLCBJRV9QUk9UTyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCB0b0lPYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuICAsIGFycmF5SW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuLyoqKi8gfSksXG4vKiA0NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbi8qKiovIH0pLFxuLyogNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgY29yZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgTElCUkFSWSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuICAsIHdrc0V4dCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSlcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTtcblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5leHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGF0ICA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDM5KShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuLyoqKi8gfSksXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDY5KTtcbnZhciBnbG9iYWwgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGhpZGUgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXG4gICwgSXRlcmF0b3JzICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpXG4gICwgVE9fU1RSSU5HX1RBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ3RvU3RyaW5nVGFnJyk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG5cbi8qKiovIH0pLFxuLyogNTIgKi8sXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY29yZSAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHtzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKVxuICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBwSUUgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgY3JlYXRlRGVzYyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG4gICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oMikgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqKi8gfSksXG4vKiA1OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nyk7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTtcblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07XG5cbi8qKiovIH0pLFxuLyogNjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuICAsIHRvTGVuZ3RoICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpXG4gICwgdG9JbmRleCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY3JlYXRlICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KVxuICAsIGRlc2NyaXB0b3IgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbl9fd2VicGFja19yZXF1aXJlX18oNykoSXRlcmF0b3JQcm90b3R5cGUsIF9fd2VicGFja19yZXF1aXJlX18oMykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGRQICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuICAsIGdldEtleXMgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIFA7XG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDY1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NClcbiAgLCBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpXG4gICwgZGVmaW5lZCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDY3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjdHggICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KVxuICAsIGludm9rZSAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oODgpXG4gICwgaHRtbCAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MilcbiAgLCBjZWwgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGVcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpe1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spe1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYoX193ZWJwYWNrX3JlcXVpcmVfXygyMCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDtcbiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0Jykpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxuLyoqKi8gfSksXG4vKiA2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MClcbiAgLCBzdGVwICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCB0b0lPYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSkoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8qKiovIH0pLFxuLyogNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9KSxcbi8qIDcxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSksXG4vKiA3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgTUVUQSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpXG4gICwgaGFzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIHNldERlc2MgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDExKShmdW5jdGlvbigpe1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcbiAgc2V0RGVzYyhpdCwgTUVUQSwge3ZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfX0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbihpdCl7XG4gIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogICAgICBNRVRBLFxuICBORUVEOiAgICAgZmFsc2UsXG4gIGZhc3RLZXk6ICBmYXN0S2V5LFxuICBnZXRXZWFrOiAgZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG4vKioqLyB9KSxcbi8qIDczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjbGFzc29mICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KVxuICAsIElURVJBVE9SICA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbi8qKiovIH0pLFxuLyogNzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9KSxcbi8qIDc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSksXG4vKiA3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oODMpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0pLFxuLyogNzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9KSxcbi8qIDc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTAwKTtcbnZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcblxuLyoqKi8gfSksXG4vKiA3OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG4vKioqLyB9KSxcbi8qIDgwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTAyKTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Qua2V5cztcblxuLyoqKi8gfSksXG4vKiA4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuXG4vKioqLyB9KSxcbi8qIDgyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTA0KTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5Qcm9taXNlO1xuXG4vKioqLyB9KSxcbi8qIDgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTA1KTtcbl9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLlN5bWJvbDtcblxuLyoqKi8gfSksXG4vKiA4NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcbl9fd2VicGFja19yZXF1aXJlX18oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KS5mKCdpdGVyYXRvcicpO1xuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogODYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOClcbiAgLCBnT1BTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OClcbiAgLCBwSUUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHJlc3VsdCAgICAgPSBnZXRLZXlzKGl0KVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYoZ2V0U3ltYm9scyl7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KVxuICAgICAgLCBpc0VudW0gID0gcElFLmZcbiAgICAgICwgaSAgICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDg3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG4gICwgY2FsbCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKVxuICAsIGlzQXJyYXlJdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OSlcbiAgLCBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSlcbiAgLCB0b0xlbmd0aCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpXG4gICwgZ2V0SXRlckZuICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKVxuICAsIEJSRUFLICAgICAgID0ge31cbiAgLCBSRVRVUk4gICAgICA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1Ipe1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpXG4gICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSlcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLICA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG5cbi8qKiovIH0pLFxuLyogODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCBJVEVSQVRPUiAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSgnaXRlcmF0b3InKVxuICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuLyoqKi8gfSksXG4vKiA5MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIElURVJBVE9SICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnZXRLZXlzICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KVxuICAsIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTtcblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIG1hY3JvdGFzayA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjApKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG4gICwgZ09QTiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDk2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqKi8gfSksXG4vKiA5NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpXG4gICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpKEZ1bmN0aW9uLmNhbGwsIF9fd2VicGFja19yZXF1aXJlX18oNTcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuLyoqKi8gfSksXG4vKiA5OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdsb2JhbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGNvcmUgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIFNQRUNJRVMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDk5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ICA9IF9fd2VicGFja19yZXF1aXJlX18oNSlcbiAgLCBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KVxuICAsIFNQRUNJRVMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IF9fd2VicGFja19yZXF1aXJlX18oMzcpfSk7XG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG4gICwgJGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNDUpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcbiAgLCAka2V5cyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDEwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IF9fd2VicGFja19yZXF1aXJlX18oOTcpLnNldH0pO1xuXG4vKioqLyB9KSxcbi8qIDEwNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIExJQlJBUlkgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGN0eCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG4gICwgY2xhc3NvZiAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSlcbiAgLCAkZXhwb3J0ICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSlcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KVxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpXG4gICwgdGFzayAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nykuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCkoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19fd2VicGFja19yZXF1aXJlX18oMykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKVxuICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXtcbiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ICA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG52YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4ge2Vycm9yOiBlfTtcbiAgfVxufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7XG4gIGlmKHByb21pc2UuX24pcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWxcbiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZVxuICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3RcbiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluXG4gICAgICAgICwgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoaGFuZGxlcil7XG4gICAgICAgICAgaWYoIW9rKXtcbiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpe1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNOb2RlKXtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pe1xuICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yO1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jXG4gICAgLCBpICAgICA9IDBcbiAgICAsIHJlYWN0aW9uO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmKGlzTm9kZSl7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpe1xuICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXNcbiAgICAsIHRoZW47XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd3JhcHBlciA9IHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighVVNFX05BVElWRSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIHJlYWN0aW9uICAgID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX3Mpbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHByb21pc2UgID0gbmV3IEludGVybmFsO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCAgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJFByb21pc2UsIFBST01JU0UpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg5OCkoUFJPTUlTRSk7XG5XcmFwcGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxMDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG4gICwgREVTQ1JJUFRPUlMgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgcmVkZWZpbmUgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KVxuICAsIE1FVEEgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MikuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuICAsIHNoYXJlZCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpXG4gICwgdWlkICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKVxuICAsIHdrcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVxuICAsIHdrc0V4dCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSlcbiAgLCB3a3NEZWZpbmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpXG4gICwga2V5T2YgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKVxuICAsIGVudW1LZXlzICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NilcbiAgLCBpc0FycmF5ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTApXG4gICwgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpXG4gICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuICAsIHRvUHJpbWl0aXZlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSlcbiAgLCBjcmVhdGVEZXNjICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG4gICwgX2NyZWF0ZSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KVxuICAsIGdPUE5FeHQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NSlcbiAgLCAkR09QRCAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpXG4gICwgJERQICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgJGtleXMgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KVxuICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZlxuICAsIGRQICAgICAgICAgICAgID0gJERQLmZcbiAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZlxuICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbFxuICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cbiAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeVxuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG4gICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJylcbiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJylcbiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdXG4gICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nXG4gICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvKSRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIGl0ICA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG9cbiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYoIVVTRV9OQVRJVkUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKXNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0fSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgX193ZWJwYWNrX3JlcXVpcmVfXyg1OCkuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIV9fd2VicGFja19yZXF1aXJlX18oMjYpKXtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfVxufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cbmZvcih2YXIgc3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzKHN5bWJvbHNbaSsrXSk7XG5cbmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbigpe1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgdmFyIGFyZ3MgPSBbaXRdXG4gICAgICAsIGkgICAgPSAxXG4gICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG4vKioqLyB9KSxcbi8qIDEwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KSgnYXN5bmNJdGVyYXRvcicpO1xuXG4vKioqLyB9KSxcbi8qIDEwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KSgnb2JzZXJ2YWJsZScpO1xuXG4vKioqLyB9KSxcbi8qIDEwOCAqLyxcbi8qIDEwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N0cmluZ2lmeSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXG52YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpO1xuXG52YXIgX2tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcblxudmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpO1xuXG5leHBvcnRzLmRpdmlkZVVSTCA9IGRpdmlkZVVSTDtcbmV4cG9ydHMuZGl2aWRlRW1haWwgPSBkaXZpZGVFbWFpbDtcbmV4cG9ydHMuZW1wdHlPYmplY3QgPSBlbXB0eU9iamVjdDtcbmV4cG9ydHMuZGVlcENsb25lID0gZGVlcENsb25lO1xuZXhwb3J0cy5nZXRVc2VyVVJMRnJvbUVtYWlsID0gZ2V0VXNlclVSTEZyb21FbWFpbDtcbmV4cG9ydHMuZ2V0VXNlckVtYWlsRnJvbVVSTCA9IGdldFVzZXJFbWFpbEZyb21VUkw7XG5leHBvcnRzLmNvbnZlcnRUb1VzZXJVUkwgPSBjb252ZXJ0VG9Vc2VyVVJMO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG4vKipcbiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWxcbiAqIEBtb2R1bGUgdXRpbHNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIGRpdmlkZVVSTFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMXG4gKi9cblxuLyoqXG4gKiBEaXZpZGUgYW4gdXJsIGluIHR5cGUsIGRvbWFpbiBhbmQgaWRlbnRpdHlcbiAqIEBwYXJhbSAge1VSTC5VUkx9IHVybCAtIHVybCBhZGRyZXNzXG4gKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMXG4gKi9cbmZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHtcblxuICBpZiAoIXVybCkgdGhyb3cgRXJyb3IoJ1VSTCBpcyBuZWVkZWQgdG8gc3BsaXQnKTtcblxuICBmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7XG4gICAgdmFyIHJlZ2V4ID0gLyhbYS16QS1aLV0qKSg6XFwvXFwvKD86XFwuKT98OikoWy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXFwrfiM9XFwvXSopL2dpO1xuICAgIHZhciBzdWJzdCA9ICckMSwkMywkNCc7XG4gICAgdmFyIHBhcnRzID0gdmFsdWUucmVwbGFjZShyZWdleCwgc3Vic3QpLnNwbGl0KCcsJyk7XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gcmVjdXJzZSh1cmwpO1xuXG4gIC8vIElmIHRoZSB1cmwgaGFzIG5vIHNjaGVtZVxuICBpZiAocGFydHNbMF0gPT09IHVybCAmJiAhcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkge1xuXG4gICAgdmFyIF9yZXN1bHQgPSB7XG4gICAgICB0eXBlOiBcIlwiLFxuICAgICAgZG9tYWluOiB1cmwsXG4gICAgICBpZGVudGl0eTogXCJcIlxuICAgIH07XG5cbiAgICBjb25zb2xlLmVycm9yKCdbRGl2aWRlVVJMXSBEaXZpZGVVUkwgZG9uXFwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTtcblxuICAgIHJldHVybiBfcmVzdWx0O1xuICB9XG5cbiAgLy8gY2hlY2sgaWYgdGhlIHVybCBoYXMgdGhlIHNjaGVtZSBhbmQgaW5jbHVkZXMgYW4gQFxuICBpZiAocGFydHNbMF0gPT09IHVybCAmJiBwYXJ0c1swXS5pbmNsdWRlcygnQCcpKSB7XG4gICAgdmFyIHNjaGVtZSA9IHBhcnRzWzBdID09PSB1cmwgPyAnc210cCcgOiBwYXJ0c1swXTtcbiAgICBwYXJ0cyA9IHJlY3Vyc2Uoc2NoZW1lICsgJzovLycgKyBwYXJ0c1swXSk7XG4gIH1cblxuICAvLyBpZiB0aGUgZG9tYWluIGluY2x1ZGVzIGFuIEAsIGRpdmlkZSBpdCB0byBkb21haW4gYW5kIGlkZW50aXR5IHJlc3BlY3RpdmVseVxuICBpZiAocGFydHNbMV0uaW5jbHVkZXMoJ0AnKSkge1xuICAgIHBhcnRzWzJdID0gcGFydHNbMF0gKyAnOi8vJyArIHBhcnRzWzFdO1xuICAgIHBhcnRzWzFdID0gcGFydHNbMV0uc3Vic3RyKHBhcnRzWzFdLmluZGV4T2YoJ0AnKSArIDEpO1xuICB9IC8qZWxzZSBpZiAocGFydHNbMl0uaW5jbHVkZXMoJy8nKSkge1xuICAgIHBhcnRzWzJdID0gcGFydHNbMl0uc3Vic3RyKHBhcnRzWzJdLmxhc3RJbmRleE9mKCcvJykrMSk7XG4gICAgfSovXG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB0eXBlOiBwYXJ0c1swXSxcbiAgICBkb21haW46IHBhcnRzWzFdLFxuICAgIGlkZW50aXR5OiBwYXJ0c1syXVxuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGRpdmlkZUVtYWlsKGVtYWlsKSB7XG4gIHZhciBpbmRleE9mQXQgPSBlbWFpbC5pbmRleE9mKCdAJyk7XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB1c2VybmFtZTogZW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCksXG4gICAgZG9tYWluOiBlbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgZW1haWwubGVuZ3RoKVxuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5XG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgc3RhdHVzIG9mIE9iamVjdCwgZW1wdHkgb3Igbm90ICh0cnVlfGZhbHNlKTtcbiAqL1xuZnVuY3Rpb24gZW1wdHlPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKG9iamVjdCkubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZTtcbn1cblxuLyoqXG4gKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIC0gb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7XG4gIC8vVE9ETzogc2ltcGxlIGJ1dCBpbmVmZmljaWVudCBKU09OIGRlZXAgY2xvbmUuLi5cbiAgaWYgKG9iaikgcmV0dXJuIEpTT04ucGFyc2UoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG9iaikpO1xufVxuXG4vKipcbiAqIE9idGFpbnMgdGhlIHVzZXIgVVJMIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBlbWFpbFxuICogQHBhcmFtICB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWxcbiAqIEByZXR1cm4ge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXG4gKi9cbmZ1bmN0aW9uIGdldFVzZXJVUkxGcm9tRW1haWwodXNlckVtYWlsKSB7XG4gIHZhciBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpO1xuICByZXR1cm4gJ3VzZXI6Ly8nICsgdXNlckVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCB1c2VyRW1haWwubGVuZ3RoKSArICcvJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KTtcbn1cblxuLyoqXG4gKiBPYnRhaW5zIHRoZSB1c2VyIGVtYWlsIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBVUkxcbiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbFxuICovXG5mdW5jdGlvbiBnZXRVc2VyRW1haWxGcm9tVVJMKHVzZXJVUkwpIHtcbiAgdmFyIHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTtcbiAgcmV0dXJuIHVybC5pZGVudGl0eS5yZXBsYWNlKCcvJywgJycpICsgJ0AnICsgdXJsLmRvbWFpbjsgLy8gaWRlbnRpdHkgZmllbGQgaGFzICcvZXhhbXBsZUlEJyBpbnN0ZWFkIG9mICdleGFtcGxlSUQnXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHVzZXIgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSBVUkwgZm9ybWF0LCBpZiBub3QsIGNvbnZlcnQgdG8gVVJMIGZvcm1hdFxuICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSAgIHVzZXJVUkwgICAgdGhlIHVzZXIgVVJMXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb1VzZXJVUkwoaWRlbnRpZmllcikge1xuXG4gIC8vIGNoZWNrIGlmIHRoZSBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIHVybCBmb3JtYXRcbiAgaWYgKGlkZW50aWZpZXIuc3Vic3RyaW5nKDAsIDcpID09PSAndXNlcjovLycpIHtcbiAgICB2YXIgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZGVudGlmaWVyKTtcblxuICAgIC8vY2hlY2sgaWYgdGhlIHVybCBpcyB3ZWxsIGZvcm1hdGVkXG4gICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHtcbiAgICAgIHJldHVybiBpZGVudGlmaWVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7XG4gICAgfVxuXG4gICAgLy9pZiBub3QsIGNvbnZlcnQgdGhlIHVzZXIgZW1haWwgdG8gVVJMIGZvcm1hdFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRVc2VyVVJMRnJvbUVtYWlsKGlkZW50aWZpZXIpO1xuICB9XG59XG5cbi8qKiovIH0pLFxuLyogMTEwICovLFxuLyogMTExICovLFxuLyogMTEyICovLFxuLyogMTEzICovLFxuLyogMTE0ICovLFxuLyogMTE1ICovLFxuLyogMTE2ICovLFxuLyogMTE3ICovLFxuLyogMTE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vICAgICBwcm94eS1vYnNlcnZlIHYwLjAuMThcclxuLy8gICAgIENvcHlyaWdodCAoYykgMjAxNSwgMjAxNiBTaW1vbiBZLiBCbGFja3dlbGwsIEFueVdoaWNoV2F5XHJcbi8vICAgICBNSVQgTGljZW5zZSAtIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuKGZ1bmN0aW9uKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBQcm94eSB3cmFwcGluZyBhIHRhcmdldCBzbyB0aGF0IGFsbCBjaGFuZ2VzIGNhbiBiZSB0cmFwcGVkIGFuZCBmb3J3YXJkZWQgdG9cclxuXHQvLyBhIGNhbGxiYWNrLiBUaGUgY2FsbGJhY2sgdGFrZXMgYW4gYXJyYXkgb2YgY2hhbmdlcyBqdXN0IGxpa2UgdGhlIHRyYWRpdGlvbmFsIG9yaWdpbmFsIENocm9tZSBPYmplY3Qub2JzZXJ2ZVxyXG5cdC8vIHtvYmplY3Q6PG9iamVjdCBjaGFuZ2VkPixuYW1lOjxmaWVsZCBjaGFuZ2VkPix0eXBlOmFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZSxvbGRWYWx1ZTo8b2xkIHZhbHVlIGlmIHVwZGF0ZSB8IGRlbGV0ZT59XHJcblx0Ly8gVGhlIGFjY2VwdGxpc3QgY2FuIGJlIGFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZS5cclxuXHQvLyB2IDAuMC4xMCB0byBzdXBwb3J0IHBhdXNpbmcgYW5kIHJlc3RhcnRpbmcgb2JzZXJ2YXRpb24gdHdvIGFkZGl0aW9uYWwgY29uc3RydWN0b3IgYXJndW1lbnRzIGFyZSBhdmFpbGFibGUgdG8gT2JqZWN0Lm9ic2VydmU6XHJcblx0Ly8gcGF1c2FibGUgLSBjcmVhdGUgdGhlIE9ic2VydmVyIHNvIGl0IGNhbiBiZSBwYXVzZWRcclxuXHQvLyBwYXVzZSAtIGNyZWF0ZSBvYnNlcnZlciBpbiBwYXVzZWQgc3RhdGVcclxuXHQvLyBpZiBwYXVzYWJsZSBpcyB0cnVlIHRoZW4gYW4gYWRkaXRpb25hbCBtZXRob2QgZGVsaXZlcihpZ25vcmVQcmV2aW91cykgaXMgYXZhaWxhYmxlIHRvIHN0YXJ0IGRlbGl2ZXJ5XHJcblx0Ly8gdG8gcGF1c2UgZGVsaXZlcnkgc2V0IGEgcHJvcGVydHkgY2FsbGVkIHBhdXNlIG9uIHRoZSBmdW5jdGlvbiBkZWxpdmVyIHRvIHRydWVcclxuXHQvLyBwYXVzYWJsZSBpcyBvcHRpb25hbCB0byByZWR1Y2UgdGhlIGNoYW5jZSBvZiBzaGFkb3dpbmcgYSBwcm9wZXJ0eSBvciBtZXRob2Qgb24gYW55IGV4aXN0aW5nIGNvZGUgY2FsbGVkIGRlbGl2ZXJcclxuXHRpZighT2JqZWN0Lm9ic2VydmUgJiYgdHlwZW9mKFByb3h5KT09PVwiZnVuY3Rpb25cIikge1xyXG5cdFx0ZnVuY3Rpb24gT2JzZXJ2ZXIodGFyZ2V0LGNhbGxiYWNrLGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpIHtcclxuXHQgICAgXHR2YXIgbWUgPSB0aGlzLCBwcm94eTtcclxuXHQgICAgXHRmdW5jdGlvbiBkZWxpdmVyKGlnbm9yZVByZXZpb3VzLGRlbGF5KSB7XHJcblx0ICAgIFx0XHRkZWxpdmVyLmRlbGF5ID0gZGVsYXk7XHJcblx0ICAgIFx0XHRpZighZGVsaXZlci5wYXVzZSkge1xyXG5cdCAgICAgICAgXHRcdGlmKG1lLmNoYW5nZXNldC5sZW5ndGg+MCkge1xyXG5cdCAgICAgICAgXHRcdFx0aWYoIWlnbm9yZVByZXZpb3VzKSB7XHJcblx0XHQgICAgXHQgICAgXHRcdHZhciBjaGFuZ2VzID0gbWUuY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihjaGFuZ2UpIHsgcmV0dXJuICFhY2NlcHRsaXN0IHx8IGFjY2VwdGxpc3QuaW5kZXhPZihjaGFuZ2UudHlwZSk+PTA7IH0pO1xyXG5cdFx0ICAgICAgICBcdFx0XHRpZihjaGFuZ2VzLmxlbmd0aD4wKSB7XHJcblx0XHQgICAgICAgIFx0XHRcdFx0Y2FsbGJhY2soY2hhbmdlcyk7XHJcblx0XHQgICAgICAgIFx0XHRcdH1cclxuXHQgICAgICAgIFx0XHRcdH1cclxuXHQgICAgICAgIFx0XHRcdG1lLmNoYW5nZXNldCA9IFtdO1xyXG5cdCAgICAgICAgXHRcdH1cclxuXHQgICAgXHRcdH1cclxuXHQgICAgXHR9XHJcblx0ICAgIFx0ZGVsaXZlci5wYXVzZSA9IHBhdXNlO1xyXG5cdCAgICBcdGRlbGl2ZXIuZGVsYXkgPSBkZWxheTtcclxuXHRcdCAgICBtZS5nZXQgPSBmdW5jdGlvbih0YXJnZXQsIHByb3BlcnR5KSB7XHJcblx0XHQgICAgXHRpZihwcm9wZXJ0eT09PVwiX19vYnNlcnZlcl9fXCIpIHtcclxuXHRcdCAgICBcdFx0cmV0dXJuIG1lO1xyXG5cdFx0ICAgIFx0fVxyXG5cdFx0ICAgIFx0aWYocHJvcGVydHk9PT1cInVub2JzZXJ2ZVwiKSB7XHJcblx0XHQgICAgXHRcdHJldHVybiBmdW5jdGlvbigpIHtcclxuXHRcdCAgICBcdFx0XHRPYmplY3QudW5vYnNlcnZlKHRhcmdldCk7XHJcblx0XHQgICAgXHRcdFx0cmV0dXJuIHRhcmdldDtcclxuXHRcdCAgICBcdFx0fTtcclxuXHRcdCAgICBcdH1cclxuXHRcdCAgICBcdGlmKHByb3BlcnR5PT09XCJkZWxpdmVyXCIpIHtcclxuXHRcdCAgICBcdFx0cmV0dXJuIGRlbGl2ZXI7XHJcblx0XHQgICAgXHR9XHJcblx0XHQgICAgXHRyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTtcclxuXHRcdCAgICB9XHJcblx0ICAgIFx0bWUudGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdCAgICBcdG1lLmNoYW5nZXNldCA9IFtdO1xyXG5cdCAgICBcdGlmKCFtZS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19fKSB7XHJcblx0ICAgIFx0XHQvLyBfX29ic2VydmVyQ2FsbGJhY2tzX18gaXMgdXNlZCBhcyBhbiBpbmRleCB0byBnZXQgYXQgdGhlIHByb3h5IHdoaWNoIGlzIHRoZSBvYnNlcnZlciwgc28gd2UgY2FuIHVub2JzZXJ2ZVxyXG5cdCAgICBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxcIl9fb2JzZXJ2ZXJDYWxsYmFja3NfX1wiLHtlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOmZhbHNlLHZhbHVlOltdfSk7XHJcblx0ICAgIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LFwiX19vYnNlcnZlcnNfX1wiLHtlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOmZhbHNlLHZhbHVlOltdfSk7XHJcblx0ICAgIFx0fVxyXG5cdCAgICBcdG1lLnRhcmdldC5fX29ic2VydmVyQ2FsbGJhY2tzX18ucHVzaChjYWxsYmFjayk7XHJcblx0ICAgIFx0bWUudGFyZ2V0Ll9fb2JzZXJ2ZXJzX18ucHVzaCh0aGlzKTtcclxuXHQgICAgXHRwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsbWUpO1xyXG5cdCAgICBcdGRlbGl2ZXIoZmFsc2UsZGVsYXkpO1xyXG5cdCAgICBcdHJldHVybiBwcm94eTtcclxuXHQgICAgfVxyXG5cdFx0T2JzZXJ2ZXIucHJvdG90eXBlLmRlbGl2ZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KG51bGwsXCJkZWxpdmVyXCIpO1xyXG5cdFx0fVxyXG5cdCAgICBPYnNlcnZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHsgLy8gLCByZWNlaXZlclxyXG5cdCAgICBcdHZhciBvbGR2YWx1ZSA9IHRhcmdldFtwcm9wZXJ0eV07XHJcblx0ICAgIFx0dmFyIHR5cGUgPSAob2xkdmFsdWU9PT11bmRlZmluZWQgPyBcImFkZFwiIDogXCJ1cGRhdGVcIik7XHJcblx0ICAgIFx0dGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xyXG5cdCAgICBcdGlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgKCF0aGlzLmFjY2VwdGxpc3QgfHwgdGhpcy5hY2NlcHRsaXN0LmluZGV4T2YodHlwZSk+PTApKSB7XHJcblx0ICAgICAgICBcdHZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOnByb3BlcnR5LHR5cGU6dHlwZX0sXHJcblx0ICAgICAgICBcdFx0c3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsXHJcblx0ICAgICAgICBcdFx0ZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpO1xyXG5cdCAgICAgICAgXHRpZih0eXBlPT09XCJ1cGRhdGVcIikge1xyXG5cdCAgICAgICAgXHRcdGNoYW5nZS5vbGRWYWx1ZSA9IG9sZHZhbHVlO1xyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgICAgICBcdHRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTtcclxuXHQgICAgICAgIFx0aWYoc3RhcnQpIHtcclxuXHQgICAgICAgIFx0XHRkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT1cIm51bWJlclwiID8gZGVsaXZlci5kZWxheSA6IDEwKSk7XHJcblx0ICAgICAgICBcdH1cclxuXHQgICAgXHR9XHJcblx0ICAgIFx0cmV0dXJuIHRydWU7XHJcblx0ICAgIH07XHJcblx0ICAgIE9ic2VydmVyLnByb3RvdHlwZS5kZWxldGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHkpIHtcclxuXHQgICAgXHR2YXIgb2xkdmFsdWUgPSB0YXJnZXRbcHJvcGVydHldO1xyXG5cdCAgICBcdC8vaWYodHlwZW9mKG9sZHZhbHVlKSE9PVwidW5kZWZpbmVkXCIpIHtcclxuXHRcdCAgICBcdGRlbGV0ZSB0YXJnZXRbcHJvcGVydHldO1xyXG5cdFx0ICAgIFx0aWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKFwiZGVsZXRlXCIpPj0wKSB7XHJcblx0XHQgICAgICAgIFx0dmFyIGNoYW5nZSA9IHtvYmplY3Q6dGFyZ2V0LG5hbWU6cHJvcGVydHksdHlwZTpcImRlbGV0ZVwiLG9sZFZhbHVlOm9sZHZhbHVlfSxcclxuXHRcdCAgICAgICAgXHRcdHN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG5cdFx0ICAgICAgICBcdFx0ZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpO1xyXG5cdFx0ICAgICAgICBcdHRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTtcclxuXHRcdCAgICAgICAgXHRpZihzdGFydCkge1xyXG5cdFx0ICAgICAgICBcdFx0ZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09XCJudW1iZXJcIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpO1xyXG5cdFx0ICAgICAgICBcdH1cclxuXHRcdCAgICBcdH1cclxuXHQgICAgXHQvL31cclxuXHQgICAgXHRyZXR1cm4gdHJ1ZTtcclxuXHQgICAgfTtcclxuXHQgICAgT2JzZXJ2ZXIucHJvdG90eXBlLmRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xyXG5cdCAgICBcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcclxuXHQgICAgXHRpZih0YXJnZXQuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wICYmICF0aGlzLmFjY2VwdGxpc3QgfHwgdGhpcy5hY2NlcHRsaXN0LmluZGV4T2YoXCJyZWNvbmZpZ3VyZVwiKT49MCkge1xyXG5cdCAgICAgICAgXHR2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZTpwcm9wZXJ0eSx0eXBlOlwicmVjb25maWd1cmVcIn0sXHJcbiAgICAgICAgXHRcdFx0c3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsXHJcbiAgICAgICAgXHRcdFx0ZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpO1xyXG5cdCAgICAgICAgXHR0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7XHJcblx0ICAgICAgICBcdGlmKHN0YXJ0KSB7XHJcblx0ICAgICAgICBcdFx0ZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09XCJudW1iZXJcIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpO1xyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgIFx0fVxyXG5cdCAgICBcdHJldHVybiB0cnVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBPYnNlcnZlci5wcm90b3R5cGUuc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbih0YXJnZXQsIHByb3RvdHlwZSkge1xyXG5cdCAgICBcdHZhciBvbGR2YWx1ZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xyXG5cdCAgICBcdE9iamVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvdHlwZSk7XHJcblx0ICAgIFx0aWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKFwic2V0UHJvdG90eXBlXCIpPj0wKSB7XHJcblx0ICAgICAgICBcdHZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOlwiX19wcm90b19fXCIsdHlwZTpcInNldFByb3RvdHlwZVwiLG9sZFZhbHVlOm9sZHZhbHVlfSxcclxuICAgIFx0XHRcdFx0c3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsXHJcbiAgICBcdFx0XHRcdGRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTtcclxuXHQgICAgICAgIFx0dGhpcy5jaGFuZ2VzZXQucHVzaChjaGFuZ2UpO1xyXG5cdCAgICAgICAgXHRpZihzdGFydCkge1xyXG5cdCAgICAgICAgXHRcdGRlbGl2ZXIoZmFsc2UsKHR5cGVvZihkZWxpdmVyLmRlbGF5KT09PVwibnVtYmVyXCIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTtcclxuXHQgICAgICAgIFx0fVxyXG5cdCAgICBcdH1cclxuXHQgICAgXHRyZXR1cm4gdHJ1ZTtcclxuXHQgICAgfTtcclxuXHQgICAgT2JzZXJ2ZXIucHJvdG90eXBlLnByZXZlbnRFeHRlbnNpb25zID0gZnVuY3Rpb24odGFyZ2V0KSB7XHJcblx0ICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcclxuXHQgICAgXHRpZih0YXJnZXQuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wICYmICF0aGlzLmFjY2VwdGxpc3QgfHwgdGhpcy5hY2NlcHRsaXN0LmluZGV4T2YoXCJwcmV2ZW50RXh0ZW5zaW9uc1wiKT49MCkge1xyXG5cdCAgICAgICAgXHR2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsdHlwZTpcInByZXZlbnRFeHRlbnNpb25zXCJ9LFxyXG5cdFx0XHRcdFx0c3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsXHJcblx0XHRcdFx0XHRkZWxpdmVyID0gdGhpcy5kZWxpdmVyKCk7XHJcblx0ICAgICAgICBcdHRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTtcclxuXHQgICAgICAgIFx0aWYoc3RhcnQpIHtcclxuXHQgICAgICAgIFx0XHRkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT1cIm51bWJlclwiID8gZGVsaXZlci5kZWxheSA6IDEwKSk7XHJcblx0ICAgICAgICBcdH1cclxuXHQgICAgXHR9XHJcblx0ICAgIFx0cmV0dXJuIHRydWU7XHJcblx0ICAgIH07XHJcblx0ICAgIE9iamVjdC5vYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrLGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpIHtcclxuXHQgICAgXHRyZXR1cm4gbmV3IE9ic2VydmVyKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KTtcclxuXHQgICAgfTtcclxuXHQgICAgT2JqZWN0LnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjaykge1xyXG5cdCAgICBcdGlmKG9iamVjdC5fX29ic2VydmVyQ2FsbGJhY2tzX18pIHtcclxuXHQgICAgXHRcdGlmKCFjYWxsYmFjaykge1xyXG5cdCAgICBcdFx0XHRvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZSgwLG9iamVjdC5fX29ic2VydmVyQ2FsbGJhY2tzX18ubGVuZ3RoKTtcclxuXHQgICAgXHRcdFx0b2JqZWN0Ll9fb2JzZXJ2ZXJzX18uc3BsaWNlKDAsb2JqZWN0Ll9fb2JzZXJ2ZXJzX18ubGVuZ3RoKTtcclxuXHQgICAgXHRcdFx0cmV0dXJuO1xyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0b2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5mb3JFYWNoKGZ1bmN0aW9uKG9ic2VydmVyY2FsbGJhY2ssaSkge1xyXG5cdCAgICBcdFx0XHRpZihjYWxsYmFjaz09PW9ic2VydmVyY2FsbGJhY2spIHtcclxuXHQgICAgXHRcdFx0XHRvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZShpLDEpO1xyXG5cdCAgICBcdFx0XHRcdGRlbGV0ZSBvYmplY3QuX19vYnNlcnZlcnNfX1tpXS5jYWxsYmFjaztcclxuXHQgICAgXHRcdFx0XHRvYmplY3QuX19vYnNlcnZlcnNfXy5zcGxpY2UoaSwxKTtcclxuXHQgICAgXHRcdFx0fVxyXG5cdCAgICBcdFx0fSk7XHJcblx0ICAgIFx0fVxyXG5cdCAgICB9O1xyXG5cdCAgICBBcnJheS5vYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrLGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpIHtcclxuXHQgICAgXHRpZighKG9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSAmJiAhQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XHJcblx0ICAgIFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgdG8gQXJyYXkub2JzZXJ2ZXIgaXMgbm90IGFuIEFycmF5XCIpO1xyXG5cdCAgICBcdH1cclxuICAgICAgICAgICAgXHRhY2NlcHRsaXN0ID0gYWNjZXB0bGlzdCB8fCBbXCJhZGRcIiwgXCJ1cGRhdGVcIiwgXCJkZWxldGVcIiwgXCJzcGxpY2VcIl07XHJcblx0ICAgIFx0dmFyIGFycmF5cHJveHkgPSBuZXcgUHJveHkob2JqZWN0LHtnZXQ6IGZ1bmN0aW9uKHRhcmdldCxwcm9wZXJ0eSkge1xyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInVub2JzZXJ2ZVwiKSB7XHJcblx0XHQgICAgXHRcdHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG5cdFx0ICAgIFx0XHRcdGlmKGNhbGxiYWNrKSB7XHJcblx0XHQgICAgXHRcdFx0XHRyZXR1cm4gT2JqZWN0LnVub2JzZXJ2ZSh0YXJnZXQsY2FsbGJhY2spO1xyXG5cdFx0ICAgIFx0XHRcdH1cclxuXHRcdCAgICBcdFx0XHRyZXR1cm4gdGFyZ2V0LnVub2JzZXJ2ZSgpO1xyXG5cdFx0ICAgIFx0XHR9O1xyXG5cdFx0ICAgIFx0fVxyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInNwbGljZVwiKSB7XHJcblx0ICAgIFx0XHRcdHJldHVybiBmdW5jdGlvbihzdGFydCxlbmQpIHtcclxuXHQgICAgXHRcdFx0XHRpZih0eXBlb2Yoc3RhcnQpIT09XCJudW1iZXJcIiB8fCB0eXBlb2YoZW5kKSE9PVwibnVtYmVyXCIpIHtcclxuXHQgICAgXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCB0d28gYXJndW1lbnRzIHRvIEFycmF5IHNwbGljZSBhcmUgbm90IG51bWJlciwgbnVtYmVyXCIpO1xyXG5cdCAgICBcdFx0XHRcdH1cclxuXHQgICAgXHQgICAgXHRcdHZhciByZW1vdmVkID0gdGhpcy5zbGljZShzdGFydCxzdGFydCtlbmQpLFxyXG5cdCAgICBcdCAgICBcdFx0XHRhZGRlZENvdW50ID0gKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzLmxlbmd0aC0yIDogMCksXHJcblx0ICAgIFx0ICAgIFx0XHRcdGNoYW5nZSA9ICB7b2JqZWN0Om9iamVjdCx0eXBlOlwic3BsaWNlXCIsaW5kZXg6c3RhcnQscmVtb3ZlZDpyZW1vdmVkLGFkZGVkQ291bnQ6YWRkZWRDb3VudH07XHJcblx0ICAgIFx0ICAgIFx0XHR0YXJnZXQuc3BsaWNlLmFwcGx5KHRhcmdldCxhcmd1bWVudHMpO1xyXG5cdCAgICBcdCAgICBcdFx0aWYoYWNjZXB0bGlzdC5pbmRleE9mKFwic3BsaWNlXCIpPj0wKSB7XHJcblx0ICAgIFx0ICAgIFx0XHRcdHZhciBzdGFydCA9IHByb3h5Ll9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG5cdCAgICBcdCAgICAgICAgXHRcdFx0ZGVsaXZlciA9IHByb3h5Ll9fb2JzZXJ2ZXJfXy5kZWxpdmVyKCk7XHJcblx0ICAgIFx0ICAgIFx0XHRcdHByb3h5Ll9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQucHVzaChjaGFuZ2UpO1xyXG5cdCAgICBcdCAgICBcdFx0XHRpZihzdGFydCkge1xyXG5cdCAgICBcdFx0ICAgICAgICBcdFx0ZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09XCJudW1iZXJcIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpO1xyXG5cdCAgICBcdFx0ICAgICAgICBcdH1cclxuXHQgICAgXHQgICAgXHRcdH1cclxuXHQgICAgXHQgICAgXHR9XHJcblx0ICAgIFx0XHR9XHJcblx0ICAgIFx0XHRpZihwcm9wZXJ0eT09PVwicHVzaFwiKSB7XHJcblx0ICAgIFx0XHRcdCByZXR1cm4gZnVuY3Rpb24oaXRlbSkge1xyXG5cdCAgICBcdFx0ICAgIFx0cmV0dXJuIHRoaXMuc3BsaWNlKHRoaXMubGVuZ3RoLDAsaXRlbSk7XHJcblx0ICAgIFx0XHQgICAgfVxyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInBvcFwiKSB7XHJcblx0ICAgIFx0XHRcdCByZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0ICAgIFx0XHQgICAgXHRyZXR1cm4gdGhpcy5zcGxpY2UodGhpcy5sZW5ndGgtMSwxKTtcclxuXHQgICAgXHRcdCAgICB9XHJcblx0ICAgIFx0XHR9XHJcblx0ICAgIFx0XHRpZihwcm9wZXJ0eT09PVwidW5zaGlmdFwiKSB7XHJcblx0ICAgIFx0XHRcdCByZXR1cm4gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgXHRcdCAgICBcdFx0cmV0dXJuIHRoaXMuc3BsaWNlKDAsMCxpdGVtKTtcclxuICAgIFx0XHQgICAgXHR9XHJcblx0ICAgIFx0XHR9XHJcblx0ICAgIFx0XHRpZihwcm9wZXJ0eT09PVwic2hpZnRcIikge1xyXG5cdCAgICBcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0ICAgIFx0ICAgIFx0XHRyZXR1cm4gdGhpcy5zcGxpY2UoMCwxKTtcclxuXHQgICAgXHQgICAgXHR9XHJcblx0ICAgIFx0XHR9XHJcblx0ICAgIFx0XHRyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTtcclxuXHQgICAgXHR9fSk7XHJcblx0ICAgIFx0dmFyIHByb3h5ID0gT2JqZWN0Lm9ic2VydmUoYXJyYXlwcm94eSxmdW5jdGlvbihjaGFuZ2VzZXQpIHsgXHJcblx0ICAgIFx0XHR2YXIgY2hhbmdlcyA9IGNoYW5nZXNldC5maWx0ZXIoZnVuY3Rpb24oY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UubmFtZSE9PVwibGVuZ3RoXCIgJiYgY2hhbmdlLm5hbWUhPT1cImFkZFwiICYmICghYWNjZXB0bGlzdCB8fCBhY2NlcHRsaXN0LmluZGV4T2YoY2hhbmdlLnR5cGUpPj0wKTsgfSk7XHJcblx0ICAgIFx0XHRpZihjaGFuZ2VzLmxlbmd0aD4wKSB7XHJcblx0ICAgIFx0XHRcdGNhbGxiYWNrKGNoYW5nZXMpO1xyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdH0sYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSk7XHJcblx0ICAgIFx0cmV0dXJuIHByb3h5O1xyXG5cdCAgICB9O1xyXG5cdCAgICBBcnJheS51bm9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2spIHtcclxuXHRcdCAgcmV0dXJuIG9iamVjdC51bm9ic2VydmUoY2FsbGJhY2spO1xyXG5cdCAgICB9XHJcblx0fVxyXG5cdE9iamVjdC5kZWVwT2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayxwYXJ0cykge1xyXG5cclxuXHRcdHBhcnRzID0gKHBhcnRzID8gcGFydHMgOiBbXSk7XHJcblxyXG5cdFx0dmFyIHRvVHlwZU5hbWUgPSBmdW5jdGlvbihvYmopIHtcclxuXHRcdFx0cmV0dXJuICh7fSkudG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKClcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZW9ic2VydmUodmFsdWUsIHBhcnRzKSB7XHJcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xyXG5cdFx0XHRrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XHJcblx0XHRcdFx0aWYoKHRvVHlwZU5hbWUodmFsdWVba2V5XSkgPT09ICdvYmplY3QnIHx8IHRvVHlwZU5hbWUodmFsdWVba2V5XSkgPT09ICdhcnJheScpICYmICF2YWx1ZVtrZXldLmhhc093blByb3BlcnR5KCdfX29ic2VydmVyc19fJykpIHtcclxuXHRcdFx0XHRcdHZhciBuZXdwYXJ0cyA9IHBhcnRzLnNsaWNlKDApO1xyXG5cdFx0XHRcdFx0bmV3cGFydHMucHVzaChrZXkpO1xyXG5cdFx0XHRcdFx0dmFsdWVba2V5XSA9IE9iamVjdC5kZWVwT2JzZXJ2ZSh2YWx1ZVtrZXldLGNhbGxiYWNrLG5ld3BhcnRzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJlb2JzZXJ2ZShvYmplY3QsIHBhcnRzKTtcclxuXHJcblx0XHR2YXIgb2JzZXJ2ZWQgPSBPYmplY3Qub2JzZXJ2ZShvYmplY3QsZnVuY3Rpb24oY2hhbmdlc2V0KSB7XHJcblx0XHRcdHZhciBjaGFuZ2VzID0gW107XHJcblx0XHRcdGZ1bmN0aW9uIHJlY3Vyc2UobmFtZSxyb290T2JqZWN0LG9sZE9iamVjdCxuZXdPYmplY3QscGF0aCkge1xyXG5cdFx0XHRcdGlmKG5ld09iamVjdCBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG5cdFx0XHRcdFx0dmFyIG5ld2tleXMgPSBPYmplY3Qua2V5cyhuZXdPYmplY3QpO1xyXG5cdFx0XHRcdFx0bmV3a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRcdFx0XHRpZighb2xkT2JqZWN0IHx8IChvbGRPYmplY3Rba2V5XSE9PW5ld09iamVjdFtrZXldKSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBvbGR2YWx1ZSA9IChvbGRPYmplY3QgJiYgb2xkT2JqZWN0W2tleV0hPT11bmRlZmluZWQgPyBvbGRPYmplY3Rba2V5XSA6IHVuZGVmaW5lZCksXHJcblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2UgPSAob2xkdmFsdWU9PT11bmRlZmluZWQgPyBcImFkZFwiIDogXCJ1cGRhdGVcIiksXHJcblx0XHRcdFx0XHRcdFx0XHRrZXlwYXRoID0gcGF0aCArIFwiLlwiICsga2V5O1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjaGFuZ2VzLnB1c2goe25hbWU6bmFtZSxvYmplY3Q6cm9vdE9iamVjdCx0eXBlOmNoYW5nZSxvbGRWYWx1ZTpvbGR2YWx1ZSxuZXdWYWx1ZTpuZXdPYmplY3Rba2V5XSxrZXlwYXRoOmtleXBhdGh9KTtcclxuXHRcdFx0XHRcdFx0XHRyZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGR2YWx1ZSxuZXdPYmplY3Rba2V5XSxrZXlwYXRoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKG9sZE9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG5cdFx0XHRcdFx0dmFyIG9sZGtleXMgPSBPYmplY3Qua2V5cyhvbGRPYmplY3QpO1xyXG5cdFx0XHRcdFx0b2xka2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hhbmdlID0gKG5ld09iamVjdD09PW51bGwgPyBcInVwZGF0ZVwiIDogXCJkZWxldGVcIiksXHJcblx0XHRcdFx0XHRcdFx0a2V5cGF0aCA9IHBhdGggKyBcIi5cIiArIGtleTtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0Y2hhbmdlcy5wdXNoKHtuYW1lOm5hbWUsb2JqZWN0OnJvb3RPYmplY3QsdHlwZTpjaGFuZ2Usb2xkVmFsdWU6b2xkT2JqZWN0W2tleV0sbmV3VmFsdWU6bmV3T2JqZWN0LGtleXBhdGg6a2V5cGF0aH0pO1xyXG5cdFx0XHRcdFx0XHRyZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGRPYmplY3Rba2V5XSx1bmRlZmluZWQsa2V5cGF0aCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Y2hhbmdlc2V0LmZvckVhY2goZnVuY3Rpb24oY2hhbmdlKSB7XHJcblx0XHRcdFx0dmFyIGtleXBhdGggPSAocGFydHMubGVuZ3RoPjAgPyBwYXJ0cy5qb2luKFwiLlwiKSArIFwiLlwiIDogXCJcIikgKyBjaGFuZ2UubmFtZTtcclxuXHJcblx0XHRcdFx0aWYgKGNoYW5nZS50eXBlID09PSBcInVwZGF0ZVwiIHx8IGNoYW5nZS50eXBlID09PSBcImFkZFwiKSB7IFxyXG5cdFx0XHRcdFx0cmVvYnNlcnZlKGNoYW5nZS5vYmplY3QsIHBhcnRzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNoYW5nZXMucHVzaCh7bmFtZTpjaGFuZ2UubmFtZSxvYmplY3Q6Y2hhbmdlLm9iamVjdCx0eXBlOmNoYW5nZS50eXBlLG9sZFZhbHVlOmNoYW5nZS5vbGRWYWx1ZSxuZXdWYWx1ZTpjaGFuZ2Uub2JqZWN0W2NoYW5nZS5uYW1lXSxrZXlwYXRoOmtleXBhdGh9KTtcclxuXHRcdFx0XHRyZWN1cnNlKGNoYW5nZS5uYW1lLGNoYW5nZS5vYmplY3QsY2hhbmdlLm9sZFZhbHVlLGNoYW5nZS5vYmplY3RbY2hhbmdlLm5hbWVdLGtleXBhdGgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0Y2FsbGJhY2soY2hhbmdlcyk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBvYnNlcnZlZDtcclxuXHR9O1xyXG59KSgpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxMTkgKi8sXG4vKiAxMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2dldDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNSk7XG5cbnZhciBfZ2V0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldDIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfRGF0YU9iamVjdDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7XG5cbnZhciBfRGF0YU9iamVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Mik7XG5cbnZhciBfRGF0YU9iamVjdENoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xuXG52YXIgX0RhdGFPYmplY3RDaGlsZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Q2hpbGQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbnZhciBGaWx0ZXJUeXBlID0geyBBTlk6ICdhbnknLCBTVEFSVDogJ3N0YXJ0JywgRVhBQ1Q6ICdleGFjdCcgfTtcblxuLyoqXG4gKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSB0aGUgU3luY2hlciBzdWJzY3JpYmUgY2FsbC5cbiAqIFRvIGJlIHVzZWQgYXMgYW4gb2JzZXJ2YXRpb24gcG9pbnQgZnJvbSBhIERhdGFPYmplY3RSZXBvcnRlciBjaGFuZ2UuXG4gKi9cblxudmFyIERhdGFPYmplY3RPYnNlcnZlciA9IGZ1bmN0aW9uIChfRGF0YU9iamVjdCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShEYXRhT2JqZWN0T2JzZXJ2ZXIsIF9EYXRhT2JqZWN0KTtcblxuICAvKiBwcml2YXRlXG4gIF9jaGFuZ2VMaXN0ZW5lcjogTXNnTGlzdGVuZXJcbiAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS1cbiAgX2ZpbHRlcnM6IHs8ZmlsdGVyPjoge3R5cGU6IDxzdGFydCwgZXhhY3Q+LCBjYWxsYmFjazogPGZ1bmN0aW9uPn0gfVxuICAqL1xuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBIeXBlcnRpZXMuIEl0J3MgY2FsbGVkIGJ5IHRoZSBTeW5jaGVyLnN1YnNjcmliZSBtZXRob2RcbiAgICovXG5cbiAgLy9UT0RPOiBGb3IgRnVydGhlciBTdHVkeVxuICBmdW5jdGlvbiBEYXRhT2JqZWN0T2JzZXJ2ZXIoc3luY2hlciwgdXJsLCBzY2hlbWEsIGluaXRpYWxTdGF0dXMsIGluaXRpYWxEYXRhLCBjaGlsZHJlbnMsIGluaXRpYWxWZXJzaW9uLCBtdXR1YWwpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0T2JzZXJ2ZXIpO1xuXG4gICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKERhdGFPYmplY3RPYnNlcnZlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyKSkuY2FsbCh0aGlzLCBzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEuZGF0YSwgY2hpbGRyZW5zLCBtdXR1YWwpKTtcblxuICAgIHZhciBfdGhpcyA9IF90aGlzMjtcblxuICAgIF90aGlzLl92ZXJzaW9uID0gaW5pdGlhbFZlcnNpb247XG4gICAgX3RoaXMuX2ZpbHRlcnMgPSB7fTtcblxuICAgIF90aGlzLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5fb25GaWx0ZXIoZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgLy9zZXR1cCBjaGlsZHJlbnMgZGF0YSBmcm9tIHN1YnNjcmlwdGlvblxuICAgICgwLCBfa2V5czIuZGVmYXVsdCkoaW5pdGlhbERhdGEuY2hpbGRyZW5zKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICB2YXIgY2hpbGREYXRhID0gaW5pdGlhbERhdGEuY2hpbGRyZW5zW2NoaWxkSWRdO1xuICAgICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1tjaGlsZElkXSA9IG5ldyBfRGF0YU9iamVjdENoaWxkMi5kZWZhdWx0KF90aGlzLCBjaGlsZElkLCBjaGlsZERhdGEpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuX2FsbG9jYXRlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlciwgW3tcbiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7XG4gICAgICAoMCwgX2dldDMuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZSksICdfYWxsb2NhdGVMaXN0ZW5lcnMnLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICBpZiAobXNnLnR5cGUgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RPYnNlcnZlci0nICsgX3RoaXMuX3VybCArICctUkNWOiAnLCBtc2cpO1xuICAgICAgICAgIF90aGlzLl9jaGFuZ2VPYmplY3QoX3RoaXMuX3N5bmNPYmosIG1zZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZWxlYXNlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XG4gICAgICAoMCwgX2dldDMuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZSksICdfcmVsZWFzZUxpc3RlbmVycycsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgZGVsZXRlIF90aGlzLl9zeW5jaGVyLl9vYnNlcnZlcnNbX3RoaXMuX3VybF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Vuc3Vic2NyaWJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkxvY2FsVW5TdWJzY3JpYmVcbiAgICAgIHZhciB1blN1YnNjcmliZU1zZyA9IHtcbiAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX293bmVyLCB0bzogX3RoaXMuX3N5bmNoZXIuX3N1YlVSTCxcbiAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHVuU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RPYnNlcnZlci1VTlNVQlNDUklCRTogJywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fc3luY2hlci5fb2JzZXJ2ZXJzW190aGlzLl91cmxdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciB0aGUgY2hhbmdlIGxpc3RlbmVycyBzZW50IGJ5IHRoZSByZXBvcnRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWx0ZXIgLSBGaWx0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBmaWVsZCAoc2VwYXJhdGVkIGRvdCBwYXRoKS4gQWNjZXB0cyAqIGF0IHRoZSBlbmQgZm9yIGEgbW9yZSB1bnJlc3RyaWN0ZWQgZmlsdGVyaW5nLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2tcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25DaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShmaWx0ZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIga2V5ID0gZmlsdGVyO1xuICAgICAgdmFyIGZpbHRlck9iaiA9IHtcbiAgICAgICAgdHlwZTogRmlsdGVyVHlwZS5FWEFDVCxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICB9O1xuXG4gICAgICB2YXIgaWR4ID0gZmlsdGVyLmluZGV4T2YoJyonKTtcbiAgICAgIGlmIChpZHggPT09IGZpbHRlci5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgICBmaWx0ZXJPYmoudHlwZSA9IEZpbHRlclR5cGUuQU5ZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbHRlck9iai50eXBlID0gRmlsdGVyVHlwZS5TVEFSVDtcbiAgICAgICAgICBrZXkgPSBmaWx0ZXIuc3Vic3RyKDAsIGZpbHRlci5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9maWx0ZXJzW2tleV0gPSBmaWx0ZXJPYmo7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX29uRmlsdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uRmlsdGVyKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9maWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGZpbHRlciA9IF90aGlzLl9maWx0ZXJzW2tleV07XG4gICAgICAgIGlmIChmaWx0ZXIudHlwZSA9PT0gRmlsdGVyVHlwZS5BTlkpIHtcbiAgICAgICAgICAvL21hdGNoIGFueXRoaW5nXG4gICAgICAgICAgZmlsdGVyLmNhbGxiYWNrKGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIudHlwZSA9PT0gRmlsdGVyVHlwZS5TVEFSVCkge1xuICAgICAgICAgIC8vaWYgc3RhcnRzIHdpdGggZmlsdGVyLi4uXG4gICAgICAgICAgaWYgKGV2ZW50LmZpZWxkLmluZGV4T2Yoa2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgZmlsdGVyLmNhbGxiYWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLnR5cGUgPT09IEZpbHRlclR5cGUuRVhBQ1QpIHtcbiAgICAgICAgICAvL2V4YWN0IG1hdGNoXG4gICAgICAgICAgaWYgKGV2ZW50LmZpZWxkID09PSBrZXkpIHtcbiAgICAgICAgICAgIGZpbHRlci5jYWxsYmFjayhldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERhdGFPYmplY3RPYnNlcnZlcjtcbn0oX0RhdGFPYmplY3QzLmRlZmF1bHQgLyogaW1wbGVtZW50cyBTeW5jU3RhdHVzICovKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGF0YU9iamVjdE9ic2VydmVyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuLyogMTIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzApO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9nZXQyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjUpO1xuXG52YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTtcblxudmFyIF9pbmhlcml0czIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX0RhdGFPYmplY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpO1xuXG52YXIgX0RhdGFPYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIHRoZSBTeW5jaGVyIGNyZWF0ZSBjYWxsLlxuICogVG8gYmUgdXNlZCBhcyBhIHJlcG9ydGVyIHBvaW50LCBjaGFuZ2VzIHdpbGwgYmUgc3VibWl0ZWQgdG8gRGF0YU9iamVjdE9ic2VydmVyIGluc3RhbmNlcy5cbiAqL1xuLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG52YXIgRGF0YU9iamVjdFJlcG9ydGVyID0gZnVuY3Rpb24gKF9EYXRhT2JqZWN0KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlciwgX0RhdGFPYmplY3QpO1xuXG4gIC8qIHByaXZhdGVcbiAgX3N1YnNjcmlwdGlvbnM6IDxoeXBlcnR5VXJsOiB7IHN0YXR1czogc3RyaW5nIH0gfT5cbiAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS1cbiAgX29uU3Vic2NyaXB0aW9uSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkXG4gIF9vblJlc3BvbnNlSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkXG4gIF9vblJlYWRIYW5kbGVyOiAoZXZlbnQpID0+IHZvaWRcbiAgKi9cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkgYnkgSHlwZXJ0aWVzLiBJdCdzIGNhbGxlZCBieSB0aGUgU3luY2hlci5jcmVhdGUgbWV0aG9kXG4gICAqL1xuICBmdW5jdGlvbiBEYXRhT2JqZWN0UmVwb3J0ZXIoc3luY2hlciwgdXJsLCBzY2hlbWEsIGluaXRpYWxTdGF0dXMsIGluaXRpYWxEYXRhLCBjaGlsZHJlbnMpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0UmVwb3J0ZXIpO1xuXG4gICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKERhdGFPYmplY3RSZXBvcnRlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdFJlcG9ydGVyKSkuY2FsbCh0aGlzLCBzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEsIGNoaWxkcmVucykpO1xuXG4gICAgdmFyIF90aGlzID0gX3RoaXMyO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcblxuICAgIF90aGlzLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdFJlcG9ydGVyLScgKyB1cmwgKyAnLVNFTkQ6ICcsIGV2ZW50KTtcbiAgICAgIF90aGlzLl9vbkNoYW5nZShldmVudCk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0YU9iamVjdFJlcG9ydGVyLCBbe1xuICAgIGtleTogJ19hbGxvY2F0ZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGxvY2F0ZUxpc3RlbmVycygpIHtcbiAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIucHJvdG90eXBlKSwgJ19hbGxvY2F0ZUxpc3RlbmVycycsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5fb2JqZWN0TGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3QtJyArIF90aGlzLl91cmwgKyAnLVJDVjogJywgbXNnKTtcbiAgICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzpcbiAgICAgICAgICAgIF90aGlzLl9vblJlc3BvbnNlKG1zZyk7YnJlYWs7XG4gICAgICAgICAgY2FzZSAncmVhZCc6XG4gICAgICAgICAgICBfdGhpcy5fb25SZWFkKG1zZyk7YnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZWxlYXNlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XG4gICAgICAoMCwgX2dldDMuZGVmYXVsdCkoRGF0YU9iamVjdFJlcG9ydGVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdFJlcG9ydGVyLnByb3RvdHlwZSksICdfcmVsZWFzZUxpc3RlbmVycycsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5fb2JqZWN0TGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBpbnZpdGF0aW9ucyAoY3JlYXRlIG1lc3NhZ2VzKSB0byBoeXBlcnRpZXMsIG9ic2VydmVycyBsaXN0LlxuICAgICAqIEBwYXJhbSAge0h5cGVydHlVUkxbXX0gb2JzZXJ2ZXJzIExpc3Qgb2YgSHlwZXJ0eSBVUkwnc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnZpdGVPYnNlcnZlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnZpdGVPYnNlcnZlcnMob2JzZXJ2ZXJzKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkNyZWF0ZVxuICAgICAgdmFyIGludml0ZU1zZyA9IHtcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl9zeW5jaGVyLl9vd25lciwgdG86IF90aGlzLl9zeW5jaGVyLl9zdWJVUkwsXG4gICAgICAgIGJvZHk6IHsgcmVzdW1lOiBmYWxzZSwgcmVzb3VyY2U6IF90aGlzLl91cmwsIHNjaGVtYTogX3RoaXMuX3NjaGVtYSwgdmFsdWU6IF90aGlzLl9zeW5jT2JqLmRhdGEsIGF1dGhvcmlzZTogb2JzZXJ2ZXJzIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoaW52aXRlTXNnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIGFuZCBkZWxldGUgb2JqZWN0IGRhdGFcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVsZXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgdG8gdGhlIHJ1bnRpbWUgaW5zdGFuY2Ugb2YgU3luY2hlck1hbmFnZXIgLT4gX29uRGVsZXRlXG4gICAgICB2YXIgZGVsZXRlTXNnID0ge1xuICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX293bmVyLCB0bzogX3RoaXMuX3N5bmNoZXIuX3N1YlVSTCxcbiAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGRlbGV0ZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0UmVwb3J0ZXItREVMRVRFOiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgZGVsZXRlIF90aGlzLl9zeW5jaGVyLl9yZXBvcnRlcnNbX3RoaXMuX3VybF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbnMgcmVxdWVzdGVkIGFuZCBhY2NlcHRlZCB0byB0aGlzIHJlcG9ydGVyXG4gICAgICogQHR5cGUge09iamVjdDxIeXBlcnR5VVJMLCBTeW5jU3Vic2NyaXB0aW9uPn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25TdWJzY3JpcHRpb24nLFxuXG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyBzdWJzY3JpYmUgYW5kIHVuc3Vic2NyaWJlIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlY2VpdmUgZXZlbnRzXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3Vic2NyaXB0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vblN1YnNjcmlwdGlvbkhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyByZXNwb25zZSBub3RpZmljYXRpb25zIG9mIHRoZSBjcmVhdGUnc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVjZWl2ZSBldmVudHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25SZXNwb25zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uUmVzcG9uc2VIYW5kbGVyID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgcmVhZCBub3RpZmljYXRpb25zXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFja1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblJlYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlYWQoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uUmVhZEhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBwYXJlbnQgU3luY2hlciAtPiBfb25Gb3J3YXJkXG5cbiAgfSwge1xuICAgIGtleTogJ19vbkZvcndhcmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Gb3J3YXJkKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RSZXBvcnRlci1SQ1Y6ICcsIG1zZyk7XG4gICAgICBzd2l0Y2ggKG1zZy5ib2R5LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzpcbiAgICAgICAgICBfdGhpcy5fb25TdWJzY3JpYmUobXNnKTticmVhaztcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOlxuICAgICAgICAgIF90aGlzLl9vblVuU3Vic2NyaWJlKG1zZyk7YnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhpcyAtPiBfb25Gb3J3YXJkOiBlbWl0dGVkIGJ5IGEgcmVtb3RlIFN5bmNoZXIgLT4gc3Vic2NyaWJlXG5cbiAgfSwge1xuICAgIGtleTogJ19vblN1YnNjcmliZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblN1YnNjcmliZShtc2cpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGh5cGVydHlVcmwgPSBtc2cuYm9keS5mcm9tO1xuICAgICAgY29uc29sZS5sb2coJ1tEYXRhT2JqZWN0UmVwb3J0ZXIuX29uU3Vic2NyaWJlXScsIG1zZyk7XG5cbiAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgdHlwZTogbXNnLmJvZHkudHlwZSxcbiAgICAgICAgdXJsOiBoeXBlcnR5VXJsLFxuXG4gICAgICAgIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSxcblxuICAgICAgICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdCgpIHtcbiAgICAgICAgICAvL2NyZWF0ZSBuZXcgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgdmFyIHN1YiA9IHsgdXJsOiBoeXBlcnR5VXJsLCBzdGF0dXM6ICdvbicgfTtcbiAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VXJsXSA9IHN1YjtcblxuICAgICAgICAgIC8vcHJvY2VzcyBhbmQgc2VuZCBjaGlsZHJlbnMgZGF0YVxuICAgICAgICAgIHZhciBjaGlsZHJlblZhbHVlcyA9IHt9O1xuICAgICAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMuX2NoaWxkcmVuT2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkRGF0YSA9IF90aGlzLl9jaGlsZHJlbk9iamVjdHNbY2hpbGRJZF0uZGF0YTtcbiAgICAgICAgICAgIGNoaWxkcmVuVmFsdWVzW2NoaWxkSWRdID0gKDAsIF91dGlscy5kZWVwQ2xvbmUpKGNoaWxkRGF0YSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgc2VuZE1zZyA9IHtcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHNjaGVtYTogX3RoaXMuX3NjaGVtYSwgdmVyc2lvbjogX3RoaXMuX3ZlcnNpb24sIHZhbHVlOiB7IGRhdGE6ICgwLCBfdXRpbHMuZGVlcENsb25lKShfdGhpcy5kYXRhKSwgY2hpbGRyZW5zOiBjaGlsZHJlblZhbHVlcyB9IH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy9UT0RPOiBGb3IgRnVydGhlciBTdHVkeVxuICAgICAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnbXV0dWFsQXV0aGVudGljYXRpb24nKSAmJiAhbXNnLmJvZHkubXV0dWFsQXV0aGVudGljYXRpb24pIHtcbiAgICAgICAgICAgIHNlbmRNc2cuYm9keS5tdXR1YWxBdXRoZW50aWNhdGlvbiA9IF90aGlzMy5fbXV0dWFsQXV0aGVudGljYXRpb247XG4gICAgICAgICAgICBfdGhpczMuX211dHVhbEF1dGhlbnRpY2F0aW9uID0gbXNnLmJvZHkubXV0dWFsQXV0aGVudGljYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9zZW5kIG9rIHJlc3BvbnNlIG1lc3NhZ2VcbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHNlbmRNc2cpO1xuXG4gICAgICAgICAgcmV0dXJuIHN1YjtcbiAgICAgICAgfSxcblxuICAgICAgICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICAgICAgICAvL3NlbmQgcmVqZWN0IHJlc3BvbnNlIG1lc3NhZ2VcbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDMsIGRlc2M6IHJlYXNvbiB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5fb25TdWJzY3JpcHRpb25IYW5kbGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTVUJTQ1JJUFRJT04tRVZFTlQ6ICcsIGV2ZW50KTtcbiAgICAgICAgX3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcihldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhpcyAtPiBfb25Gb3J3YXJkOiBlbWl0dGVkIGJ5IGEgcmVtb3RlIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZVxuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25VblN1YnNjcmliZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblVuU3Vic2NyaWJlKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBoeXBlcnR5VXJsID0gbXNnLmJvZHkuZnJvbTtcblxuICAgICAgdmFyIHN1YiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdO1xuICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdO1xuXG4gICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIHR5cGU6IG1zZy5ib2R5LnR5cGUsXG4gICAgICAgIHVybDogaHlwZXJ0eVVybCxcbiAgICAgICAgb2JqZWN0OiBzdWJcbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5fb25TdWJzY3JpcHRpb25IYW5kbGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVTi1TVUJTQ1JJUFRJT04tRVZFTlQ6ICcsIGV2ZW50KTtcbiAgICAgICAgX3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcihldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gUmVwb3J0ZXJVUkwgYWRkcmVzczogZW1pdGVkIGJ5IGEgcmVtb3RlIFN5bmNoZXIgLT4gX29uUmVtb3RlQ3JlYXRlIC0+IGV2ZW50LmFja1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25SZXNwb25zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc3BvbnNlKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICB0eXBlOiBtc2cudHlwZSxcbiAgICAgICAgdXJsOiBtc2cuZnJvbSxcbiAgICAgICAgY29kZTogbXNnLmJvZHkuY29kZVxuICAgICAgfTtcblxuICAgICAgaWYgKF90aGlzLl9vblJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICBjb25zb2xlLmxvZygnUkVTUE9OU0UtRVZFTlQ6ICcsIGV2ZW50KTtcbiAgICAgICAgX3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBSZXBvcnRlclVSTCBhZGRyZXNzOiBlbWl0ZWQgYnkgYSByZW1vdGUgU3luY2hlciAtPiByZWFkXG5cbiAgfSwge1xuICAgIGtleTogJ19vblJlYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZWFkKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICB0eXBlOiBtc2cudHlwZSxcbiAgICAgICAgdXJsOiBtc2cuZnJvbSxcblxuICAgICAgICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdCgpIHtcbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiAoMCwgX3V0aWxzLmRlZXBDbG9uZSkoX3RoaXMuZGF0YSkgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDQwMSwgZGVzYzogcmVhc29uIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKF90aGlzLl9vblJlYWRIYW5kbGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSRUFELUVWRU5UOiAnLCBldmVudCk7XG4gICAgICAgIF90aGlzLl9vblJlYWRIYW5kbGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdWJzY3JpcHRpb25zJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGF0YU9iamVjdFJlcG9ydGVyO1xufShfRGF0YU9iamVjdDMuZGVmYXVsdCAvKiBpbXBsZW1lbnRzIFN5bmNTdGF0dXMgKi8pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRhT2JqZWN0UmVwb3J0ZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG4vKiAxMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9taXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG5cbnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTtcblxudmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9Qcm94eU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI0KTtcblxudmFyIF9Qcm94eU9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm94eU9iamVjdCk7XG5cbnZhciBfRGF0YU9iamVjdENoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpO1xuXG52YXIgX0RhdGFPYmplY3RDaGlsZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Q2hpbGQpO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIE1haW4gZXh0ZW5zaW9uIGNsYXNzIGZvciBvYnNlcnZlcnMgYW5kIHJlcG9ydGVycywgd2l0aCBjb21tb24gcHJvcGVydGllcyBhbmQgbWV0aG9kcy5cbiAqIENoaWxkcmVuIG1hbmFnZW1lbnQgaXMgY29tbW9uIGZvciBvYnNlcnZlcnMgYW5kIHJlcG9ydGVycy5cbiAqL1xudmFyIERhdGFPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8qIHByaXZhdGVcbiAgX3ZlcnNpb246IG51bWJlclxuICAgX293bmVyOiBIeXBlcnR5VVJMXG4gIF91cmw6IE9iamVjdFVSTFxuICBfc2NoZW1hOiBTY2hlbWFcbiAgX2J1czogTWluaUJ1c1xuICBfc3RhdHVzOiBvbiB8IHBhdXNlZFxuICBfc3luY09iajogU3luY0RhdGFcbiAgIF9jaGlsZHJlbjogeyBpZDogRGF0YU9iamVjdENoaWxkIH1cbiAgX2NoaWxkcmVuTGlzdGVuZXJzOiBbTXNnTGlzdGVuZXJdXG4gICAtLS0tZXZlbnQgaGFuZGxlcnMtLS0tXG4gIF9vbkFkZENoaWxkSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkXG4gICovXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5IGJ5IEh5cGVydGllcy4gSXQncyBjYWxsZWQgYnkgdGhlIFN5bmNoZXIgY3JlYXRlIG9yIHN1YnNjcmliZSBtZXRob2Qnc1xuICAgKi9cbiAgZnVuY3Rpb24gRGF0YU9iamVjdChzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEsIGNoaWxkcmVucykge1xuICAgIHZhciBtdXR1YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IHRydWU7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGF0YU9iamVjdCk7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3N5bmNoZXIgPSBzeW5jaGVyO1xuICAgIF90aGlzLl91cmwgPSB1cmw7XG4gICAgX3RoaXMuX3NjaGVtYSA9IHNjaGVtYTtcbiAgICBfdGhpcy5fc3RhdHVzID0gaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5fc3luY09iaiA9IG5ldyBfUHJveHlPYmplY3QyLmRlZmF1bHQoaW5pdGlhbERhdGEpO1xuICAgIF90aGlzLl9jaGlsZHJlbnMgPSBjaGlsZHJlbnM7XG5cbiAgICAvL1RPRE86IEZvciBGdXJ0aGVyIFN0dWR5XG4gICAgX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uID0gbXV0dWFsO1xuXG4gICAgX3RoaXMuX3ZlcnNpb24gPSAwO1xuICAgIF90aGlzLl9jaGlsZElkID0gMDtcbiAgICBfdGhpcy5fY2hpbGRyZW5PYmplY3RzID0ge307XG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XG5cbiAgICBfdGhpcy5fb3duZXIgPSBzeW5jaGVyLl9vd25lcjtcbiAgICBfdGhpcy5fYnVzID0gc3luY2hlci5fYnVzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0YU9iamVjdCwgW3tcbiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGNoaWxkQmFzZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoaWxkcmVuLyc7XG4gICAgICBjb25zb2xlLmxvZygnW0RhdGEgT2JqZWN0IC0gQWxsb2NhdGVMaXN0ZW5lcnNdIC0gJywgX3RoaXMuX2NoaWxkcmVucyk7XG4gICAgICBpZiAoX3RoaXMuX2NoaWxkcmVucykge1xuICAgICAgICBfdGhpcy5fY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgdmFyIGNoaWxkVVJMID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XG4gICAgICAgICAgdmFyIGxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgLy9pZ25vcmUgbXNnIHNlbnQgYnkgaGltc2VsZlxuICAgICAgICAgICAgaWYgKG1zZy5mcm9tICE9PSBfdGhpczIuX293bmVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0LUNoaWxkcmVuLVJDVjogJywgbXNnKTtcbiAgICAgICAgICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgICAgICAgICAgICBfdGhpcy5fb25DaGlsZENyZWF0ZShtc2cpO2JyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO2JyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBfdGhpcy5fY2hhbmdlQ2hpbGRyZW4obXNnKTticmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMuX2NoaWxkcmVuT2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzLl9jaGlsZHJlbk9iamVjdHNba2V5XS5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IFVSTCBvZiByZXBvcnRlciBvciBvYnNlcnZlclxuICAgICAqIEB0eXBlIHtPYmplY3RVUkx9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcblxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIC8vVE9ETzogdGhpcyBmZWF0dXJlIG5lZWRzIG1vcmUgYW5hbGlzZVxuICAgICAgdGhyb3cgJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXN1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgICAvL1RPRE86IHRoaXMgZmVhdHVyZSBuZWVkcyBtb3JlIGFuYWxpc2VcbiAgICAgIHRocm93ICdOb3QgaW1wbGVtZW50ZWQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvL1RPRE86IHNob3VsZCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiBhbmQgc2VuZCBtZXNzYWdlIHVuc3Vic2NyaWJlP1xuICAgICAgdGhyb3cgJ05vdCBpbXBsZW1lbnRlZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCBhZGQgYSBEYXRhT2JqZWN0Q2hpbGQgdG8gYSBjaGlsZHJlbiBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjaGlsZHJlbiAtIENoaWxkcmVuIG5hbWUgd2hlcmUgdGhlIGNoaWxkIGlzIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7SlNPTn0gaW5pdGlhbERhdGEgLSBJbml0aWFsIGRhdGEgb2YgdGhlIGNoaWxkXG4gICAgICogQHBhcmFtICB7TWVzc2FnZUJvZHlJZGVudGl0eX0gaWRlbnRpdHkgLSAob3B0aW9uYWwpIGlkZW50aXR5IGRhdGEgdG8gYmUgYWRkZWQgdG8gaWRlbnRpdHkgdGhlIHVzZXIgcmVwb3J0ZXIuIFRvIGJlIHVzZWQgZm9yIGxlZ2FjeSBpZGVudGl0aWVzLlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdENoaWxkPn0gLSBSZXR1cm4gUHJvbWlzZSB0byBhIG5ldyBEYXRhT2JqZWN0Q2hpbGQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZENoaWxkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ2hpbGQoY2hpbGRyZW4sIGluaXRpYWxEYXRhLCBpZGVudGl0eSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy9jcmVhdGUgbmV3IGNoaWxkIHVuaXF1ZSBJRCwgYmFzZWQgb24gaHlwZXJ0eVVSTFxuICAgICAgX3RoaXMuX2NoaWxkSWQrKztcbiAgICAgIHZhciBtc2dDaGlsZElkID0gX3RoaXMuX293bmVyICsgJyMnICsgX3RoaXMuX2NoaWxkSWQ7XG4gICAgICB2YXIgbXNnQ2hpbGRQYXRoID0gX3RoaXMuX3VybCArICcvY2hpbGRyZW4vJyArIGNoaWxkcmVuO1xuXG4gICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IGRpcmVjdGx5IHRvIGEgcmVzb3VyY2UgY2hpbGQgYWRkcmVzczogTWVzc2FnZUJ1c1xuICAgICAgdmFyIHJlcXVlc3RNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5fb3duZXIsIHRvOiBtc2dDaGlsZFBhdGgsXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IG1zZ0NoaWxkSWQsIHZhbHVlOiBpbml0aWFsRGF0YSB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoaWRlbnRpdHkpIHtcbiAgICAgICAgcmVxdWVzdE1zZy5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICB9XG5cbiAgICAgIC8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgIGlmICghX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uKSByZXF1ZXN0TXNnLmJvZHkubXV0dWFsQXV0aGVudGljYXRpb24gPSBfdGhpcy5fbXV0dWFsQXV0aGVudGljYXRpb247XG5cbiAgICAgIC8vcmV0dXJucyBwcm9taXNlLCBpbiB0aGUgZnV0dXJlLCB0aGUgQVBJIG1heSBjaGFuZ2UgdG8gYXN5bmNocm9ub3VzIGNhbGxcbiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIG1zZ0lkID0gX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXF1ZXN0TXNnKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlLXJlcG9ydGVyLWNoaWxkKCAnICsgX3RoaXMuX293bmVyICsgJyApOiAnLCByZXF1ZXN0TXNnKTtcbiAgICAgICAgdmFyIG5ld0NoaWxkID0gbmV3IF9EYXRhT2JqZWN0Q2hpbGQyLmRlZmF1bHQoX3RoaXMsIG1zZ0NoaWxkSWQsIGluaXRpYWxEYXRhLCBfdGhpcy5fb3duZXIsIG1zZ0lkKTtcbiAgICAgICAgbmV3Q2hpbGQub25DaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMuX29uQ2hhbmdlKGV2ZW50LCB7IHBhdGg6IG1zZ0NoaWxkUGF0aCwgY2hpbGRJZDogbXNnQ2hpbGRJZCB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1ttc2dDaGlsZElkXSA9IG5ld0NoaWxkO1xuXG4gICAgICAgIHJlc29sdmUobmV3Q2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgY3JlYXRlIGFuZCBkZWxldGUgb2YgY2hpbGRyZW5zLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2tcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25BZGRDaGlsZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWRkQ2hpbGQoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdCAtPiBhZGRDaGlsZFxuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25DaGlsZENyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoaWxkQ3JlYXRlKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBtc2dDaGlsZElkID0gbXNnLmJvZHkucmVzb3VyY2U7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGUtb2JzZXJ2ZXItY2hpbGQoICcgKyBfdGhpcy5fb3duZXIgKyAnICk6ICcsIG1zZyk7XG4gICAgICB2YXIgbmV3Q2hpbGQgPSBuZXcgX0RhdGFPYmplY3RDaGlsZDIuZGVmYXVsdChfdGhpcywgbXNnQ2hpbGRJZCwgbXNnLmJvZHkudmFsdWUpO1xuICAgICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1ttc2dDaGlsZElkXSA9IG5ld0NoaWxkO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9GTE9XLU9VVDogd2lsbCBmbG93IHRvIERhdGFPYmplY3RDaGlsZCAtPiBfb25SZXNwb25zZVxuICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgc291cmNlOiBfdGhpcy5fb3duZXIgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgIHR5cGU6IG1zZy50eXBlLFxuICAgICAgICBmcm9tOiBtc2cuZnJvbSxcbiAgICAgICAgdXJsOiBtc2cudG8sXG4gICAgICAgIHZhbHVlOiBtc2cuYm9keS52YWx1ZSxcbiAgICAgICAgY2hpbGRJZDogbXNnQ2hpbGRJZCxcbiAgICAgICAgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5XG4gICAgICB9O1xuXG4gICAgICBpZiAoX3RoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdBREQtQ0hJTERSRU4tRVZFTlQ6ICcsIGV2ZW50KTtcbiAgICAgICAgX3RoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL3NlbmQgZGVsdGEgbWVzc2FnZXMgdG8gc3Vic2NyaXB0aW9uc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25DaGFuZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2UoZXZlbnQsIGNoaWxkSW5mbykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX3RoaXMuX3ZlcnNpb24rKztcblxuICAgICAgaWYgKF90aGlzLl9zdGF0dXMgPT09ICdvbicpIHtcbiAgICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCBkaXJlY3RseSB0byBhIHJlc291cmNlIGNoYW5nZXMgYWRkcmVzczogTWVzc2FnZUJ1c1xuICAgICAgICB2YXIgY2hhbmdlTXNnID0ge1xuICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycsXG4gICAgICAgICAgYm9keTogeyB2ZXJzaW9uOiBfdGhpcy5fdmVyc2lvbiwgc291cmNlOiBfdGhpcy5fb3duZXIsIGF0dHJpYnV0ZTogZXZlbnQuZmllbGQgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbRGF0YU9iamVjdCAtIF9vbkNoYW5nZV0gLSAnLCBldmVudCwgY2hpbGRJbmZvLCBjaGFuZ2VNc2cpO1xuXG4gICAgICAgIGlmIChldmVudC5vVHlwZSA9PT0gX1Byb3h5T2JqZWN0Lk9iamVjdFR5cGUuT0JKRUNUKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmNUeXBlICE9PSBfUHJveHlPYmplY3QuQ2hhbmdlVHlwZS5SRU1PVkUpIHtcbiAgICAgICAgICAgIGNoYW5nZU1zZy5ib2R5LnZhbHVlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlTXNnLmJvZHkuYXR0cmlidXRlVHlwZSA9IGV2ZW50Lm9UeXBlO1xuICAgICAgICAgIGNoYW5nZU1zZy5ib2R5LnZhbHVlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICBpZiAoZXZlbnQuY1R5cGUgIT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLlVQREFURSkge1xuICAgICAgICAgICAgY2hhbmdlTXNnLmJvZHkub3BlcmF0aW9uID0gZXZlbnQuY1R5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGlsZEluZm8gbXVzdCBoYXZlIChwYXRoLCBjaGlsZElkKVxuICAgICAgICBpZiAoY2hpbGRJbmZvKSB7XG4gICAgICAgICAgY2hhbmdlTXNnLnRvID0gY2hpbGRJbmZvLnBhdGg7XG4gICAgICAgICAgY2hhbmdlTXNnLmJvZHkucmVzb3VyY2UgPSBjaGlsZEluZm8uY2hpbGRJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgICAgaWYgKCFfdGhpcy5fbXV0dWFsQXV0aGVudGljYXRpb24pIGNoYW5nZU1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uID0gX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uO1xuXG4gICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoY2hhbmdlTXNnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0ZMT1ctSU46IGRlbHRhIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0UmVwb3J0ZXIgb3IgRGF0YU9iamVjdENoaWxkIHdoZW4gY2hhbmdpbmcgZGF0YVxuXG4gIH0sIHtcbiAgICBrZXk6ICdfY2hhbmdlT2JqZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZU9iamVjdChzeW5jT2JqLCBtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vVE9ETzogdXBkYXRlIHZlcnNpb24gP1xuICAgICAgLy9ob3cgdG8gaGFuZGxlIGFuIGluY29ycmVjdCB2ZXJzaW9uID8gRXhhbXBsZTogcmVjZWl2ZSBhIHZlcnNpb24gMyB3aGVuIHRoZSBvYnNlcnZlciBpcyBpbiB2ZXJzaW9uIDEsIHdoZXJlIGlzIHRoZSB2ZXJzaW9uIDIgP1xuICAgICAgLy93aWxsIHdlIG5lZWQgdG8gY29uZmlybSB0aGUgcmVjZXB0aW9uID9cbiAgICAgIGlmIChfdGhpcy5fdmVyc2lvbiArIDEgPT09IG1zZy5ib2R5LnZlcnNpb24pIHtcbiAgICAgICAgX3RoaXMuX3ZlcnNpb24rKztcbiAgICAgICAgdmFyIHBhdGggPSBtc2cuYm9keS5hdHRyaWJ1dGU7XG4gICAgICAgIHZhciB2YWx1ZSA9ICgwLCBfdXRpbHMuZGVlcENsb25lKShtc2cuYm9keS52YWx1ZSk7XG4gICAgICAgIHZhciBmaW5kUmVzdWx0ID0gc3luY09iai5maW5kQmVmb3JlKHBhdGgpO1xuXG4gICAgICAgIGlmIChtc2cuYm9keS5hdHRyaWJ1dGVUeXBlID09PSBfUHJveHlPYmplY3QuT2JqZWN0VHlwZS5BUlJBWSkge1xuICAgICAgICAgIGlmIChtc2cuYm9keS5vcGVyYXRpb24gPT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLkFERCkge1xuICAgICAgICAgICAgdmFyIGFyciA9IGZpbmRSZXN1bHQub2JqO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZmluZFJlc3VsdC5sYXN0O1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShhcnIsIFtpbmRleCwgMF0uY29uY2F0KHZhbHVlKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtc2cuYm9keS5vcGVyYXRpb24gPT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLlJFTU9WRSkge1xuICAgICAgICAgICAgdmFyIF9hcnIgPSBmaW5kUmVzdWx0Lm9iajtcbiAgICAgICAgICAgIHZhciBfaW5kZXggPSBmaW5kUmVzdWx0Lmxhc3Q7XG4gICAgICAgICAgICBfYXJyLnNwbGljZShfaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmluZFJlc3VsdC5vYmpbZmluZFJlc3VsdC5sYXN0XSA9IHZhbHVlOyAvLyBVUERBVEVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1zZy5ib2R5LnZhbHVlKSB7XG4gICAgICAgICAgICBmaW5kUmVzdWx0Lm9ialtmaW5kUmVzdWx0Lmxhc3RdID0gdmFsdWU7IC8vIFVQREFURSBvciBBRERcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGZpbmRSZXN1bHQub2JqW2ZpbmRSZXN1bHQubGFzdF07IC8vIFJFTU9WRVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9UT0RPOiBob3cgdG8gaGFuZGxlIHVuc3luY2hyb25pemVkIHZlcnNpb25zP1xuICAgICAgICBjb25zb2xlLmxvZygnVU5TWU5DSFJPTklaRUQgVkVSU0lPTjogKGRhdGEgPT4gJyArIF90aGlzLl92ZXJzaW9uICsgJywgbXNnID0+ICcgKyBtc2cuYm9keS52ZXJzaW9uICsgJyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0Q2hpbGQgd2hlbiBjaGFuZ2luZyBkYXRhXG5cbiAgfSwge1xuICAgIGtleTogJ19jaGFuZ2VDaGlsZHJlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGFuZ2VDaGlsZHJlbihtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBjb25zb2xlLmxvZygnQ2hhbmdlIGNoaWxkcmVuOiAnLCBfdGhpcy5fb3duZXIsIG1zZyk7XG5cbiAgICAgIHZhciBjaGlsZElkID0gbXNnLmJvZHkucmVzb3VyY2U7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2NoaWxkSWRdO1xuXG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgX3RoaXMuX2NoYW5nZU9iamVjdChjaGlsZHJlbi5fc3luY09iaiwgbXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdObyBjaGlsZHJlbiBmb3VuZCBmb3I6ICcsIGNoaWxkSWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VybCcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXJsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9iamVjdCBzY2hlbWEgVVJMICh0aGlzIGZpZWxkIGlzIG5vdCB5ZXQgc3RhYmxlLCBhbmQgaXMgc3Vic2plY3QgdG8gY2hhbmdlKVxuICAgICAqIEB0eXBlIHtTY2hlbWFVUkx9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NjaGVtYScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2NoZW1hO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXR1cyBvZiB0aGUgcmVwb3J0ZXIgb3Igb2JzZXJ2ZXIgY29ubmVjdGlvbiAodGhpcyBmaWVsZCBpcyBub3QgeWV0IHN0YWJsZSwgYW5kIGlzIHN1YnNqZWN0IHRvIGNoYW5nZSlcbiAgICAgKiBAdHlwZSB7U3RhdHVzfSAtIEVudW0gb2Y6IG9uIHwgcGF1c2VkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3N0YXR1cycsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERhdGEgc3RydWN0dXJlIHRvIGJlIHN5bmNocm9uaXplZC5cbiAgICAgKiBAdHlwZSB7SlNPTn0gLSBKU09OIHN0cnVjdHVyZSB0aGF0IHNob3VsZCBmb2xsb3cgdGhlIGRlZmluZWQgc2NoZW1hLCBpZiBhbnkuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RhdGEnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGwgY3JlYXRlZCBjaGlsZHJlbidzIHNpbmNlIHRoZSBzdWJzY3JpcHRpb24sIGRvZXNuJ3QgY29udGFpbiBhbGwgY2hpbGRyZW4ncyBzaW5jZSByZXBvcnRlciBjcmVhdGlvbi5cbiAgICAgKiBAdHlwZSB7T2JqZWN0PENoaWxkSWQsIERhdGFPYmplY3RDaGlsZD59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NoaWxkcmVucycsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5PYmplY3RzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGF0YU9iamVjdDtcbn0oKTsgLyoqXG4gICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4gICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuICAgICAqXG4gICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICpcbiAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAqXG4gICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICoqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRhT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuLyogMTIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfUHJveHlPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cbnZhciBfUHJveHlPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJveHlPYmplY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIHRoZSBEYXRhT2JqZWN0IGFkZENoaWxkcmVuIGNhbGwgb3IgZnJvbSBvbkFkZENoaWxkcmVuIGlmIHJlbW90ZWx5IGNyZWF0ZWQuXG4gKiBDaGlsZHJlbiBvYmplY3Qgc3luY2hyb25pemF0aW9uIGlzIGEgYSBmYXN0IGZvcndhcmQgbWVjaGFuaXNtLCBubyBuZWVkIGZvciBkaXJlY3Qgc3Vic2NyaXB0aW9ucywgaXQgdXNlcyB0aGUgYWxyZWFkeSBhdXRob3JpemVkIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBwYXJlbnQgRGF0YU9iamVjdC5cbiAqL1xudmFyIERhdGFPYmplY3RDaGlsZCAvKiBpbXBsZW1lbnRzIFN5bmNTdGF0dXMgKi8gPSBmdW5jdGlvbiAoKSB7XG4gIC8qIHByaXZhdGVcbiAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS1cbiAgX29uUmVzcG9uc2VIYW5kbGVyOiAoZXZlbnQpID0+IHZvaWRcbiAgKi9cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkgYnkgSHlwZXJ0aWVzLiBJdCdzIGNhbGxlZCBieSB0aGUgRGF0YU9iamVjdC5hZGRDaGlsZHJlblxuICAgKi9cbiAgZnVuY3Rpb24gRGF0YU9iamVjdENoaWxkKHBhcmVudCwgY2hpbGRJZCwgaW5pdGlhbERhdGEsIG93bmVyLCBtc2dJZCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFPYmplY3RDaGlsZCk7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICBfdGhpcy5fY2hpbGRJZCA9IGNoaWxkSWQ7XG4gICAgX3RoaXMuX293bmVyID0gb3duZXI7XG4gICAgX3RoaXMuX21zZ0lkID0gbXNnSWQ7XG5cbiAgICBfdGhpcy5fc3luY09iaiA9IG5ldyBfUHJveHlPYmplY3QyLmRlZmF1bHQoaW5pdGlhbERhdGEpO1xuXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xuICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0YU9iamVjdENoaWxkLCBbe1xuICAgIGtleTogJ19hbGxvY2F0ZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGxvY2F0ZUxpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgY2hpbGRyZW4gcmVwb3J0ZXJzXG4gICAgICBpZiAoX3RoaXMuX293bmVyKSB7XG4gICAgICAgIF90aGlzLl9saXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoX3RoaXMuX293bmVyLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnICYmIG1zZy5pZCA9PT0gX3RoaXMuX21zZ0lkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdENoaWxkLm9uUmVzcG9uc2U6JywgbXNnKTtcbiAgICAgICAgICAgIF90aGlzLl9vblJlc3BvbnNlKG1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKF90aGlzLl9saXN0ZW5lcikge1xuICAgICAgICBfdGhpcy5fbGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fY2hpbGRyZW5bX3RoaXMuX2NoaWxkSWRdO1xuXG4gICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuXG4gICAgICAvL1RPRE86IHNlbmQgZGVsZXRlIG1lc3NhZ2UgP1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoaWxkcmVuIElEIGdlbmVyYXRlZCBvbiBhZGRDaGlsZHJlbi4gVW5pcXVlIGlkZW50aWZpZXJcbiAgICAgKiBAdHlwZSB7VVJMfSAtIFVSTCBvZiB0aGUgZm9ybWF0IDxIeXBlcnR5VVJMPiM8bnVtZXJpYy1zZXF1ZW5jZT5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25DaGFuZ2UnLFxuXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciB0aGUgY2hhbmdlIGxpc3RlbmVycyBzZW50IGJ5IHRoZSByZXBvcnRlciBjaGlsZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX3N5bmNPYmoub2JzZXJ2ZShmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgcmVzcG9uc2Ugbm90aWZpY2F0aW9ucyBvZiB0aGUgY3JlYXRlc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2tcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25SZXNwb25zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzcG9uc2UoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uUmVzcG9uc2VIYW5kbGVyID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdCAtPiBfb25DaGlsZENyZWF0ZVxuXG4gIH0sIHtcbiAgICBrZXk6ICdfb25SZXNwb25zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc3BvbnNlKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICB0eXBlOiBtc2cudHlwZSxcbiAgICAgICAgdXJsOiBtc2cuYm9keS5zb3VyY2UsXG4gICAgICAgIGNvZGU6IG1zZy5ib2R5LmNvZGVcbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5fb25SZXNwb25zZUhhbmRsZXIpIHtcbiAgICAgICAgX3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZElkJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jaGlsZElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERhdGEgU3RydWN0dXJlIHRvIGJlIHN5bmNocm9uaXplZC5cbiAgICAgKiBAdHlwZSB7SlNPTn0gLSBKU09OIHN0cnVjdHVyZSB0aGF0IHNob3VsZCBmb2xsb3cgdGhlIGRlZmluZWQgc2NoZW1hLCBpZiBhbnkuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RhdGEnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERhdGFPYmplY3RDaGlsZDtcbn0oKTsgLyoqXG4gICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4gICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuICAgICAqXG4gICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICpcbiAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAqXG4gICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICoqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRhT2JqZWN0Q2hpbGQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG4vKiAxMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuT2JqZWN0VHlwZSA9IGV4cG9ydHMuQ2hhbmdlVHlwZSA9IHVuZGVmaW5lZDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMTgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgb2JqZWN0VHlwZSA9IHsgQVJSQVk6ICdbb2JqZWN0IEFycmF5XScsIE9CSkVDVDogJ1tvYmplY3QgT2JqZWN0XScgfTtcblxuLyoqXG4gKiBAYWNjZXNzIHByaXZhdGVcbiAqIE1haW4gY2xhc3MgdGhhdCBtYWludGFpbnMgYSBKU09OIG9iamVjdCwgYW5kIG9ic2VydmVzIGNoYW5nZXMgaW4gdGhpcyBvYmplY3QsIHJlY3Vyc2l2ZWx5LlxuICogSW50ZXJuYWwgb2JqZWN0cyBhbmQgYXJyYXlzIGFyZSBhbHNvIG9ic2VydmVkLlxuICovXG5cbnZhciBTeW5jT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTeW5jT2JqZWN0KGluaXRpYWxEYXRhKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU3luY09iamVjdCk7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX29ic2VydmVycyA9IFtdO1xuICAgIF90aGlzLl9maWx0ZXJzID0ge307XG5cbiAgICB0aGlzLl9kYXRhID0gaW5pdGlhbERhdGEgfHwge307XG5cbiAgICB0aGlzLl9pbnRlcm5hbE9ic2VydmUodGhpcy5fZGF0YSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTeW5jT2JqZWN0LCBbe1xuICAgIGtleTogJ29ic2VydmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvYnNlcnZlKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmluZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmQocGF0aCkge1xuICAgICAgdmFyIGxpc3QgPSBwYXRoLnNwbGl0KCcuJyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9maW5kV2l0aFNwbGl0KGxpc3QpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZpbmRCZWZvcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQmVmb3JlKHBhdGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHZhciBsaXN0ID0gcGF0aC5zcGxpdCgnLicpO1xuICAgICAgcmVzdWx0Lmxhc3QgPSBsaXN0LnBvcCgpO1xuICAgICAgcmVzdWx0Lm9iaiA9IHRoaXMuX2ZpbmRXaXRoU3BsaXQobGlzdCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2ZpbmRXaXRoU3BsaXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZFdpdGhTcGxpdChsaXN0KSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fZGF0YTtcbiAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgb2JqID0gb2JqW3ZhbHVlXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19pbnRlcm5hbE9ic2VydmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW50ZXJuYWxPYnNlcnZlKG9iamVjdCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihjaGFuZ2VzZXQpIHtcblxuICAgICAgICBjaGFuZ2VzZXQuZXZlcnkoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgIF90aGlzMi5fb25DaGFuZ2VzKGNoYW5nZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZGF0YSA9IE9iamVjdC5kZWVwT2JzZXJ2ZShvYmplY3QsIGhhbmRsZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19maXJlRXZlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlyZUV2ZW50KGV2ZW50KSB7XG4gICAgICB0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX29uQ2hhbmdlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoYW5nZXMoY2hhbmdlKSB7XG5cbiAgICAgIHZhciBvYmogPSBjaGFuZ2Uub2JqZWN0O1xuICAgICAgdmFyIG9ialR5cGUgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICBvYmpUeXBlID0gT2JqZWN0VHlwZS5PQkpFQ1Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgIG9ialR5cGUgPSBPYmplY3RUeXBlLkFSUkFZO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmllbGRTdHJpbmcgPSBjaGFuZ2Uua2V5cGF0aDtcblxuICAgICAgLy8gY29uc29sZS5sb2coJ0ZpZWxkOicsIGZpZWxkU3RyaW5nKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0eXBlOicsIGNoYW5nZS50eXBlKTtcblxuICAgICAgLy9sZXQgb2xkVmFsdWUgPSBjaGFuZ2Uub2xkVmFsdWU7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBvYmpbY2hhbmdlLm5hbWVdO1xuXG4gICAgICAvLyBjb25zb2xlLmluZm8oY2hhbmdlLnR5cGUgKyAnIHwgRmllbGQ6ICcgKyBmaWVsZFN0cmluZyArICcgfCBOZXcgVmFsdWU6JywgSlNPTi5zdHJpbmdpZnkobmV3VmFsdWUpLCBmaWVsZFN0cmluZy5pbmNsdWRlcygnbGVuZ3RoJykpO1xuXG4gICAgICBpZiAoY2hhbmdlLnR5cGUgPT09ICd1cGRhdGUnICYmICFmaWVsZFN0cmluZy5pbmNsdWRlcygnLmxlbmd0aCcpKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVFdmVudCh7XG4gICAgICAgICAgY1R5cGU6IENoYW5nZVR5cGUuVVBEQVRFLFxuICAgICAgICAgIG9UeXBlOiBvYmpUeXBlLFxuICAgICAgICAgIGZpZWxkOiBmaWVsZFN0cmluZyxcbiAgICAgICAgICBkYXRhOiBuZXdWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAnYWRkJykge1xuICAgICAgICB0aGlzLl9maXJlRXZlbnQoe1xuICAgICAgICAgIGNUeXBlOiBDaGFuZ2VUeXBlLkFERCxcbiAgICAgICAgICBvVHlwZTogb2JqVHlwZSxcbiAgICAgICAgICBmaWVsZDogZmllbGRTdHJpbmcsXG4gICAgICAgICAgZGF0YTogbmV3VmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KHtcbiAgICAgICAgICBjVHlwZTogQ2hhbmdlVHlwZS5SRU1PVkUsXG4gICAgICAgICAgb1R5cGU6IG9ialR5cGUsXG4gICAgICAgICAgZmllbGQ6IGZpZWxkU3RyaW5nXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RhdGEnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTeW5jT2JqZWN0O1xufSgpO1xuXG52YXIgQ2hhbmdlVHlwZSA9IGV4cG9ydHMuQ2hhbmdlVHlwZSA9IHsgVVBEQVRFOiAndXBkYXRlJywgQUREOiAnYWRkJywgUkVNT1ZFOiAncmVtb3ZlJyB9O1xudmFyIE9iamVjdFR5cGUgPSBleHBvcnRzLk9iamVjdFR5cGUgPSB7IE9CSkVDVDogJ29iamVjdCcsIEFSUkFZOiAnYXJyYXknIH07XG5leHBvcnRzLmRlZmF1bHQgPSBTeW5jT2JqZWN0O1xuXG4vKioqLyB9KSxcbi8qIDEyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTQyKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0O1xuXG4gICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTI2ICovLFxuLyogMTI3ICovLFxuLyogMTI4ICovLFxuLyogMTI5ICovLFxuLyogMTMwICovLFxuLyogMTMxICovLFxuLyogMTMyICovLFxuLyogMTMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcHJvbWlzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xuXG52YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7XG5cbnZhciBfYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDApO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX0RhdGFPYmplY3RSZXBvcnRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTtcblxudmFyIF9EYXRhT2JqZWN0UmVwb3J0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdFJlcG9ydGVyKTtcblxudmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7XG5cbnZhciBfRGF0YU9iamVjdE9ic2VydmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RPYnNlcnZlcik7XG5cbnZhciBfRGF0YVByb3Zpc2lvbmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzcpO1xuXG52YXIgX0RhdGFQcm92aXNpb25hbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhUHJvdmlzaW9uYWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiogVGhlIG1haW4gY2xhc3MgZm9yIHRoZSBzeW5jaGVyIHBhY2thZ2UuXG4qIFRoZSBTeW5jaGVyIGlzIGEgc2luZ2xldG9uIGNsYXNzIHBlciBIeXBlcnR5L1VSTCBhbmQgaXQgaXMgdGhlIG93bmVyIG9mIGFsbCBjcmVhdGVkIERhdGEgU3luYyBPYmplY3RzIGFjY29yZGluZyB0byB0aGUgUmVwb3J0ZXIgLSBPYnNlcnZlciBwYXR0ZXJuLlxuKiBNYWluIGZ1bmN0aW9uYWxpdHkgaXMgdG8gY3JlYXRlIHJlcG9ydGVycyBhbmQgdG8gc3Vic2NyaWJlIHRvIGV4aXN0aW5nIG9uZXMuXG4qL1xudmFyIFN5bmNoZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qIHByaXZhdGVcbiAgX293bmVyOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICAgX3N1YlVSTDogVVJMXG4gICBfcmVwb3J0ZXJzOiA8dXJsOiBEYXRhT2JqZWN0UmVwb3J0ZXI+XG4gIF9vYnNlcnZlcnM6IDx1cmw6IERhdGFPYmplY3RPYnNlcnZlcj5cbiAgX3Byb3Zpc2lvbmFsczogPHVybDogRGF0YVByb3Zpc2lvbmFsPlxuICAgLS0tLWV2ZW50IGhhbmRsZXJzLS0tLVxuICBfb25Ob3RpZmljYXRpb25IYW5kbGVyOiAoZXZlbnQpID0+IHZvaWRcbiAgX29uUmVzdW1lOiAoZXZlbnQpID0+IHZvaWRcbiAgKi9cblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IHRoZSBIeXBlcnR5IG93bmVyXG4gICogQHBhcmFtIHtIeXBlcnR5VVJMfSBvd25lciAtIEh5cGVydHkgVVJMIG93bmVyLiBBbiBVUkwgYWxsb2NhdGVkIGJ5IHRoZSBydW50aW1lIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgSHlwZXJ0eS5cbiAgKiBAcGFyYW0ge01pbmlCdXN9IGJ1cyAtIEFuIGluc3RhbmNlIG9mIHRoZSBNaW5pQnVzIHByb3ZpZGVkIGluIHRoZSBzYW5kYm94LiBXaGVuIGFuIG9iamVjdCAoUmVwb3J0ZXIgb3IgT2JzZXJ2ZWQpIGlzIGNyZWF0ZWQsIHRoZSBTeW5jaGVyTWFuYWdlciB3aWxsIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBNaW5pQnVzIHRvIHJlY2VpdmUvc2VuZCBNZXNzYWdlcyBvZiB0aGF0IG9iamVjdC5cbiAgKiBAcGFyYW0ge0pTT059IGNvbmZpZyAtIENvbmZpZ3VyYXRpb24gZGF0YS4gVGhlIG9ubHkgcmVxdWlyZWQgZmllbGQgZm9yIG5vdyBpcyB0aGUgcnVudGltZVVSTC5cbiAgKi9cbiAgZnVuY3Rpb24gU3luY2hlcihvd25lciwgYnVzLCBjb25maWcpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jaGVyKTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjtcbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuXG4gICAgX3RoaXMuX3N1YlVSTCA9IGNvbmZpZy5ydW50aW1lVVJMICsgJy9zbSc7XG5cbiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307XG4gICAgX3RoaXMuX29ic2VydmVycyA9IHt9O1xuICAgIF90aGlzLl9wcm92aXNpb25hbHMgPSB7fTtcblxuICAgIGJ1cy5hZGRMaXN0ZW5lcihvd25lciwgZnVuY3Rpb24gKG1zZykge1xuICAgICAgLy9pZ25vcmUgbXNnIHNlbnQgYnkgaGltc2VsZlxuICAgICAgaWYgKG1zZy5mcm9tICE9PSBvd25lcikge1xuICAgICAgICBjb25zb2xlLmluZm8oJ1tTeW5jaGVyXSBTeW5jaGVyLVJDVjogJywgbXNnKTtcbiAgICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2ZvcndhcmQnOlxuICAgICAgICAgICAgX3RoaXMuX29uRm9yd2FyZChtc2cpO2JyZWFrO1xuICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVDcmVhdGUobXNnKTticmVhaztcbiAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlRGVsZXRlKG1zZyk7YnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRoZSBvd25lciBvZiB0aGUgU3luY2hlciBhbmQgYWxsIGNyZWF0ZWQgcmVwb3J0ZXJzLlxuICAqIEB0eXBlIHtIeXBlcnR5VVJMfVxuICAqL1xuXG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3luY2hlciwgW3tcbiAgICBrZXk6ICdjcmVhdGUnLFxuXG5cbiAgICAvKipcbiAgICAqIFJlcXVlc3QgYSBEYXRhT2JqZWN0UmVwb3J0ZXIgY3JlYXRpb24uIFRoZSBVUkwgd2lsbCBiZSBiZSByZXF1ZXN0ZWQgYnkgdGhlIGFsbG9jYXRpb24gbWVjaGFuaXNtLlxuICAgICogQHBhcmFtICB7U2NoZW1hVVJMfSBzY2hlbWEgLSBIeXBlcnR5IENhdGFsb2d1ZSBVUkwgYWRkcmVzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBKU09OLVNjaGVtYSBkZXNjcmliaW5nIHRoZSBEYXRhIE9iamVjdCBzY2hlbWFcbiAgICAqIEBwYXJhbSAge0h5cGVydHlVUkxbXX0gb2JzZXJ2ZXJzIC0gTGlzdCBvZiBoeXBlcnRpZXMgdGhhdCBhcmUgcHJlLWF1dGhvcml6ZWQgZm9yIHN1YnNjcmlwdGlvblxuICAgICogQHBhcmFtICB7SlNPTn0gaW5pdGlhbERhdGEgLSBJbml0aWFsIGRhdGEgb2YgdGhlIHJlcG9ydGVyXG4gICAgKiBAcGFyYW0gIHtib29sZWFufSBzdG9yZSAtIChPcHRpb25hbCkgaWYgdHJ1ZSwgb2JqZWN0IHdpbGwgYmUgc3RvcmVkIGJ5IHRoZSBydW50aW1lXG4gICAgKiBAcGFyYW0gIHtib29sZWFufSBwMnAgLSAoT3B0aW9uYWwpIGlmIHRydWUsIGRhdGEgc3luY2hyb25pc2F0aW9uIHN0cmVhbSB3aWxsIHVzZSBwMnAgY29ubmVjdGlvbiBhcyBtdWNoIGFzIHBvc3NpYmxlXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlQm9keUlkZW50aXR5fSBpZGVudGl0eSAtIChvcHRpb25hbCkgaWRlbnRpdHkgZGF0YSB0byBiZSBhZGRlZCB0byBpZGVudGl0eSB0aGUgdXNlciByZXBvcnRlci4gVG8gYmUgdXNlZCBmb3IgbGVnYWN5IGlkZW50aXRpZXMuXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlPERhdGFPYmplY3RSZXBvcnRlcj59IFJldHVybiBQcm9taXNlIHRvIGEgbmV3IFJlcG9ydGVyLiBUaGUgcmVwb3J0ZXIgY2FuIGJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJ5IHRoZSBQRVBcbiAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoc2NoZW1hLCBvYnNlcnZlcnMsIGluaXRpYWxEYXRhKSB7XG4gICAgICB2YXIgc3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICAgICAgdmFyIHAycCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG4gICAgICB2YXIgaWRlbnRpdHkgPSBhcmd1bWVudHNbNV07XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgY3JpdGVyaWEgPSB7fTtcblxuICAgICAgY3JpdGVyaWEucDJwID0gcDJwO1xuICAgICAgY3JpdGVyaWEuc3RvcmUgPSBzdG9yZTtcbiAgICAgIGNyaXRlcmlhLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgIGNyaXRlcmlhLm9ic2VydmVycyA9IG9ic2VydmVycztcbiAgICAgIGNyaXRlcmlhLmluaXRpYWxEYXRhID0gaW5pdGlhbERhdGE7XG5cbiAgICAgIGlmIChpZGVudGl0eSkge1xuICAgICAgICBjcml0ZXJpYS5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdIC0gY3JlYXRlIFJlcG9ydGVyIC0gY3JpdGVyaWE6ICcsIGNyaXRlcmlhKTtcblxuICAgICAgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKGNyaXRlcmlhLCB7IHJlc3VtZTogZmFsc2UgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpcy5fY3JlYXRlKGNyaXRlcmlhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXN1bWVSZXBvcnRlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVSZXBvcnRlcnMoY3JpdGVyaWEpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdIC0gcmVzdW1lIFJlcG9ydGVyIC0gY3JpdGVyaWE6ICcsIGNyaXRlcmlhKTtcblxuICAgICAgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKGNyaXRlcmlhLCB7IHJlc3VtZTogdHJ1ZSB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLl9jcmVhdGUoY3JpdGVyaWEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVxdWVzdCBhIHN1YnNjcmlwdGlvbiB0byBhbiBleGlzdGVudCByZXBvcnRlciBvYmplY3QuXG4gICAgKiBAcGFyYW0ge1NjaGVtYVVSTH0gc2NoZW1hIC0gSHlwZXJ0eSBDYXRhbG9ndWUgVVJMIGFkZHJlc3MgdGhhdCBjYW4gYmUgdXNlZCB0byByZXRyaWV2ZSB0aGUgSlNPTi1TY2hlbWEgZGVzY3JpYmluZyB0aGUgRGF0YSBPYmplY3Qgc2NoZW1hXG4gICAgKiBAcGFyYW0ge09iamVjdFVSTH0gb2JqVVJMIC0gQWRkcmVzcyBvZiB0aGUgZXhpc3RlbnQgcmVwb3J0ZXIgb2JqZWN0IHRvIGJlIG9ic2VydmVkXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzdG9yZT1mYWxzZV0gLSBTYXZlIHRoZSBzdWJzY3JpcHRpb24gb24gdGhlIFN5bmNoZXIgTWFuYWdlciBmb3IgZnVydGhlciByZXN1bWUgKERlZmF1bHQgaXMgZmFsc2UpXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwMnA9ZmFsc2VdIC0gSW5mbyBhYm91dCBpZiBzaG91bGQgdXNlIHAycCBjb25uZWN0aW9uIChEZWZhdWx0IGlzIGZhbHNlKVxuICAgICogQHBhcmFtIHtCb29sZWFufSBbbXV0dWFsPXRydWVdIC0gSW5mbyBhYm91dCBpZiBtZXNzYWdlcyBvZiB0aGlzIG9iamVjdCBzaG91bGQgYmUgZW5jcnlwdGVkIChEZWZhdWx0IGlzIHRydWUpXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlQm9keUlkZW50aXR5fSBpZGVudGl0eSAtIChvcHRpb25hbCkgaWRlbnRpdHkgZGF0YSB0byBiZSBhZGRlZCB0byBpZGVudGl0eSB0aGUgdXNlciByZXBvcnRlci4gVG8gYmUgdXNlZCBmb3IgbGVnYWN5IGlkZW50aXRpZXMuXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlPERhdGFPYmplY3RPYnNlcnZlcj59IFJldHVybiBQcm9taXNlIHRvIGEgbmV3IG9ic2VydmVyLiBJdCdzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVwb3J0ZXIuXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3Vic2NyaWJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKHNjaGVtYSwgb2JqVVJMKSB7XG4gICAgICB2YXIgc3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgICAgdmFyIHAycCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG4gICAgICB2YXIgbXV0dWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB0cnVlO1xuICAgICAgdmFyIGlkZW50aXR5ID0gYXJndW1lbnRzWzVdO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGNyaXRlcmlhID0ge307XG5cbiAgICAgIGNyaXRlcmlhLnAycCA9IHAycDtcbiAgICAgIGNyaXRlcmlhLnN0b3JlID0gc3RvcmU7XG4gICAgICBjcml0ZXJpYS5zY2hlbWEgPSBzY2hlbWE7XG5cbiAgICAgIGNyaXRlcmlhLnJlc291cmNlID0gb2JqVVJMO1xuICAgICAgaWYgKGlkZW50aXR5KSB7XG4gICAgICAgIGNyaXRlcmlhLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICB9XG5cbiAgICAgIC8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgIGNyaXRlcmlhLm11dHVhbCA9IG11dHVhbDtcblxuICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyIC0gc3Vic2NyaWJlXSAtIHN1YnNjcmliZSBjcml0ZXJpYTogJywgY3JpdGVyaWEpO1xuXG4gICAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoY3JpdGVyaWEsIHsgcmVzdW1lOiBmYWxzZSB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLl9zdWJzY3JpYmUoY3JpdGVyaWEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVxdWVzdCBhIHN1YnNjcmlwdGlvbiB0byBhbiBleGlzdGVudCByZXBvcnRlciBvYmplY3QuXG4gICAgKiBAcGFyYW0ge2NyaXRlcmlhfSBjcml0ZXJpYSAtIEluZm9ybWF0aW9uIHRvIGRpc2NvdmVyeSB0aGUgb2JzZXJ2ZXIgb2JqZWN0XG4gICAgKiBAcmV0dXJuIHtQcm9taXNlPERhdGFPYmplY3RPYnNlcnZlcj59IFJldHVybiBQcm9taXNlIHRvIGEgbmV3IG9ic2VydmVyLiBJdCdzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVwb3J0ZXIuXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVzdW1lT2JzZXJ2ZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lT2JzZXJ2ZXJzKGNyaXRlcmlhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIF9jcml0ZXJpYSA9IGNyaXRlcmlhIHx8IHt9O1xuXG4gICAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoX2NyaXRlcmlhLCB7IHJlc3VtZTogdHJ1ZSB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzLl9zdWJzY3JpYmUoX2NyaXRlcmlhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJlcXVlc3QgYSByZWFkIGFjdGlvbiBvbiB0aGUgcmVwb3J0ZXIgb2JqZWN0XG4gICAgKiBAcGFyYW0ge09iamVjdFVSTH0gb2JqVVJMIC0gVVJMIG9mIHRoZSByZXBvcnRlciBvYmplY3QgdG8gYmUgcmVhZFxuICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSBSZXR1cm4gUHJvbWlzZSB0byBsYXN0IGF2YWlsYWJsZSBkYXRhIG9mIHRoZSByZXBvcnRlclxuICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKG9ialVSTCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCBkaXJlY3RseSB0byByZXBvcnRlciBvYmplY3QgKG1heWJlIHRoZXJlIGlzIG5vIGxpc3RlbmVyIGF2YWlsYWJsZSwgc28gaXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIE1lc3NhZ2VCdXMgLT4gcmVzb2x2ZSlcbiAgICAgIC8vd2lsbCByZWFjaCB0aGUgcmVtb3RlIG9iamVjdCBpbiBEYXRhT2JqZWN0UmVwb3J0ZXIgLT4gX29uUmVhZFxuICAgICAgdmFyIHJlYWRNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuX293bmVyLCB0bzogb2JqVVJMXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZWFkTXNnLCBmdW5jdGlvbiAocmVwbHkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygncmVhZC1yZXNwb25zZTogJywgcmVwbHkpO1xuICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgY3JlYXRlIGFuZCBkZWxldGUgZXZlbnRzIG9mIHJlbW92ZSBSZXBvcnRlciBvYmplY3RzLlxuICAgICogVGhpcyBpcyByZWxlYXRlZCB0byB0aGUgbWVzc2FnZW5zIHNlbnQgYnkgY3JlYXRlIHRvIHRoZSBvYnNlcnZlcnMgSHlwZXJ0eSBhcnJheS5cbiAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2tcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvbk5vdGlmaWNhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTm90aWZpY2F0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfY3JlYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZShjcml0ZXJpYSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXN1bWUgPSBjcml0ZXJpYS5yZXN1bWU7XG4gICAgICAgIHZhciBpbml0aWFsRGF0YSA9IGNyaXRlcmlhLmluaXRpYWxEYXRhIHx8IHt9O1xuICAgICAgICB2YXIgc2NoZW1hID0gdm9pZCAwO1xuXG4gICAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgdG8gdGhlIHJ1bnRpbWUgaW5zdGFuY2Ugb2YgU3luY2hlck1hbmFnZXIgLT4gX29uQ3JlYXRlXG4gICAgICAgIHZhciByZXF1ZXN0TXNnID0ge1xuICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5fb3duZXIsIHRvOiBfdGhpcy5fc3ViVVJMLFxuICAgICAgICAgIGJvZHk6IHsgcmVzdW1lOiByZXN1bWUgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV06ICcsIGNyaXRlcmlhLCByZXF1ZXN0TXNnKTtcblxuICAgICAgICByZXF1ZXN0TXNnLmJvZHkudmFsdWUgPSBpbml0aWFsRGF0YTtcbiAgICAgICAgcmVxdWVzdE1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyID0gX3RoaXMuX293bmVyO1xuXG4gICAgICAgIGlmIChjcml0ZXJpYS5zY2hlbWEpIHtcbiAgICAgICAgICBzY2hlbWEgPSBjcml0ZXJpYS5zY2hlbWE7XG4gICAgICAgICAgcmVxdWVzdE1zZy5ib2R5LnNjaGVtYSA9IGNyaXRlcmlhLnNjaGVtYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5wMnApIHJlcXVlc3RNc2cuYm9keS5wMnAgPSBjcml0ZXJpYS5wMnA7XG4gICAgICAgIGlmIChjcml0ZXJpYS5zdG9yZSkgcmVxdWVzdE1zZy5ib2R5LnN0b3JlID0gY3JpdGVyaWEuc3RvcmU7XG4gICAgICAgIGlmIChjcml0ZXJpYS5vYnNlcnZlcnMpIHJlcXVlc3RNc2cuYm9keS5hdXRob3Jpc2UgPSBjcml0ZXJpYS5vYnNlcnZlcnM7XG4gICAgICAgIGlmIChjcml0ZXJpYS5pZGVudGl0eSkgcmVxdWVzdE1zZy5ib2R5LmlkZW50aXR5ID0gY3JpdGVyaWEuaWRlbnRpdHk7XG5cbiAgICAgICAgaWYgKHJlc3VtZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSByZXN1bWUgbWVzc2FnZTogJywgcmVxdWVzdE1zZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyIC0gY3JlYXRlXSAtIGNyZWF0ZSBtZXNzYWdlOiAnLCByZXF1ZXN0TXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vcmVxdWVzdCBjcmVhdGUgdG8gdGhlIGFsbG9jYXRpb24gc3lzdGVtLiBDYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIFBvbGljeUVuZ2luZS5cbiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXF1ZXN0TXNnLCBmdW5jdGlvbiAocmVwbHkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdIC0gY3JlYXRlLXJlc3BvbnNlOiAnLCByZXBseSk7XG4gICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAvL3JlcG9ydGVyIGNyZWF0aW9uIGFjY2VwdGVkXG4gICAgICAgICAgICB2YXIgb2JqVVJMID0gcmVwbHkuYm9keS5yZXNvdXJjZTtcblxuICAgICAgICAgICAgaWYgKHJlc3VtZSkge1xuICAgICAgICAgICAgICBzY2hlbWEgPSByZXBseS5ib2R5LnNjaGVtYTtcbiAgICAgICAgICAgICAgaW5pdGlhbERhdGEgPSByZXBseS5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmV3T2JqID0gbmV3IF9EYXRhT2JqZWN0UmVwb3J0ZXIyLmRlZmF1bHQoX3RoaXMsIG9ialVSTCwgc2NoZW1hLCAnb24nLCBpbml0aWFsRGF0YSwgcmVwbHkuYm9keS5jaGlsZHJlblJlc291cmNlcyk7XG4gICAgICAgICAgICBfdGhpcy5fcmVwb3J0ZXJzW29ialVSTF0gPSBuZXdPYmo7XG5cbiAgICAgICAgICAgIHJlc29sdmUobmV3T2JqKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9yZXBvcnRlciBjcmVhdGlvbiByZWplY3RlZFxuICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zdWJzY3JpYmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3Vic2NyaWJlKGNyaXRlcmlhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkxvY2FsU3Vic2NyaWJlXG4gICAgICAgIHZhciBzdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IF90aGlzLl9zdWJVUkwsXG4gICAgICAgICAgYm9keToge31cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIeXBlcnR5IHJlcXVlc3QgdG8gYmUgYW4gT2JzZXJ2ZXJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9zcGVjcy9ibG9iL21hc3Rlci9tZXNzYWdlcy9kYXRhLXN5bmMtbWVzc2FnZXMubWQjaHlwZXJ0eS1yZXF1ZXN0LXRvLWJlLWFuLW9ic2VydmVyXG5cbiAgICAgICAgLy8gUmVzdW1lIFN1YnNjcmlwdGlvbnMgZm9yIHRoZSBzYW1lIEh5cGVydHkgVVJMXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvYmxvYi9tYXN0ZXIvbWVzc2FnZXMvZGF0YS1zeW5jLW1lc3NhZ2VzLm1kI3Jlc3VtZS1zdWJzY3JpcHRpb25zLWZvci10aGUtc2FtZS1oeXBlcnR5LXVybFxuXG4gICAgICAgIC8vIFJlc3VtZSBTdWJzY3JpcHRpb25zIGZvciBhIGNlcnRhaW4gdXNlciBhbmQgZGF0YSBzY2hlbWEgaW5kZXBlbmRlbnRseSBvZiB0aGUgSHlwZXJ0eSBVUkwuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvYmxvYi9tYXN0ZXIvbWVzc2FnZXMvZGF0YS1zeW5jLW1lc3NhZ2VzLm1kI3Jlc3VtZS1zdWJzY3JpcHRpb25zLWZvci1hLWNlcnRhaW4tdXNlci1hbmQtZGF0YS1zY2hlbWEtaW5kZXBlbmRlbnRseS1vZi10aGUtaHlwZXJ0eS11cmxcbiAgICAgICAgaWYgKGNyaXRlcmlhKSB7XG4gICAgICAgICAgaWYgKGNyaXRlcmlhLmhhc093blByb3BlcnR5KCdwMnAnKSkgc3Vic2NyaWJlTXNnLmJvZHkucDJwID0gY3JpdGVyaWEucDJwO1xuICAgICAgICAgIGlmIChjcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eSgnc3RvcmUnKSkgc3Vic2NyaWJlTXNnLmJvZHkuc3RvcmUgPSBjcml0ZXJpYS5zdG9yZTtcbiAgICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3duUHJvcGVydHkoJ3NjaGVtYScpKSBzdWJzY3JpYmVNc2cuYm9keS5zY2hlbWEgPSBjcml0ZXJpYS5zY2hlbWE7XG4gICAgICAgICAgaWYgKGNyaXRlcmlhLmhhc093blByb3BlcnR5KCdpZGVudGl0eScpKSBzdWJzY3JpYmVNc2cuYm9keS5pZGVudGl0eSA9IGNyaXRlcmlhLmlkZW50aXR5O1xuICAgICAgICAgIGlmIChjcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eSgncmVzb3VyY2UnKSkgc3Vic2NyaWJlTXNnLmJvZHkucmVzb3VyY2UgPSBjcml0ZXJpYS5yZXNvdXJjZTtcbiAgICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3duUHJvcGVydHkoJ2lkZW50aXR5JykpIHN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5ID0gY3JpdGVyaWEuaWRlbnRpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpYmVNc2cuYm9keS5yZXN1bWUgPSBjcml0ZXJpYS5yZXN1bWU7XG5cbiAgICAgICAgLy9UT0RPOiBGb3IgRnVydGhlciBTdHVkeVxuICAgICAgICB2YXIgbXV0dWFsQXV0aGVudGljYXRpb24gPSBjcml0ZXJpYS5tdXR1YWw7XG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eSgnbXV0dWFsJykpIHN1YnNjcmliZU1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uID0gbXV0dWFsQXV0aGVudGljYXRpb247XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyXSAtIHN1YnNjcmliZSBtZXNzYWdlOiAnLCBjcml0ZXJpYSwgc3Vic2NyaWJlTXNnKTtcblxuICAgICAgICAvL3JlcXVlc3Qgc3Vic2NyaXB0aW9uXG4gICAgICAgIC8vUHJvdmlzaW9uYWwgZGF0YSBpcyBhcHBsaWVkIHRvIHRoZSBEYXRhT2JqZWN0T2JzZXJ2ZXIgYWZ0ZXIgY29uZmlybWF0aW9uLiBPciBkaXNjYXJkZWQgaWYgdGhlcmUgaXMgbm8gY29uZmlybWF0aW9uLlxuICAgICAgICAvL2ZvciBtb3JlIGluZm8gc2VlIHRoZSBEYXRhUHJvdmlzaW9uYWwgY2xhc3MgZG9jdW1lbnRhdGlvbi5cbiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShzdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBzdWJzY3JpYmUtcmVzcG9uc2U6ICcsIHJlcGx5KTtcblxuICAgICAgICAgIHZhciBzY2hlbWEgPSByZXBseS5ib2R5LnNjaGVtYTtcbiAgICAgICAgICB2YXIgb2JqVVJMID0gcmVwbHkuYm9keS5yZXNvdXJjZTtcblxuICAgICAgICAgIHZhciBuZXdQcm92aXNpb25hbCA9IF90aGlzLl9wcm92aXNpb25hbHNbb2JqVVJMXTtcbiAgICAgICAgICBkZWxldGUgX3RoaXMuX3Byb3Zpc2lvbmFsc1tvYmpVUkxdO1xuICAgICAgICAgIGlmIChuZXdQcm92aXNpb25hbCkgbmV3UHJvdmlzaW9uYWwuX3JlbGVhc2VMaXN0ZW5lcnMoKTtcblxuICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPCAyMDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBuZXcgRGF0YVByb3Zpc2lvbmFsOiAnLCByZXBseS5ib2R5LmNoaWxkcmVuUmVzb3VyY2VzLCBvYmpVUkwpO1xuICAgICAgICAgICAgbmV3UHJvdmlzaW9uYWwgPSBuZXcgX0RhdGFQcm92aXNpb25hbDIuZGVmYXVsdChfdGhpcy5fb3duZXIsIG9ialVSTCwgX3RoaXMuX2J1cywgcmVwbHkuYm9keS5jaGlsZHJlblJlc291cmNlcyk7XG4gICAgICAgICAgICBfdGhpcy5fcHJvdmlzaW9uYWxzW29ialVSTF0gPSBuZXdQcm92aXNpb25hbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXJdIC0gbmV3IERhdGEgT2JqZWN0IE9ic2VydmVyOiAnLCByZXBseSwgX3RoaXMuX3Byb3Zpc2lvbmFscyk7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsRGF0YSA9IHJlcGx5LmJvZHkudmFsdWU7XG4gICAgICAgICAgICBpZiAoIWluaXRpYWxEYXRhLmhhc093blByb3BlcnR5KCdjaGlsZHJlbnMnKSkge1xuICAgICAgICAgICAgICBpbml0aWFsRGF0YS5jaGlsZHJlbnMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5pdGlhbERhdGEuaGFzT3duUHJvcGVydHkoJ2RhdGEnKSkge1xuICAgICAgICAgICAgICBpbml0aWFsRGF0YS5kYXRhID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vVE9ETzogbXV0dWFsQXV0aGVudGljYXRpb24gRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgICAgICAgIHZhciBuZXdPYmogPSBuZXcgX0RhdGFPYmplY3RPYnNlcnZlcjIuZGVmYXVsdChfdGhpcywgb2JqVVJMLCBzY2hlbWEsICdvbicsIGluaXRpYWxEYXRhLCBuZXdQcm92aXNpb25hbC5jaGlsZHJlbiwgcmVwbHkuYm9keS52ZXJzaW9uLCBtdXR1YWxBdXRoZW50aWNhdGlvbik7XG4gICAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF0gPSBuZXdPYmo7XG5cbiAgICAgICAgICAgIHJlc29sdmUobmV3T2JqKTtcbiAgICAgICAgICAgIG5ld1Byb3Zpc2lvbmFsLmFwcGx5KG5ld09iaik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIGxvY2FsIHJ1bnRpbWUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlXG5cbiAgfSwge1xuICAgIGtleTogJ19vbkZvcndhcmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Gb3J3YXJkKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHJlcG9ydGVyID0gX3RoaXMuX3JlcG9ydGVyc1ttc2cuYm9keS50b107XG4gICAgICByZXBvcnRlci5fb25Gb3J3YXJkKG1zZyk7XG4gICAgfVxuXG4gICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgU3luY2hlciAtPiBjcmVhdGUgKHRoaXMgaXMgYWN0dWFsbHkgYW4gaW52aXRhdGlvbiB0byBzdWJzY3JpYmUpXG5cbiAgfSwge1xuICAgIGtleTogJ19vblJlbW90ZUNyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZUNyZWF0ZShtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vcmVtb3ZlIFwiL3N1YnNjcmlwdGlvblwiIGZyb20gdGhlIFVSTFxuICAgICAgdmFyIHJlc291cmNlID0gbXNnLmZyb20uc2xpY2UoMCwgLTEzKTtcblxuICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICB0eXBlOiBtc2cudHlwZSxcbiAgICAgICAgZnJvbTogbXNnLmJvZHkuc291cmNlLFxuICAgICAgICB1cmw6IHJlc291cmNlLFxuICAgICAgICBzY2hlbWE6IG1zZy5ib2R5LnNjaGVtYSxcbiAgICAgICAgdmFsdWU6IG1zZy5ib2R5LnZhbHVlLFxuICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksXG5cbiAgICAgICAgYWNrOiBmdW5jdGlvbiBhY2sodHlwZSkge1xuICAgICAgICAgIHZhciBsVHlwZSA9IDIwMDtcbiAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgbFR5cGUgPSB0eXBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vc2VuZCBhY2sgcmVzcG9uc2UgbWVzc2FnZVxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IGxUeXBlIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbU3luY2hlcl0gTk9USUZJQ0FUSU9OLUVWRU5UOiAnLCBldmVudCk7XG4gICAgICAgIF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGEgcmVtb3RlIERhdGFPYmplY3RSZXBvcnRlciAtPiBkZWxldGVcblxuICB9LCB7XG4gICAga2V5OiAnX29uUmVtb3RlRGVsZXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVtb3RlRGVsZXRlKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgLy9yZW1vdmUgXCIvc3Vic2NyaXB0aW9uXCIgZnJvbSB0aGUgVVJMXG4gICAgICB2YXIgcmVzb3VyY2UgPSBtc2cuYm9keS5yZXNvdXJjZTtcblxuICAgICAgdmFyIG9iamVjdCA9IF90aGlzLl9vYnNlcnZlcnNbcmVzb3VyY2VdO1xuICAgICAgaWYgKG9iamVjdCkge1xuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgdHlwZTogbXNnLnR5cGUsXG4gICAgICAgICAgdXJsOiByZXNvdXJjZSxcbiAgICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksXG5cbiAgICAgICAgICBhY2s6IGZ1bmN0aW9uIGFjayh0eXBlKSB7XG4gICAgICAgICAgICB2YXIgbFR5cGUgPSAyMDA7XG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICBsVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vVE9ETzogYW55IG90aGVyIGRpZmZlcmVudCBvcHRpb25zIGZvciB0aGUgcmVsZWFzZSBwcm9jZXNzLCBsaWtlIGFjY2VwdCBidXQgbm9yIHJlbGVhc2UgbG9jYWw/XG4gICAgICAgICAgICBpZiAobFR5cGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICBvYmplY3QuZGVsZXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc2VuZCBhY2sgcmVzcG9uc2UgbWVzc2FnZVxuICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IGxUeXBlLCBzb3VyY2U6IF90aGlzLl9vd25lciB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnTk9USUZJQ0FUSU9OLUVWRU5UOiAnLCBldmVudCk7XG4gICAgICAgICAgX3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgIGJvZHk6IHsgY29kZTogNDA0LCBzb3VyY2U6IF90aGlzLl9vd25lciB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ293bmVyJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vd25lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEFsbCBvd25lZCByZXBvcnRlcnMsIHRoZSBvbmVzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IGEgY3JlYXRlXG4gICAgKiBAdHlwZSB7T2JqZWN0PFVSTCwgRGF0YU9iamVjdFJlcG9ydGVyPn1cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBvcnRlcnMnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlcG9ydGVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEFsbCBvd25lZCBvYnNlcnZlcnMsIHRoZSBvbmVzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IGEgbG9jYWwgc3Vic2NyaXB0aW9uXG4gICAgKiBAdHlwZSB7T2JqZWN0PFVSTCwgRGF0YU9iamVjdE9ic2VydmVyPn1cbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvYnNlcnZlcnMnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29ic2VydmVycztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN5bmNoZXI7XG59KCk7IC8qKlxuICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4gICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4gICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4gICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4gICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbiAgICAgKlxuICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAqXG4gICAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgKlxuICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAqKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gU3luY2hlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9KSxcbi8qIDEzNCAqLyxcbi8qIDEzNSAqLyxcbi8qIDEzNiAqLyxcbi8qIDEzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjb2xsZWN0aW5nIGRlbHRhIGNoYW5nZXMgaW4gcmVtb3RlIG9iamVjdHMsIGJlZm9yZSB0aGUgcmVzcG9uc2Ugb2Ygc3Vic2NyaXB0aW9uIHJlYWNoIHRoZSBvYnNlcnZlci5cbiAqIEl0J3MgdXNlZCBpbiBTeW5jaGVyIC0+IHN1YnNjcmliZS4gVGhlIGZsb3cgaXMgZGVmaW5lZCBhczpcbiAqIDEuIChvYnNlcnZlcikgLS1zdWJzY3JpYmUtLT4gKHJlcG9ydGVyKVxuICogMi4gKG9ic2VydmVyKSA8LS1kZWx0YSB1cGRhdGVzLS0gKHJlcG9ydGVyKVxuICogMy4gKG9ic2VydmVyKSA8LS1zdWJzY3JpYmUgcmVzcG9uc2UtLSAocmVwb3J0ZXIpXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhlcmUgY291bGQgYmUgZGVsdGEgdXBkYXRlcyB0cmFuc2ZlcnJlZCBiZWZvcmUgdGhlIHN1YnNjcmlwdGlvbiBjb25maXJtYXRpb24uXG4gKiBTaW5jZSB0aGVyZSBpcyBubyBEYXRhT2JqZWN0T2JzZXJ2ZXIgYmVmb3JlIHRoZSB1YnNjcmlwdGlvbiBjb25maXJtYXRpb24sIHRoZXJlIHNob3VsZCBiZSBzb21lIG90aGVyIG9iamVjdCBjb2xsZWN0aW5nIHRoZSB1cGRhdGVzLlxuICogUHJvdmlzaW9uYWwgZGF0YSBpcyBhcHBsaWVkIHRvIHRoZSBEYXRhT2JqZWN0T2JzZXJ2ZXIgYWZ0ZXIgY29uZmlybWF0aW9uLiBPciBkaXNjYXJkZWQgaWYgdGhlcmUgaXMgbm8gY29uZmlybWF0aW9uLlxuICovXG52YXIgRGF0YVByb3Zpc2lvbmFsID0gZnVuY3Rpb24gKCkge1xuICAvKiBwcml2YXRlXG4gIF9jaGlsZHJlbkxpc3RlbmVyczogW01zZ0xpc3RlbmVyXVxuICBfbGlzdGVuZXI6IE1zZ0xpc3RlbmVyXG4gICBfY2hhbmdlczogW11cbiAgKi9cblxuICBmdW5jdGlvbiBEYXRhUHJvdmlzaW9uYWwob3duZXIsIHVybCwgYnVzLCBjaGlsZHJlbikge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFQcm92aXNpb25hbCk7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX293bmVyID0gb3duZXI7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuICAgIF90aGlzLl9jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXG4gICAgX3RoaXMuX2NoYW5nZXMgPSBbXTtcbiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFQcm92aXNpb25hbCwgW3tcbiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBfdGhpcy5fbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFQcm92aXNpb25hbC0nICsgX3RoaXMuX3VybCArICctUkNWOiAnLCBtc2cpO1xuICAgICAgICBfdGhpcy5fY2hhbmdlcy5wdXNoKG1zZyk7XG4gICAgICB9KTtcblxuICAgICAgLypcbiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdO1xuICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbikge1xuICAgICAgICBsZXQgY2hpbGRCYXNlVVJMID0gdXJsICsgJy9jaGlsZHJlbi8nO1xuICAgICAgICBfdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGRVUkwgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDtcbiAgICAgICAgICBsZXQgbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAvL2lnbm9yZSBtc2cgc2VudCBieSBoaW1zZWxmXG4gICAgICAgICAgICBpZiAobXNnLmZyb20gIT09IG93bmVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9Ki9cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgX3RoaXMuX2xpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgICAvKl90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICBsaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIH0pOyovXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXBwbHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseShvYnNlcnZlcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIF90aGlzLl9jaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICBvYnNlcnZlci5fY2hhbmdlT2JqZWN0KG9ic2VydmVyLl9zeW5jT2JqLCBjaGFuZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2hpbGRyZW4nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRGF0YVByb3Zpc2lvbmFsO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRhUHJvdmlzaW9uYWw7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG4vKiAxMzggKi8sXG4vKiAxMzkgKi8sXG4vKiAxNDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NyksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSksXG4vKiAxNDEgKi8sXG4vKiAxNDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OSksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuLyoqKi8gfSksXG4vKiAxNDMgKi8sXG4vKiAxNDQgKi8sXG4vKiAxNDUgKi8sXG4vKiAxNDYgKi8sXG4vKiAxNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNTMpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLk9iamVjdC5hc3NpZ247XG5cbi8qKiovIH0pLFxuLyogMTQ4ICovLFxuLyogMTQ5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTU1KTtcbnZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpXG4gICwgZ09QUyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KVxuICAsIHBJRSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSlcbiAgLCB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG4gICwgSU9iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IF9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7XG4gIHZhciBBID0ge31cbiAgICAsIEIgPSB7fVxuICAgICwgUyA9IFN5bWJvbCgpXG4gICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KVxuICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCA9IDFcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmZcbiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjtcbiAgd2hpbGUoYUxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pXG4gICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuXG4vKioqLyB9KSxcbi8qIDE1MSAqLyxcbi8qIDE1MiAqLyxcbi8qIDE1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IF9fd2VicGFja19yZXF1aXJlX18oMTUwKX0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NCAqLyxcbi8qIDE1NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpLmY7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNDUpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNTYgKi8sXG4vKiAxNTcgKi8sXG4vKiAxNTggKi8sXG4vKiAxNTkgKi8sXG4vKiAxNjAgKi8sXG4vKiAxNjEgKi8sXG4vKiAxNjIgKi8sXG4vKiAxNjMgKi8sXG4vKiAxNjQgKi8sXG4vKiAxNjUgKi8sXG4vKiAxNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGF0YU9iamVjdE9ic2VydmVyID0gZXhwb3J0cy5EYXRhT2JqZWN0UmVwb3J0ZXIgPSBleHBvcnRzLlN5bmNoZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfU3luY2hlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTMzKTtcblxudmFyIF9TeW5jaGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N5bmNoZXIpO1xuXG52YXIgX0RhdGFPYmplY3RSZXBvcnRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTtcblxudmFyIF9EYXRhT2JqZWN0UmVwb3J0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdFJlcG9ydGVyKTtcblxudmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7XG5cbnZhciBfRGF0YU9iamVjdE9ic2VydmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RPYnNlcnZlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuU3luY2hlciA9IF9TeW5jaGVyMi5kZWZhdWx0O1xuZXhwb3J0cy5EYXRhT2JqZWN0UmVwb3J0ZXIgPSBfRGF0YU9iamVjdFJlcG9ydGVyMi5kZWZhdWx0O1xuZXhwb3J0cy5EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBfRGF0YU9iamVjdE9ic2VydmVyMi5kZWZhdWx0O1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZkMlZpY0dGamF5OTFibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dVB6VmpZVFlpTENKM1pXSndZV05yT2k4dkwzZGxZbkJoWTJzdlltOXZkSE4wY21Gd0lHUXlOV1E1WldGaU0yUmxZekpoTXpObVlXWmlQMlZsTkdNaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTI5eVpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOW5iRzlpWVd3dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpHVnpZM0pwY0hSdmNuTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkMnR6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFrY0M1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aGJpMXZZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYTXRiMkpxWldOMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaHBaR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJzdWFuTS9NakZoWmlJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsZUhCdmNuUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZabUZwYkhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFHRnpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFdsdlltcGxZM1F1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTNSNExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzQnliM0JsY25SNUxXUmxjMk11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNtRjBiM0p6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJSdmJTMWpjbVZoZEdVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZUzFtZFc1amRHbHZiaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYjJZdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRjSEpwYldsMGFYWmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1ZwWkM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5a1pXWnBibVZrTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsbE9DMWtiMjB0WkdWbWFXNWxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMnhwWW5KaGNua3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xXdGxlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJuUmxaMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJWdWRXMHRZblZuTFd0bGVYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFc5aWFtVmpkQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMmx1YUdWeWFYUnpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WTNKbFlYUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY2kxa1pXWnBibVV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFhCcFpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOW9kRzFzTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuY0c4dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExYTmhjQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl5WldSbFptbHVaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxc1pXNW5kR2d1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZDJ0ekxXUmxabWx1WlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5M2EzTXRaWGgwTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmFuTnZiaTl6ZEhKcGJtZHBabmt1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTJ4aGMzTnZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwYjJKcVpXTjBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5iM0JrTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNSNWNHVnZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVhKeVlYa3RhVzVqYkhWa1pYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY2kxamNtVmhkR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMXpkR1Z3TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFrY0hNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHNHVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM1J5YVc1bkxXRjBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1JoYzJzdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFYUmxjbUYwYjNJdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMnRsZVhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12Y0hKdmJXbHpaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl0WlhSaExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlkyOXlaUzVuWlhRdGFYUmxjbUYwYjNJdGJXVjBhRzlrTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOWpjbVZoZEdVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMM05sZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMzbHRZbTlzTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMM041YldKdmJDOXBkR1Z5WVhSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZM0psWVhSbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXJaWGx6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZjM2x0WW05c0wybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5aGJpMXBibk4wWVc1alpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWxiblZ0TFd0bGVYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZabTl5TFc5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHVkbTlyWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MWhjbkpoZVMxcGRHVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmx6TFdGeWNtRjVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhJdFkyRnNiQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwZEdWeUxXUmxkR1ZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5clpYbHZaaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl0YVdOeWIzUmhjMnN1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0c0dFpYaDBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM0psWkdWbWFXNWxMV0ZzYkM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5elpYUXRjSEp2ZEc4dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyVjBMWE53WldOcFpYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM0JsWTJsbGN5MWpiMjV6ZEhKMVkzUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WTNKbFlYUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVyWlhsekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbkJ5YjIxcGMyVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YzNsdFltOXNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzVoYzNsdVl5MXBkR1Z5WVhSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3ViMkp6WlhKMllXSnNaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmRYUnBiSE12ZFhScGJITXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTl3Y205NGVTMXZZbk5sY25abEwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OXplVzVqYUdWeUwwUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzNsdVkyaGxjaTlFWVhSaFQySnFaV04wVW1Wd2IzSjBaWEl1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjVibU5vWlhJdlJHRjBZVTlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzNsdVkyaGxjaTlFWVhSaFQySnFaV04wUTJocGJHUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNONWJtTm9aWEl2VUhKdmVIbFBZbXBsWTNRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WjJWMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6ZVc1amFHVnlMMU41Ym1Ob1pYSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNONWJtTm9aWEl2UkdGMFlWQnliM1pwYzJsdmJtRnNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5aGMzTnBaMjR1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZWE56YVdkdUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXRnpjMmxuYmk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVlYTnphV2R1TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNJdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMU41Ym1Ob1pYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVpHbDJhV1JsVlZKTUlpd2laR2wyYVdSbFJXMWhhV3dpTENKbGJYQjBlVTlpYW1WamRDSXNJbVJsWlhCRGJHOXVaU0lzSW1kbGRGVnpaWEpWVWt4R2NtOXRSVzFoYVd3aUxDSm5aWFJWYzJWeVJXMWhhV3hHY205dFZWSk1JaXdpWTI5dWRtVnlkRlJ2VlhObGNsVlNUQ0lzSW5WeWJDSXNJa1Z5Y205eUlpd2ljbVZqZFhKelpTSXNJblpoYkhWbElpd2ljbVZuWlhnaUxDSnpkV0p6ZENJc0luQmhjblJ6SWl3aWNtVndiR0ZqWlNJc0luTndiR2wwSWl3aWFXNWpiSFZrWlhNaUxDSnlaWE4xYkhRaUxDSjBlWEJsSWl3aVpHOXRZV2x1SWl3aWFXUmxiblJwZEhraUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSnpZMmhsYldVaUxDSnpkV0p6ZEhJaUxDSnBibVJsZUU5bUlpd2laVzFoYVd3aUxDSnBibVJsZUU5bVFYUWlMQ0oxYzJWeWJtRnRaU0lzSW5OMVluTjBjbWx1WnlJc0lteGxibWQwYUNJc0ltOWlhbVZqZENJc0ltOWlhaUlzSWtwVFQwNGlMQ0p3WVhKelpTSXNJblZ6WlhKRmJXRnBiQ0lzSW5WelpYSlZVa3dpTENKcFpHVnVkR2xtYVdWeUlpd2laR2wyYVdSbFpGVlNUQ0lzSWtacGJIUmxjbFI1Y0dVaUxDSkJUbGtpTENKVFZFRlNWQ0lzSWtWWVFVTlVJaXdpUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SWl3aWMzbHVZMmhsY2lJc0luTmphR1Z0WVNJc0ltbHVhWFJwWVd4VGRHRjBkWE1pTENKcGJtbDBhV0ZzUkdGMFlTSXNJbU5vYVd4a2NtVnVjeUlzSW1sdWFYUnBZV3hXWlhKemFXOXVJaXdpYlhWMGRXRnNJaXdpWkdGMFlTSXNJbDkwYUdseklpd2lYM1psY25OcGIyNGlMQ0pmWm1sc2RHVnljeUlzSWw5emVXNWpUMkpxSWl3aWIySnpaWEoyWlNJc0ltVjJaVzUwSWl3aVgyOXVSbWxzZEdWeUlpd2labTl5UldGamFDSXNJbU5vYVd4a1NXUWlMQ0pqYUdsc1pFUmhkR0VpTENKZlkyaHBiR1J5Wlc1UFltcGxZM1J6SWl3aVgyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKeklpd2lYMk5vWVc1blpVeHBjM1JsYm1WeUlpd2lYMkoxY3lJc0ltRmtaRXhwYzNSbGJtVnlJaXdpWDNWeWJDSXNJbTF6WnlJc0lteHZaeUlzSWw5amFHRnVaMlZQWW1wbFkzUWlMQ0p5WlcxdmRtVWlMQ0pmY21Wc1pXRnpaVXhwYzNSbGJtVnljeUlzSWw5emVXNWphR1Z5SWl3aVgyOWljMlZ5ZG1WeWN5SXNJblZ1VTNWaWMyTnlhV0psVFhObklpd2labkp2YlNJc0lsOXZkMjVsY2lJc0luUnZJaXdpWDNOMVlsVlNUQ0lzSW1KdlpIa2lMQ0p5WlhOdmRYSmpaU0lzSW5CdmMzUk5aWE56WVdkbElpd2ljbVZ3YkhraUxDSmpiMlJsSWl3aVptbHNkR1Z5SWl3aVkyRnNiR0poWTJzaUxDSnJaWGtpTENKbWFXeDBaWEpQWW1vaUxDSnBaSGdpTENKbWFXVnNaQ0lzSWtSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2lJc0lsOXpkV0p6WTNKcGNIUnBiMjV6SWl3aVgyOXVRMmhoYm1kbElpd2lYMjlpYW1WamRFeHBjM1JsYm1WeUlpd2lYMjl1VW1WemNHOXVjMlVpTENKZmIyNVNaV0ZrSWl3aWIySnpaWEoyWlhKeklpd2lhVzUyYVhSbFRYTm5JaXdpY21WemRXMWxJaXdpWDNOamFHVnRZU0lzSW1GMWRHaHZjbWx6WlNJc0ltUmxiR1YwWlUxelp5SXNJbDl5WlhCdmNuUmxjbk1pTENKZmIyNVRkV0p6WTNKcGNIUnBiMjVJWVc1a2JHVnlJaXdpWDI5dVVtVnpjRzl1YzJWSVlXNWtiR1Z5SWl3aVgyOXVVbVZoWkVoaGJtUnNaWElpTENKZmIyNVRkV0p6WTNKcFltVWlMQ0pmYjI1VmJsTjFZbk5qY21saVpTSXNJbWg1Y0dWeWRIbFZjbXdpTENKaFkyTmxjSFFpTENKemRXSWlMQ0p6ZEdGMGRYTWlMQ0pqYUdsc1pISmxibFpoYkhWbGN5SXNJbk5sYm1STmMyY2lMQ0pwWkNJc0luWmxjbk5wYjI0aUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0ltMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVJaXdpWDIxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlpd2ljbVZxWldOMElpd2ljbVZoYzI5dUlpd2laR1Z6WXlJc0lrUmhkR0ZQWW1wbFkzUWlMQ0pmYzNSaGRIVnpJaXdpWDJOb2FXeGtjbVZ1Y3lJc0lsOWphR2xzWkVsa0lpd2lYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpJaXdpWTJocGJHUkNZWE5sVlZKTUlpd2lZMmhwYkdRaUxDSmphR2xzWkZWU1RDSXNJbXhwYzNSbGJtVnlJaXdpWDI5dVEyaHBiR1JEY21WaGRHVWlMQ0pmWTJoaGJtZGxRMmhwYkdSeVpXNGlMQ0p3ZFhOb0lpd2lZMmhwYkdSeVpXNGlMQ0p0YzJkRGFHbHNaRWxrSWl3aWJYTm5RMmhwYkdSUVlYUm9JaXdpY21WeGRXVnpkRTF6WnlJc0luSmxjMjlzZG1VaUxDSnRjMmRKWkNJc0ltNWxkME5vYVd4a0lpd2liMjVEYUdGdVoyVWlMQ0p3WVhSb0lpd2lYMjl1UVdSa1EyaHBiR1J5Wlc1SVlXNWtiR1Z5SWl3aWMyVjBWR2x0Wlc5MWRDSXNJbk52ZFhKalpTSXNJbU5vYVd4a1NXNW1ieUlzSW1Ob1lXNW5aVTF6WnlJc0ltRjBkSEpwWW5WMFpTSXNJbTlVZVhCbElpd2lUMEpLUlVOVUlpd2lZMVI1Y0dVaUxDSlNSVTFQVmtVaUxDSmhkSFJ5YVdKMWRHVlVlWEJsSWl3aVZWQkVRVlJGSWl3aWIzQmxjbUYwYVc5dUlpd2ljM2x1WTA5aWFpSXNJbVpwYm1SU1pYTjFiSFFpTENKbWFXNWtRbVZtYjNKbElpd2lRVkpTUVZraUxDSkJSRVFpTENKaGNuSWlMQ0pwYm1SbGVDSXNJbXhoYzNRaUxDSkJjbkpoZVNJc0luQnliM1J2ZEhsd1pTSXNJbk53YkdsalpTSXNJbUZ3Y0d4NUlpd2lZMjl1WTJGMElpd2lSR0YwWVU5aWFtVmpkRU5vYVd4a0lpd2ljR0Z5Wlc1MElpd2liM2R1WlhJaUxDSmZjR0Z5Wlc1MElpd2lYMjF6WjBsa0lpd2lYMnhwYzNSbGJtVnlJaXdpWDJOb2FXeGtjbVZ1SWl3aWIySnFaV04wVkhsd1pTSXNJbE41Ym1OUFltcGxZM1FpTENKZlpHRjBZU0lzSWw5cGJuUmxjbTVoYkU5aWMyVnlkbVVpTENKc2FYTjBJaXdpWDJacGJtUlhhWFJvVTNCc2FYUWlMQ0p3YjNBaUxDSm9ZVzVrYkdWeUlpd2lZMmhoYm1kbGMyVjBJaXdpWlhabGNua2lMQ0pqYUdGdVoyVWlMQ0pmYjI1RGFHRnVaMlZ6SWl3aVQySnFaV04wSWl3aVpHVmxjRTlpYzJWeWRtVWlMQ0p2WW1wVWVYQmxJaXdpWTI5dWMzUnlkV04wYjNJaUxDSlBZbXBsWTNSVWVYQmxJaXdpWm1sbGJHUlRkSEpwYm1jaUxDSnJaWGx3WVhSb0lpd2libVYzVm1Gc2RXVWlMQ0p1WVcxbElpd2lYMlpwY21WRmRtVnVkQ0lzSWtOb1lXNW5aVlI1Y0dVaUxDSlRlVzVqYUdWeUlpd2lZblZ6SWl3aVkyOXVabWxuSWl3aWNuVnVkR2x0WlZWU1RDSXNJbDl3Y205MmFYTnBiMjVoYkhNaUxDSnBibVp2SWl3aVgyOXVSbTl5ZDJGeVpDSXNJbDl2YmxKbGJXOTBaVU55WldGMFpTSXNJbDl2YmxKbGJXOTBaVVJsYkdWMFpTSXNJbk4wYjNKbElpd2ljREp3SWl3aVkzSnBkR1Z5YVdFaUxDSmZZM0psWVhSbElpd2liMkpxVlZKTUlpd2lYM04xWW5OamNtbGlaU0lzSWw5amNtbDBaWEpwWVNJc0luSmxZV1JOYzJjaUxDSmZiMjVPYjNScFptbGpZWFJwYjI1SVlXNWtiR1Z5SWl3aWNtVndiM0owWlhJaUxDSnVaWGRQWW1vaUxDSmphR2xzWkhKbGJsSmxjMjkxY21ObGN5SXNJbk4xWW5OamNtbGlaVTF6WnlJc0ltNWxkMUJ5YjNacGMybHZibUZzSWl3aWMyeHBZMlVpTENKaFkyc2lMQ0pzVkhsd1pTSXNJbVJsYkdWMFpTSXNJa1JoZEdGUWNtOTJhWE5wYjI1aGJDSXNJbDlqYUdGdVoyVnpJaXdpYjJKelpYSjJaWElpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTd3lRa0ZCTWtJN1FVRkRNMElzUTBGQlF6dEJRVU5FTEU4N1FVTldRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h0UkVGQk1rTXNZMEZCWXpzN1FVRkZla1E3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h0UTBGQk1rSXNNRUpCUVRCQ0xFVkJRVVU3UVVGRGRrUXNlVU5CUVdsRExHVkJRV1U3UVVGRGFFUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzT0VSQlFYTkVMQ3RFUVVFclJEczdRVUZGY2tnN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3pzN096czdPMEZEYUVWQkxEWkNRVUUyUWp0QlFVTTNRaXh4UTBGQmNVTXNaME03T3pzN096dEJRMFJ5UXp0QlFVTkJPMEZCUTBFN1FVRkRRU3gxUTBGQmRVTXNaME03T3pzN096dEJRMGgyUXp0QlFVTkJPMEZCUTBFc2FVTkJRV2xETEZGQlFWRXNaMEpCUVdkQ0xGVkJRVlVzUjBGQlJ6dEJRVU4wUlN4RFFVRkRMRVU3T3pzN096dEJRMGhFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSFZDT3pzN096czdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSExGVkJRVlU3UVVGRFlqdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMHBCTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN1FVRkRSRHRCUVVOQk8wRkJRMEVzUlRzN096czdPenRCUTFCQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEcxRlFVRnRSVHRCUVVOdVJUdEJRVU5CTEhGR1FVRnhSanRCUVVOeVJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFc0swTkJRU3RETzBGQlF5OURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdOQlFXTTdRVUZEWkN4alFVRmpPMEZCUTJRc1kwRkJZenRCUVVOa0xHTkJRV003UVVGRFpDeGxRVUZsTzBGQlEyWXNaVUZCWlR0QlFVTm1MR1ZCUVdVN1FVRkRaaXhuUWtGQlowSTdRVUZEYUVJc2VVSTdPenM3T3pzN1FVTTFSRUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRXNjME5CUVhORExIVkRRVUYxUXl4blFrRkJaMEk3TzBGQlJUZEdPMEZCUTBFN1FVRkRRU3h0UWtGQmJVSXNhMEpCUVd0Q08wRkJRM0pETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRExFYzdPenM3T3p0QlF6RkNSRHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMDVCTEhWQ1FVRjFRanRCUVVOMlFqdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRia0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEVUVFc2IwSTdPenM3T3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFNFRXNhVUpCUVdsQ096dEJRVVZxUWp0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMWhCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHdEZRVUZyUlN3clFrRkJLMEk3UVVGRGFrY3NSVHM3T3pzN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMHBCTzBGQlEwRXNjVVZCUVhORkxHZENRVUZuUWl4VlFVRlZMRWRCUVVjN1FVRkRia2NzUTBGQlF5eEZPenM3T3pzN1FVTkdSQ3h6UWpzN096czdPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZPenM3T3pzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVHM3T3pzN08wRkRTRUU3UVVGRFFUdEJRVU5CTEcxRVFVRnRSRHRCUVVOdVJEdEJRVU5CTEhWRFFVRjFRenRCUVVOMlF5eEZPenM3T3pzN1FVTk1RU3hyUWtGQmEwSXNkMFE3T3pzN096dEJRMEZzUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwcEJMR3RDUVVGclFpeDNSRHM3T3pzN096dEJRMEZzUWpzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFTeHpRMEZCYzBNc2RVTkJRWFZETEdkQ1FVRm5RanM3UVVGRk4wWTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFTeEZPenM3T3pzN08wRkRhRU5CT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJMSE5EUVVGelF5eDFRMEZCZFVNc1owSkJRV2RDT3p0QlFVVTNSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRVU3T3pzN096dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdzJRa0ZCTmtJN1FVRkROMEk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3MlFrRkJOa0k3UVVGRE4wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk96czdPenM3TzBGRGVFTkJPMEZCUTBFN1FVRkRRU3h2UlVGQmRVVXNlVU5CUVRCRExFVTdPenM3T3pzN1FVTkdha2c3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxEUkNRVUUwUWl4aFFVRmhPenRCUVVWNlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2QwTkJRWGRETEc5RFFVRnZRenRCUVVNMVJTdzBRMEZCTkVNc2IwTkJRVzlETzBGQlEyaEdMRXRCUVVzc01rSkJRVEpDTEc5RFFVRnZRenRCUVVOd1JUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNaMEpCUVdkQ0xHMUNRVUZ0UWp0QlFVTnVRenRCUVVOQk8wRkJRMEVzYVVOQlFXbERMREpDUVVFeVFqdEJRVU0xUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRGNrVkJMR3RDUVVGclFpeDNSRHM3T3pzN08wRkRRV3hDTEdOQlFXTXNjMEk3T3pzN096dEJRMEZrTERaRk96czdPenM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnc1JUczdPenM3TzBGRFdrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc09FSkJRVGhDTzBGQlF6bENPMEZCUTBFN1FVRkRRU3h0UkVGQmJVUXNUMEZCVHl4RlFVRkZPMEZCUXpWRUxFVTdPenM3T3p0QlExUkJMSGRET3pzN096czdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxESkVRVUV5UkR0QlFVTXpSQ3hGT3pzN096czdRVU5NUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTd3dSRUZCTUVRc2MwSkJRWE5DTzBGQlEyaEdMR2RHUVVGblJpeHpRa0ZCYzBJN1FVRkRkRWNzUlRzN096czdPMEZEVWtFc2JVTTdPenM3T3pzN1FVTkJRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN3MlFrRkJOa0k3UVVGRE4wSXNZMEZCWXp0QlFVTmtPMEZCUTBFc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTEN0Q1FVRXJRanRCUVVNdlFqdEJRVU5CTzBGQlEwRXNWVUZCVlR0QlFVTldMRU5CUVVNc1JUczdPenM3TzBGRGFFSkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNkMGRCUVhkSExFOUJRVTg3UVVGREwwYzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTTdPenM3T3pzN1FVTmFRVHRCUVVOQkxIVkRRVUYxUXl3d1FrRkJNRUk3UVVGRGFrVXNkME5CUVhkRE8wRkJRM2hETzBGQlEwRXNSVHM3T3pzN096czdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3g1UWtGQmVVSXNhMEpCUVd0Q0xFVkJRVVU3TzBGQlJUZERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ5eFZRVUZWTzBGQlEySTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRGRFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVY3NWVUZCVlR0QlFVTmlPMEZCUTBFc1JUczdPenM3TzBGRFprRXNlVU03T3pzN096czdRVU5CUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVN4cFNFRkJhVWdzYlVKQlFXMUNMRVZCUVVVc2JVSkJRVzFDTERSS1FVRTBTanM3UVVGRmNsUXNjME5CUVhORExIVkRRVUYxUXl4blFrRkJaMEk3TzBGQlJUZEdPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFE3UVVGRFFTeEZPenM3T3pzN1FVTndRa0VzTkVKQlFUUkNMR1U3T3pzN096dEJRMEUxUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVc3NWMEZCVnl4bFFVRmxPMEZCUXk5Q08wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRXNSVHM3T3pzN096dEJRM0JDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNlVVpCUVdkR0xHRkJRV0VzUlVGQlJUczdRVUZGTDBZN1FVRkRRU3h4UkVGQmNVUXNNRUpCUVRCQ08wRkJReTlGTzBGQlEwRXNSVHM3T3pzN08wRkRXa0U3UVVGRFFTeFZRVUZWTzBGQlExWXNSVHM3T3pzN08wRkRSa0U3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOYVFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRhRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlF6RkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owTkJRV2RETzBGQlEyaERMR05CUVdNN1FVRkRaQ3hwUWtGQmFVSTdRVUZEYWtJN1FVRkRRU3hEUVVGRE8wRkJRMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZET3p0QlFVVkVPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTERSQ096czdPenM3UVVOcVEwRXNhMEpCUVd0Q0xIZEVPenM3T3pzN1FVTkJiRUlzYTBKQlFXdENMSGRFT3pzN096czdRVU5CYkVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVUkJRV2xFTzBGQlEycEVMRU5CUVVNN1FVRkRSRHRCUVVOQkxIRkNRVUZ4UWp0QlFVTnlRanRCUVVOQkxGTkJRVk03UVVGRFZDeEpRVUZKTzBGQlEwbzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRM0JFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUTFCQkxHdENRVUZyUWl4M1JEczdPenM3TzBGRFFXeENMR3RDUVVGclFpeDNSRHM3T3pzN08wRkRRV3hDTEd0Q1FVRnJRaXgzUkRzN096czdPMEZEUVd4Q0xHdENRVUZyUWl4M1JEczdPenM3TzBGRFFXeENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEU2tFN1FVRkRRU3c0UkRzN096czdPMEZEUkVFN1FVRkRRU3h2UkRzN096czdPMEZEUkVFN1FVRkRRU3c0UkRzN096czdPMEZEUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SRHM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3clF6czdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJMSFZFT3pzN096czdRVU5HUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGdzUlRzN096czdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NSVHM3T3pzN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzY1VOQlFYRkRMR2xDUVVGcFFpeEZRVUZGTzBGQlEzaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SVUZCWjBVc1owSkJRV2RDTzBGQlEyaEdPMEZCUTBFN1FVRkRRU3hIUVVGSExESkRRVUV5UXl4blEwRkJaME03UVVGRE9VVTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZENPenM3T3pzN1FVTjRRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTQ3hGT3pzN096czdRVU5tUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOWVFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3dyUWtGQkswSXNjVUpCUVhGQ08wRkJRM0JFTEN0Q1FVRXJRaXhUUVVGVExFVkJRVVU3UVVGRE1VTXNRMEZCUXl4VlFVRlZPenRCUVVWWU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMREpDUVVFeVFpeFRRVUZUTEcxQ1FVRnRRanRCUVVOMlJDd3JRa0ZCSzBJc1lVRkJZVHRCUVVNMVF6dEJRVU5CTEVkQlFVY3NWVUZCVlR0QlFVTmlPMEZCUTBFc1JUczdPenM3TzBGRGNFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxIVkRRVUYxUXl4dlFrRkJiMElzUlVGQlJUdEJRVU0zUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNaMEpCUVdkQ08wRkJRMmhDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEVzUlRzN096czdPMEZEYmtWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0Q1FVRnJRanM3UVVGRmJFSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdPenM3T3p0QlEyeENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMRVU3T3pzN096dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0RVFVRnJSRHRCUVVOc1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUeXhWUVVGVkxHTkJRV003UVVGREwwSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN5eEhRVUZITzBGQlExSTdRVUZEUVN4Rk96czdPenM3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHOUNRVUZ2UWl4aFFVRmhPMEZCUTJwRExFZEJRVWM3UVVGRFNDeEZPenM3T3pzN1FVTmlRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMUJCTzBGQlEwRTdRVUZEUVN3NFFrRkJPRUlzWjBOQlFXOURMRVU3T3pzN096dEJRMFpzUlR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRMRVU3T3pzN096dEJRMUpFTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTXNSVHM3T3pzN08wRkRVa1E3UVVGRFFUdEJRVU5CTERoQ1FVRTRRaXcwUTBGQk5FTXNSVHM3T3pzN096dEJRMFl4UlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzlEUVVGdlF6dEJRVU53UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEN0RFFVRXJReXh6UkVGQmFVUXNiMEpCUVc5Q08wRkJRM0JJTzBGQlEwRTdRVUZEUVN4SFFVRkhMRlZCUVZVN1FVRkRZaXhEUVVGRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMRmxCUVZrN1FVRkRXanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYTzBGQlExZzdRVUZEUVN4WFFVRlhPMEZCUTFnc1UwRkJVenRCUVVOVUxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVN3eVEwRkJNa003UVVGRE0wTTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDeHRRa0ZCYlVJc1owTkJRV2RETzBGQlEyNUVMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFRDeGxRVUZsTEhGRFFVRnhRenRCUVVOd1JEdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYTBOQlFXdERPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYTBOQlFXdERPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkVUpCUVhWQ0xIZENRVUYzUWp0QlFVTXZRenRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMR3RDUVVGclFpeDFRa0ZCZFVJc1MwRkJTenRCUVVNNVF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRanRCUVVOcVFpeDNRa0ZCZDBJN1FVRkRlRUlzWjBKQlFXZENPMEZCUTJoQ0xHOUNRVUZ2UWp0QlFVTndRaXgzUWtGQmQwSTdRVUZEZUVJc1owSkJRV2RDTzBGQlEyaENMRzlDUVVGdlFqdEJRVU53UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc01FUkJRVEJFTEd0Q1FVRnJRanRCUVVNMVJUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDeFBRVUZQTzBGQlExQTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRExFVTdPenM3T3pzN1FVTXhVMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZFVKQlFYVkNPMEZCUTNaQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhOQ1FVRnpRanRCUVVOMFFpeHZRa0ZCYjBJc2RVSkJRWFZDTEZOQlFWTXNTVUZCU1R0QlFVTjRSQ3hIUVVGSE8wRkJRMGdzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxFUVVGNVJEdEJRVU42UkR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQkxITkNRVUZ6UWl4cFEwRkJhVU03UVVGRGRrUXNTMEZCU3p0QlFVTk1MRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNPRVJCUVRoRUxEaENRVUU0UWp0QlFVTTFSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdPMEZCUlVnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc01FUkJRVEJFTEdkQ1FVRm5RanM3UVVGRk1VVTdRVUZEUVR0QlFVTkJPMEZCUTBFc2IwSkJRVzlDTEc5Q1FVRnZRanM3UVVGRmVFTXNNRU5CUVRCRExHOUNRVUZ2UWpzN1FVRkZPVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMSGRDUVVGM1FpeGxRVUZsTEVWQlFVVTdRVUZEZWtNc2QwSkJRWGRDTEdkQ1FVRm5RanRCUVVONFF5eERRVUZET3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHZSRUZCYjBRc1MwRkJTeXhSUVVGUkxHbERRVUZwUXp0QlFVTnNSeXhEUVVGRE8wRkJRMFE3UVVGRFFTd3JRMEZCSzBNN1FVRkRMME03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPenRCUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc01FTTdPenM3T3p0QlF6RlBRU3g1UXpzN096czdPMEZEUVVFc2MwTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3VVVOM1EyZENRU3hUTEVkQlFVRkJMRk03VVVGclJFRkRMRmNzUjBGQlFVRXNWenRSUVdkQ1FVTXNWeXhIUVVGQlFTeFhPMUZCVTBGRExGTXNSMEZCUVVFc1V6dFJRVlZCUXl4dFFpeEhRVUZCUVN4dFFqdFJRVlZCUXl4dFFpeEhRVUZCUVN4dFFqdFJRVmRCUXl4blFpeEhRVUZCUVN4blFqczdPenRCUVd4S2FFSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGelFrRTdPenM3TzBGQlMwRTdPenM3T3pzN08wRkJVVUU3T3pzN08wRkJTMDhzVTBGQlUwNHNVMEZCVkN4RFFVRnRRazhzUjBGQmJrSXNSVUZCZDBJN08wRkJSVGRDTEUxQlFVa3NRMEZCUTBFc1IwRkJUQ3hGUVVGVkxFMUJRVTFETEUxQlFVMHNkMEpCUVU0c1EwRkJUanM3UVVGRldDeFhRVUZUUXl4UFFVRlVMRU5CUVdsQ1F5eExRVUZxUWl4RlFVRjNRanRCUVVOMlFpeFJRVUZOUXl4UlFVRlJMREJHUVVGa08wRkJRMFVzVVVGQlRVTXNVVUZCVVN4VlFVRmtPMEZCUTBRc1VVRkJTVU1zVVVGQlVVZ3NUVUZCVFVrc1QwRkJUaXhEUVVGalNDeExRVUZrTEVWQlFYRkNReXhMUVVGeVFpeEZRVUUwUWtjc1MwRkJOVUlzUTBGQmEwTXNSMEZCYkVNc1EwRkJXanRCUVVORUxGZEJRVTlHTEV0QlFWQTdRVUZEUVRzN1FVRkZSQ3hOUVVGSlFTeFJRVUZSU2l4UlFVRlJSaXhIUVVGU0xFTkJRVm83TzBGQlJVTTdRVUZEUVN4TlFVRkpUU3hOUVVGTkxFTkJRVTRzVFVGQllVNHNSMEZCWWl4SlFVRnZRaXhEUVVGRFRTeE5RVUZOTEVOQlFVNHNSVUZCVTBjc1VVRkJWQ3hEUVVGclFpeEhRVUZzUWl4RFFVRjZRaXhGUVVGcFJEczdRVUZGTDBNc1VVRkJTVU1zVlVGQlV6dEJRVU5ZUXl4WlFVRk5MRVZCUkVzN1FVRkZXRU1zWTBGQlVWb3NSMEZHUnp0QlFVZFlZU3huUWtGQlZUdEJRVWhETEV0QlFXSTdPMEZCVFVGRExGbEJRVkZETEV0QlFWSXNRMEZCWXl4NVJrRkJaQ3hGUVVGNVIyWXNSMEZCZWtjN08wRkJSVUVzVjBGQlQxVXNUMEZCVUR0QlFVTkVPenRCUVVWR08wRkJRMEVzVFVGQlNVb3NUVUZCVFN4RFFVRk9MRTFCUVdGT0xFZEJRV0lzU1VGQmIwSk5MRTFCUVUwc1EwRkJUaXhGUVVGVFJ5eFJRVUZVTEVOQlFXdENMRWRCUVd4Q0xFTkJRWGhDTEVWQlFXZEVPMEZCUXk5RExGRkJRVWxQTEZOQlFWTldMRTFCUVUwc1EwRkJUaXhOUVVGaFRpeEhRVUZpTEVkQlFXMUNMRTFCUVc1Q0xFZEJRVFJDVFN4TlFVRk5MRU5CUVU0c1EwRkJla003UVVGRFFVRXNXVUZCVVVvc1VVRkJVV01zVTBGQlV5eExRVUZVTEVkQlFXbENWaXhOUVVGTkxFTkJRVTRzUTBGQmVrSXNRMEZCVWp0QlFVTkJPenRCUVVWRU8wRkJRMEVzVFVGQlNVRXNUVUZCVFN4RFFVRk9MRVZCUVZOSExGRkJRVlFzUTBGQmEwSXNSMEZCYkVJc1EwRkJTaXhGUVVFMFFqdEJRVU16UWtnc1ZVRkJUU3hEUVVGT0xFbEJRVmRCTEUxQlFVMHNRMEZCVGl4SlFVRlhMRXRCUVZnc1IwRkJiVUpCTEUxQlFVMHNRMEZCVGl4RFFVRTVRanRCUVVOQlFTeFZRVUZOTEVOQlFVNHNTVUZCVjBFc1RVRkJUU3hEUVVGT0xFVkJRVk5YTEUxQlFWUXNRMEZCWjBKWUxFMUJRVTBzUTBGQlRpeEZRVUZUV1N4UFFVRlVMRU5CUVdsQ0xFZEJRV3BDTEVsQlFYZENMRU5CUVhoRExFTkJRVmc3UVVGRFJ5eEhRWEpETUVJc1EwRnhRM2hDT3pzN08wRkJTVXdzVFVGQlNWSXNVMEZCVXp0QlFVTllReXhWUVVGTlRDeE5RVUZOTEVOQlFVNHNRMEZFU3p0QlFVVllUU3haUVVGUlRpeE5RVUZOTEVOQlFVNHNRMEZHUnp0QlFVZFlUeXhqUVVGVlVDeE5RVUZOTEVOQlFVNDdRVUZJUXl4SFFVRmlPenRCUVUxQkxGTkJRVTlKTEUxQlFWQTdRVUZEUkRzN1FVRkZUU3hUUVVGVGFFSXNWMEZCVkN4RFFVRnhRbmxDTEV0QlFYSkNMRVZCUVRSQ08wRkJRMnBETEUxQlFVbERMRmxCUVZsRUxFMUJRVTFFTEU5QlFVNHNRMEZCWXl4SFFVRmtMRU5CUVdoQ096dEJRVVZCTEUxQlFVbFNMRk5CUVZNN1FVRkRXRmNzWTBGQlZVWXNUVUZCVFVjc1UwRkJUaXhEUVVGblFpeERRVUZvUWl4RlFVRnRRa1lzVTBGQmJrSXNRMEZFUXp0QlFVVllVaXhaUVVGUlR5eE5RVUZOUnl4VFFVRk9MRU5CUVdkQ1JpeFpRVUZaTEVOQlFUVkNMRVZCUVN0Q1JDeE5RVUZOU1N4TlFVRnlRenRCUVVaSExFZEJRV0k3TzBGQlMwRXNVMEZCVDJJc1RVRkJVRHRCUVVORU96dEJRVVZFT3pzN096dEJRVXRQTEZOQlFWTm1MRmRCUVZRc1EwRkJjVUkyUWl4TlFVRnlRaXhGUVVFMlFqdEJRVU5zUXl4VFFVRlBMRzlDUVVGWlFTeE5RVUZhTEVWQlFXOUNSQ3hOUVVGd1FpeEhRVUUyUWl4RFFVRTNRaXhIUVVGcFF5eExRVUZxUXl4SFFVRjVReXhKUVVGb1JEdEJRVU5FT3p0QlFVVkVPenM3T3p0QlFVdFBMRk5CUVZNelFpeFRRVUZVTEVOQlFXMUNOa0lzUjBGQmJrSXNSVUZCZDBJN1FVRkROMEk3UVVGRFFTeE5RVUZKUVN4SFFVRktMRVZCUVZNc1QwRkJUME1zUzBGQlMwTXNTMEZCVEN4RFFVRlhMSGxDUVVGbFJpeEhRVUZtTEVOQlFWZ3NRMEZCVUR0QlFVTldPenRCUVVWRU96czdPenRCUVV0UExGTkJRVk0xUWl4dFFrRkJWQ3hEUVVFMlFpdENMRk5CUVRkQ0xFVkJRWGRETzBGQlF6ZERMRTFCUVVsU0xGbEJRVmxSTEZWQlFWVldMRTlCUVZZc1EwRkJhMElzUjBGQmJFSXNRMEZCYUVJN1FVRkRRU3hUUVVGUExGbEJRVmxWTEZWQlFWVk9MRk5CUVZZc1EwRkJiMEpHTEZsQlFWa3NRMEZCYUVNc1JVRkJiVU5STEZWQlFWVk1MRTFCUVRkRExFTkJRVm9zUjBGQmJVVXNSMEZCYmtVc1IwRkJlVVZMTEZWQlFWVk9MRk5CUVZZc1EwRkJiMElzUTBGQmNFSXNSVUZCZFVKR0xGTkJRWFpDTEVOQlFXaEdPMEZCUTBRN08wRkJSVVE3T3pzN08wRkJTMDhzVTBGQlUzUkNMRzFDUVVGVUxFTkJRVFpDSzBJc1QwRkJOMElzUlVGQmMwTTdRVUZETTBNc1RVRkJTVGRDTEUxQlFVMVFMRlZCUVZWdlF5eFBRVUZXTEVOQlFWWTdRVUZEUVN4VFFVRlBOMElzU1VGQlNXRXNVVUZCU2l4RFFVRmhUaXhQUVVGaUxFTkJRWEZDTEVkQlFYSkNMRVZCUVRCQ0xFVkJRVEZDTEVsQlFXZERMRWRCUVdoRExFZEJRWE5EVUN4SlFVRkpXU3hOUVVGcVJDeERRVVl5UXl4RFFVVmpPMEZCUXpGRU96dEJRVWRFT3pzN096dEJRVXRQTEZOQlFWTmlMR2RDUVVGVUxFTkJRVEJDSzBJc1ZVRkJNVUlzUlVGQmMwTTdPMEZCUlRORE8wRkJRMEVzVFVGQlNVRXNWMEZCVjFJc1UwRkJXQ3hEUVVGeFFpeERRVUZ5UWl4RlFVRjNRaXhEUVVGNFFpeE5RVUVyUWl4VFFVRnVReXhGUVVFNFF6dEJRVU0xUXl4UlFVRkpVeXhoUVVGaGRFTXNWVUZCVlhGRExGVkJRVllzUTBGQmFrSTdPMEZCUlVFN1FVRkRRU3hSUVVGSlF5eFhRVUZYYmtJc1RVRkJXQ3hKUVVGeFFtMUNMRmRCUVZkc1FpeFJRVUZ3UXl4RlFVRTRRenRCUVVNMVF5eGhRVUZQYVVJc1ZVRkJVRHRCUVVORUxFdEJSa1FzVFVGRlR6dEJRVU5NTEZsQlFVMHNNa0pCUVU0N1FVRkRSRHM3UVVGRlNEdEJRVU5ETEVkQldFUXNUVUZYVHp0QlFVTk1MRmRCUVU5cVF5eHZRa0ZCYjBKcFF5eFZRVUZ3UWl4RFFVRlFPMEZCUTBRN1FVRkRSaXhET3pzN096czdPenM3T3pzN096dEJRMjVMUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBSVUZCYVVVc01FUkJRVEJFTEVWQlFVVTdRVUZETjBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEWkVRVUUyUkN3eVJFRkJNa1E3UVVGRGVFZ3NjVVJCUVhGRUxESkVRVUV5UkR0QlFVTm9TRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbEZRVUZwUlR0QlFVTnFSVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhkQ1FVRjNRaXh6UTBGQmMwTTdRVUZET1VRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxDUVVGNVFpdzBSRUZCTkVRN1FVRkRja1k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4M1FrRkJkMElzSzBOQlFTdERPMEZCUTNaRk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkMEpCUVhkQ0xIRkZRVUZ4UlR0QlFVTTNSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDNRa0ZCZDBJc2RVTkJRWFZETzBGQlF5OUVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCVVR0QlFVTlNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRE8wRkJRM3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZENRVUYzUWp0QlFVTjRRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCVVR0QlFVTlNMR2xGTzBGQlEwRXNkMFJCUVhkRUxEWkhRVUUyUnl4RlFVRkZPMEZCUTNaTE8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxHRkJRV0U3UVVGRFlqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1R0QlFVTktPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSEZDUVVGeFFpeHJSMEZCYTBjN1FVRkRka2c3UVVGRFFUdEJRVU5CTEUxQlFVMDdRVUZEVGl4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNiMEpCUVc5Q0xHMUhRVUZ0Unp0QlFVTjJTRHRCUVVOQkxFMUJRVTA3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3cwUkR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYTBKQlFXdENMRzlKUVVGdlNUdEJRVU4wU2p0QlFVTkJMRWxCUVVrN1FVRkRTanRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaUlJEczdPenRCUVVOQk96czdPenM3UVVGNFFrRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVVsRkxHRkJRV0VzUlVGQlEwTXNTMEZCU3l4TFFVRk9MRVZCUVdGRExFOUJRVThzVDBGQmNFSXNSVUZCTmtKRExFOUJRVThzVDBGQmNFTXNSVUZCYWtJN08wRkJSVUU3T3pzN08wbEJTVTFETEd0Q096czdRVUZEU2pzN096czdPMEZCVDBFN096czdPMEZCUzBFN1FVRkRRU3c0UWtGQldVTXNUMEZCV2l4RlFVRnhRbkpETEVkQlFYSkNMRVZCUVRCQ2MwTXNUVUZCTVVJc1JVRkJhME5ETEdGQlFXeERMRVZCUVdsRVF5eFhRVUZxUkN4RlFVRTRSRU1zVTBGQk9VUXNSVUZCZVVWRExHTkJRWHBGTEVWQlFYbEdReXhOUVVGNlJpeEZRVUZwUnp0QlFVRkJPenRCUVVGQkxDdEtRVU42Ums0c1QwRkVlVVlzUlVGRGFFWnlReXhIUVVSblJpeEZRVU16UlhORExFMUJSREpGTEVWQlEyNUZReXhoUVVSdFJTeEZRVU53UkVNc1dVRkJXVWtzU1VGRWQwTXNSVUZEYkVOSUxGTkJSR3RETEVWQlEzWkNSU3hOUVVSMVFqczdRVUZGTDBZc1VVRkJTVVVzWTBGQlNqczdRVUZGUVVFc1ZVRkJUVU1zVVVGQlRpeEhRVUZwUWtvc1kwRkJha0k3UVVGRFFVY3NWVUZCVFVVc1VVRkJUaXhIUVVGcFFpeEZRVUZxUWpzN1FVRkZRVVlzVlVGQlRVY3NVVUZCVGl4RFFVRmxReXhQUVVGbUxFTkJRWFZDTEZWQlFVTkRMRXRCUVVRc1JVRkJWenRCUVVOb1Ewd3NXVUZCVFUwc1UwRkJUaXhEUVVGblFrUXNTMEZCYUVJN1FVRkRSQ3hMUVVaRU96dEJRVWxCTzBGQlEwRXNkMEpCUVZsV0xGbEJRVmxETEZOQlFYaENMRVZCUVcxRFZ5eFBRVUZ1UXl4RFFVRXlReXhWUVVGRFF5eFBRVUZFTEVWQlFXRTdRVUZEZEVRc1ZVRkJTVU1zV1VGQldXUXNXVUZCV1VNc1UwRkJXaXhEUVVGelFsa3NUMEZCZEVJc1EwRkJhRUk3UVVGRFFWSXNXVUZCVFZVc1owSkJRVTRzUTBGQmRVSkdMRTlCUVhaQ0xFbEJRV3RETERoQ1FVRnZRbElzUzBGQmNFSXNSVUZCTWtKUkxFOUJRVE5DTEVWQlFXOURReXhUUVVGd1F5eERRVUZzUXp0QlFVTkVMRXRCU0VRN08wRkJTMEZVTEZWQlFVMVhMR3RDUVVGT08wRkJha0lyUmp0QlFXdENhRWM3T3pzN2VVTkJSVzlDTzBGQlEyNUNPMEZCUTBFc1ZVRkJTVmdzVVVGQlVTeEpRVUZhT3p0QlFVVkJRU3haUVVGTldTeGxRVUZPTEVkQlFYZENXaXhOUVVGTllTeEpRVUZPTEVOQlFWZERMRmRCUVZnc1EwRkJkVUprTEUxQlFVMWxMRWxCUVU0c1IwRkJZU3hWUVVGd1F5eEZRVUZuUkN4VlFVRkRReXhIUVVGRUxFVkJRVk03UVVGREwwVXNXVUZCU1VFc1NVRkJTV3hFTEVsQlFVb3NTMEZCWVN4UlFVRnFRaXhGUVVFeVFqdEJRVU42UWtjc2EwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2QwSkJRWGRDYWtJc1RVRkJUV1VzU1VGQk9VSXNSMEZCY1VNc1VVRkJha1FzUlVGQk1rUkRMRWRCUVRORU8wRkJRMEZvUWl4blFrRkJUV3RDTEdGQlFVNHNRMEZCYjBKc1FpeE5RVUZOUnl4UlFVRXhRaXhGUVVGdlEyRXNSMEZCY0VNN1FVRkRSRHRCUVVOR0xFOUJUSFZDTEVOQlFYaENPMEZCVFVRN096dDNRMEZGYlVJN1FVRkRiRUk3UVVGRFFTeFZRVUZKYUVJc1VVRkJVU3hKUVVGYU96dEJRVVZCUVN4WlFVRk5XU3hsUVVGT0xFTkJRWE5DVHl4TlFVRjBRanRCUVVORU96dEJRVVZFT3pzN096czdPRUpCUjFNN1FVRkRVQ3hWUVVGSmJrSXNVVUZCVVN4SlFVRmFPenRCUVVWQlFTeFpRVUZOYjBJc2FVSkJRVTQ3UVVGRFFTeGhRVUZQY0VJc1RVRkJUWEZDTEZGQlFVNHNRMEZCWlVNc1ZVRkJaaXhEUVVFd1FuUkNMRTFCUVUxbExFbEJRV2hETEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN08ydERRVWRqTzBGQlExb3NWVUZCU1dZc1VVRkJVU3hKUVVGYU96dEJRVVZCTzBGQlEwRXNWVUZCU1hWQ0xHbENRVUZwUWp0QlFVTnVRbnBFTEdOQlFVMHNZVUZFWVN4RlFVTkZNRVFzVFVGQlRYaENMRTFCUVUxNVFpeE5RVVJrTEVWQlEzTkNReXhKUVVGSk1VSXNUVUZCVFhGQ0xGRkJRVTRzUTBGQlpVMHNUMEZFZWtNN1FVRkZia0pETEdOQlFVMHNSVUZCUlVNc1ZVRkJWVGRDTEUxQlFVMWxMRWxCUVd4Q08wRkJSbUVzVDBGQmNrSTdPMEZCUzBGbUxGbEJRVTFoTEVsQlFVNHNRMEZCVjJsQ0xGZEJRVmdzUTBGQmRVSlFMR05CUVhaQ0xFVkJRWFZETEZWQlFVTlJMRXRCUVVRc1JVRkJWenRCUVVOb1JEbEVMR2RDUVVGUlowUXNSMEZCVWl4RFFVRlpMR3REUVVGYUxFVkJRV2RFWXl4TFFVRm9SRHRCUVVOQkxGbEJRVWxCTEUxQlFVMUlMRWxCUVU0c1EwRkJWMGtzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UW1oRExHZENRVUZOYjBJc2FVSkJRVTQ3UVVGRFFTeHBRa0ZCVDNCQ0xFMUJRVTF4UWl4UlFVRk9MRU5CUVdWRExGVkJRV1lzUTBGQk1FSjBRaXhOUVVGTlpTeEpRVUZvUXl4RFFVRlFPMEZCUTBRN1FVRkRSaXhQUVU1RU8wRkJUMFE3TzBGQlJVUTdPenM3T3pzN096WkNRVXRUYTBJc1RTeEZRVUZSUXl4UkxFVkJRVlU3UVVGRGVrSXNWVUZCU1VNc1RVRkJUVVlzVFVGQlZqdEJRVU5CTEZWQlFVbEhMRmxCUVZrN1FVRkRaSFJGTEdOQlFVMXhRaXhYUVVGWFJ5eExRVVJJTzBGQlJXUTBReXhyUWtGQlZVRTdRVUZHU1N4UFFVRm9RanM3UVVGTFFTeFZRVUZKUnl4TlFVRk5TaXhQUVVGUE5VUXNUMEZCVUN4RFFVRmxMRWRCUVdZc1EwRkJWanRCUVVOQkxGVkJRVWxuUlN4UlFVRlJTaXhQUVVGUGRrUXNUVUZCVUN4SFFVRm5RaXhEUVVFMVFpeEZRVUVyUWp0QlFVTTNRaXhaUVVGSk1rUXNVVUZCVVN4RFFVRmFMRVZCUVdVN1FVRkRZa1FzYjBKQlFWVjBSU3hKUVVGV0xFZEJRV2xDY1VJc1YwRkJWME1zUjBGQk5VSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUR2RFTEc5Q1FVRlZkRVVzU1VGQlZpeEhRVUZwUW5GQ0xGZEJRVmRGTEV0QlFUVkNPMEZCUTBFNFF5eG5Ra0ZCVFVZc1QwRkJUemRFTEUxQlFWQXNRMEZCWXl4RFFVRmtMRVZCUVdsQ05rUXNUMEZCVDNaRUxFMUJRVkFzUjBGQlowSXNRMEZCYWtNc1EwRkJUanRCUVVORU8wRkJRMFk3TzBGQlJVUXNWMEZCUzNkQ0xGRkJRVXdzUTBGQlkybERMRWRCUVdRc1NVRkJjVUpETEZOQlFYSkNPMEZCUTBRN096czRRa0ZGVXk5Q0xFc3NSVUZCVHp0QlFVTm1MRlZCUVVsTUxGRkJRVkVzU1VGQldqczdRVUZGUVN3d1FrRkJXVUVzVFVGQlRVVXNVVUZCYkVJc1JVRkJORUpMTEU5QlFUVkNMRU5CUVc5RExGVkJRVU0wUWl4SFFVRkVMRVZCUVZNN1FVRkRNME1zV1VGQlNVWXNVMEZCVTJwRExFMUJRVTFGTEZGQlFVNHNRMEZCWldsRExFZEJRV1lzUTBGQllqdEJRVU5CTEZsQlFVbEdMRTlCUVU5dVJTeEpRVUZRTEV0QlFXZENjVUlzVjBGQlYwTXNSMEZCTDBJc1JVRkJiME03UVVGRGJFTTdRVUZEUVRaRExHbENRVUZQUXl4UlFVRlFMRU5CUVdkQ04wSXNTMEZCYUVJN1FVRkRSQ3hUUVVoRUxFMUJSMDhzU1VGQlNUUkNMRTlCUVU5dVJTeEpRVUZRTEV0QlFXZENjVUlzVjBGQlYwVXNTMEZCTDBJc1JVRkJjME03UVVGRE0wTTdRVUZEUVN4alFVRkpaMElzVFVGQlRXbERMRXRCUVU0c1EwRkJXV3BGTEU5QlFWb3NRMEZCYjBJNFJDeEhRVUZ3UWl4TlFVRTJRaXhEUVVGcVF5eEZRVUZ2UXp0QlFVTnNRMFlzYlVKQlFVOURMRkZCUVZBc1EwRkJaMEkzUWl4TFFVRm9RanRCUVVORU8wRkJRMFlzVTBGTVRTeE5RVXRCTEVsQlFVazBRaXhQUVVGUGJrVXNTVUZCVUN4TFFVRm5RbkZDTEZkQlFWZEhMRXRCUVM5Q0xFVkJRWE5ETzBGQlF6TkRPMEZCUTBFc1kwRkJTV1VzVFVGQlRXbERMRXRCUVU0c1MwRkJaMEpJTEVkQlFYQkNMRVZCUVhsQ08wRkJRM1pDUml4dFFrRkJUME1zVVVGQlVDeERRVUZuUWpkQ0xFdEJRV2hDTzBGQlEwUTdRVUZEUmp0QlFVTkdMRTlCYUVKRU8wRkJhVUpFT3pzN2RVSkJha2w1UXl3eVFqczdhMEpCYjBrM1FtUXNhMEk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRemRKWmpzN096dEJRVU5CT3pzN08wRkJSVUU3T3pzN1FVRXhRa0U3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJPRUpOWjBRc2EwSTdPenRCUVVOS096czdPenM3T3p0QlFWTkJPenM3TzBGQlNVRXNPRUpCUVZrdlF5eFBRVUZhTEVWQlFYRkNja01zUjBGQmNrSXNSVUZCTUVKelF5eE5RVUV4UWl4RlFVRnJRME1zWVVGQmJFTXNSVUZCYVVSRExGZEJRV3BFTEVWQlFUaEVReXhUUVVFNVJDeEZRVUY1UlR0QlFVRkJPenRCUVVGQkxDdEtRVU5xUlVvc1QwRkVhVVVzUlVGRGVFUnlReXhIUVVSM1JDeEZRVU51UkhORExFMUJSRzFFTEVWQlF6TkRReXhoUVVReVF5eEZRVU0xUWtNc1YwRkVORUlzUlVGRFprTXNVMEZFWlRzN1FVRkZka1VzVVVGQlNVa3NZMEZCU2pzN1FVRkZRVUVzVlVGQlRYZERMR05CUVU0c1IwRkJkVUlzUlVGQmRrSTdPMEZCUlVGNFF5eFZRVUZOUnl4UlFVRk9MRU5CUVdWRExFOUJRV1lzUTBGQmRVSXNWVUZCUTBNc1MwRkJSQ3hGUVVGWE8wRkJRMmhEY0VNc1kwRkJVV2RFTEVkQlFWSXNRMEZCV1N4M1FrRkJkMEk1UkN4SFFVRjRRaXhIUVVFNFFpeFRRVUV4UXl4RlFVRnhSR3RFTEV0QlFYSkVPMEZCUTBGTUxGbEJRVTE1UXl4VFFVRk9MRU5CUVdkQ2NFTXNTMEZCYUVJN1FVRkRSQ3hMUVVoRU96dEJRVXRCVEN4VlFVRk5WeXhyUWtGQlRqdEJRVmgxUlR0QlFWbDRSVHM3T3p0NVEwRkZiMEk3UVVGRGJrSTdRVUZEUVN4VlFVRkpXQ3hSUVVGUkxFbEJRVm83TzBGQlJVRkJMRmxCUVUwd1F5eGxRVUZPTEVkQlFYZENNVU1zVFVGQlRXRXNTVUZCVGl4RFFVRlhReXhYUVVGWUxFTkJRWFZDWkN4TlFVRk5aU3hKUVVFM1FpeEZRVUZ0UXl4VlFVRkRReXhIUVVGRUxFVkJRVk03UVVGRGJFVXZReXhuUWtGQlVXZEVMRWRCUVZJc1EwRkJXU3huUWtGQlowSnFRaXhOUVVGTlpTeEpRVUYwUWl4SFFVRTJRaXhSUVVGNlF5eEZRVUZ0UkVNc1IwRkJia1E3UVVGRFFTeG5Ra0ZCVVVFc1NVRkJTV3hFTEVsQlFWbzdRVUZEUlN4bFFVRkxMRlZCUVV3N1FVRkJhVUpyUXl4clFrRkJUVEpETEZkQlFVNHNRMEZCYTBJelFpeEhRVUZzUWl4RlFVRjNRanRCUVVONlF5eGxRVUZMTEUxQlFVdzdRVUZCWVdoQ0xHdENRVUZOTkVNc1QwRkJUaXhEUVVGak5VSXNSMEZCWkN4RlFVRnZRanRCUVVadVF6dEJRVWxFTEU5QlRuVkNMRU5CUVhoQ08wRkJUMFE3T3p0M1EwRkZiVUk3UVVGRGJFSTdRVUZEUVN4VlFVRkphRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkJRU3haUVVGTk1FTXNaVUZCVGl4RFFVRnpRblpDTEUxQlFYUkNPMEZCUTBRN08wRkJSVVE3T3pzN096czdiME5CU1dkQ01FSXNVeXhGUVVGWE8wRkJRM3BDTEZWQlFVazNReXhSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVN4VlFVRkpPRU1zV1VGQldUdEJRVU5rYUVZc1kwRkJUU3hSUVVSUkxFVkJRMFV3UkN4TlFVRk5lRUlzVFVGQlRYRkNMRkZCUVU0c1EwRkJaVWtzVFVGRWRrSXNSVUZESzBKRExFbEJRVWt4UWl4TlFVRk5jVUlzVVVGQlRpeERRVUZsVFN4UFFVUnNSRHRCUVVWa1F5eGpRVUZOTEVWQlFVVnRRaXhSUVVGUkxFdEJRVllzUlVGQmFVSnNRaXhWUVVGVk4wSXNUVUZCVFdVc1NVRkJha01zUlVGQmRVTjBRaXhSUVVGUlR5eE5RVUZOWjBRc1QwRkJja1FzUlVGQk9FUXhSaXhQUVVGUE1FTXNUVUZCVFVjc1VVRkJUaXhEUVVGbFNpeEpRVUZ3Uml4RlFVRXdSbXRFTEZkQlFWZEtMRk5CUVhKSE8wRkJSbEVzVDBGQmFFSTdPMEZCUzBFM1F5eFpRVUZOWVN4SlFVRk9MRU5CUVZkcFFpeFhRVUZZTEVOQlFYVkNaMElzVTBGQmRrSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096aENRVWRUTzBGQlExQXNWVUZCU1RsRExGRkJRVkVzU1VGQldqczdRVUZGUVR0QlFVTkJMRlZCUVVsclJDeFpRVUZaTzBGQlEyUndSaXhqUVVGTkxGRkJSRkVzUlVGRFJUQkVMRTFCUVUxNFFpeE5RVUZOZVVJc1RVRkVaQ3hGUVVOelFrTXNTVUZCU1RGQ0xFMUJRVTF4UWl4UlFVRk9MRU5CUVdWTkxFOUJSSHBETzBGQlJXUkRMR05CUVUwc1JVRkJSVU1zVlVGQlZUZENMRTFCUVUxbExFbEJRV3hDTzBGQlJsRXNUMEZCYUVJN08wRkJTMEZtTEZsQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVKdlFpeFRRVUYyUWl4RlFVRnJReXhWUVVGRGJrSXNTMEZCUkN4RlFVRlhPMEZCUXpORE9VUXNaMEpCUVZGblJDeEhRVUZTTEVOQlFWa3NOa0pCUVZvc1JVRkJNa05qTEV0QlFUTkRPMEZCUTBFc1dVRkJTVUVzVFVGQlRVZ3NTVUZCVGl4RFFVRlhTU3hKUVVGWUxFdEJRVzlDTEVkQlFYaENMRVZCUVRaQ08wRkJRek5DYUVNc1owSkJRVTF2UWl4cFFrRkJUanRCUVVOQkxHbENRVUZQY0VJc1RVRkJUWEZDTEZGQlFVNHNRMEZCWlRoQ0xGVkJRV1lzUTBGQk1FSnVSQ3hOUVVGTlpTeEpRVUZvUXl4RFFVRlFPMEZCUTBRN1FVRkRSaXhQUVU1RU8wRkJUMFE3TzBGQlJVUTdPenM3T3pzN096dEJRVTFCT3pzN08yMURRVWxsYlVJc1VTeEZRVUZWTzBGQlEzWkNMRmRCUVV0clFpeHpRa0ZCVEN4SFFVRTRRbXhDTEZGQlFUbENPMEZCUTBRN08wRkJSVVE3T3pzN096czdLMEpCU1ZkQkxGRXNSVUZCVlR0QlFVTnVRaXhYUVVGTGJVSXNhMEpCUVV3c1IwRkJNRUp1UWl4UlFVRXhRanRCUVVORU96dEJRVVZFT3pzN096czdPekpDUVVsUFFTeFJMRVZCUVZVN1FVRkRaaXhYUVVGTGIwSXNZMEZCVEN4SFFVRnpRbkJDTEZGQlFYUkNPMEZCUTBRN08wRkJSVVE3T3pzN0swSkJRMWRzUWl4SExFVkJRVXM3UVVGRFpDeFZRVUZKYUVJc1VVRkJVU3hKUVVGYU96dEJRVVZCTDBJc1kwRkJVV2RFTEVkQlFWSXNRMEZCV1N3d1FrRkJXaXhGUVVGM1EwUXNSMEZCZUVNN1FVRkRRU3hqUVVGUlFTeEpRVUZKV1N4SlFVRktMRU5CUVZNNVJDeEpRVUZxUWp0QlFVTkZMR0ZCUVVzc1YwRkJURHRCUVVGclFtdERMR2RDUVVGTmRVUXNXVUZCVGl4RFFVRnRRblpETEVkQlFXNUNMRVZCUVhsQ08wRkJRek5ETEdGQlFVc3NZVUZCVER0QlFVRnZRbWhDTEdkQ1FVRk5kMFFzWTBGQlRpeERRVUZ4UW5oRExFZEJRWEpDTEVWQlFUSkNPMEZCUm1wRU8wRkJTVVE3TzBGQlJVUTdPenM3YVVOQlEyRkJMRWNzUlVGQlN6dEJRVUZCT3p0QlFVTm9RaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTWGxFTEdGQlFXRjZReXhKUVVGSldTeEpRVUZLTEVOQlFWTktMRWxCUVRGQ08wRkJRMEYyUkN4alFVRlJaMFFzUjBGQlVpeERRVUZaTEcxRFFVRmFMRVZCUVdsRVJDeEhRVUZxUkRzN1FVRkZRU3hWUVVGSldDeFJRVUZSTzBGQlExWjJReXhqUVVGTmEwUXNTVUZCU1Zrc1NVRkJTaXhEUVVGVE9VUXNTVUZFVER0QlFVVldXQ3hoUVVGTGMwY3NWVUZHU3pzN1FVRkpWbnBHTEd0Q1FVRlZaMFFzU1VGQlNWa3NTVUZCU2l4RFFVRlROVVFzVVVGS1ZEczdRVUZOVmpCR0xHZENRVUZSTEd0Q1FVRk5PMEZCUTFvN1FVRkRRU3hqUVVGSlF5eE5RVUZOTEVWQlFVVjRSeXhMUVVGTGMwY3NWVUZCVUN4RlFVRnRRa2NzVVVGQlVTeEpRVUV6UWl4RlFVRldPMEZCUTBFMVJDeG5Ra0ZCVFhkRExHTkJRVTRzUTBGQmNVSnBRaXhWUVVGeVFpeEpRVUZ0UTBVc1IwRkJia003TzBGQlJVRTdRVUZEUVN4alFVRkpSU3hwUWtGQmFVSXNSVUZCY2tJN1FVRkRRU3c0UWtGQldUZEVMRTFCUVUxVkxHZENRVUZzUWl4RlFVRnZRMGdzVDBGQmNFTXNRMEZCTkVNc1ZVRkJRME1zVDBGQlJDeEZRVUZoTzBGQlEzWkVMR2RDUVVGSlF5eFpRVUZaVkN4TlFVRk5WU3huUWtGQlRpeERRVUYxUWtZc1QwRkJka0lzUlVGQlowTlVMRWxCUVdoRU8wRkJRMEU0UkN3eVFrRkJaWEpFTEU5QlFXWXNTVUZCTUVJc2MwSkJRVlZETEZOQlFWWXNRMEZCTVVJN1FVRkRSQ3hYUVVoRU96dEJRVXRCTEdOQlFVbHhSQ3hWUVVGVk8wRkJRMXBETEdkQ1FVRkpMME1zU1VGQlNTdERMRVZCUkVrc1JVRkRRV3BITEUxQlFVMHNWVUZFVGl4RlFVTnJRakJFTEUxQlFVMVNMRWxCUVVsVkxFVkJSRFZDTEVWQlEyZERRU3hKUVVGSlZpeEpRVUZKVVN4SlFVUjRRenRCUVVWYVNTeHJRa0ZCVFN4RlFVRkZTU3hOUVVGTkxFZEJRVklzUlVGQllYWkRMRkZCUVZGUExFMUJRVTFuUkN4UFFVRXpRaXhGUVVGdlEyZENMRk5CUVZOb1JTeE5RVUZOUXl4UlFVRnVSQ3hGUVVFMlJETkRMRTlCUVU4c1JVRkJSWGxETEUxQlFVMHNjMEpCUVZWRExFMUJRVTFFTEVsQlFXaENMRU5CUVZJc1JVRkJLMEpJTEZkQlFWZHBSU3hqUVVFeFF5eEZRVUZ3UlR0QlFVWk5MRmRCUVdRN08wRkJTMEU3UVVGRFFTeGpRVUZKTjBNc1NVRkJTVmtzU1VGQlNpeERRVUZUY1VNc1kwRkJWQ3hEUVVGM1FpeHpRa0ZCZUVJc1MwRkJiVVFzUTBGQlEycEVMRWxCUVVsWkxFbEJRVW9zUTBGQlUzTkRMRzlDUVVGcVJTeEZRVUYxUmp0QlFVTnlSa29zYjBKQlFWRnNReXhKUVVGU0xFTkJRV0Z6UXl4dlFrRkJZaXhIUVVGdlF5eFBRVUZMUXl4eFFrRkJla003UVVGRFFTeHRRa0ZCUzBFc2NVSkJRVXdzUjBGQk5rSnVSQ3hKUVVGSldTeEpRVUZLTEVOQlFWTnpReXh2UWtGQmRFTTdRVUZEUkRzN1FVRkZSRHRCUVVOQmJFVXNaMEpCUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUpuUXl4UFFVRjJRanM3UVVGRlFTeHBRa0ZCVDBnc1IwRkJVRHRCUVVORUxGTkJha05UT3p0QlFXMURWbE1zWjBKQlFWRXNaMEpCUVVORExFMUJRVVFzUlVGQldUdEJRVU5zUWp0QlFVTkJja1VzWjBKQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0pwUXl4blFrRkJTUzlETEVsQlFVa3JReXhGUVVSaExFVkJRMVJxUnl4TlFVRk5MRlZCUkVjc1JVRkRVekJFTEUxQlFVMVNMRWxCUVVsVkxFVkJSRzVDTEVWQlEzVkNRU3hKUVVGSlZpeEpRVUZKVVN4SlFVUXZRanRCUVVWeVFra3NhMEpCUVUwc1JVRkJSVWtzVFVGQlRTeEhRVUZTTEVWQlFXRnpReXhOUVVGTlJDeE5RVUZ1UWp0QlFVWmxMRmRCUVhaQ08wRkJTVVE3UVVGNlExTXNUMEZCV2pzN1FVRTBRMEVzVlVGQlNYSkZMRTFCUVUxdlJDeHpRa0ZCVml4RlFVRnJRenRCUVVOb1EyNUdMR2RDUVVGUlowUXNSMEZCVWl4RFFVRlpMSE5DUVVGYUxFVkJRVzlEV2l4TFFVRndRenRCUVVOQlRDeGpRVUZOYjBRc2MwSkJRVTRzUTBGQk5rSXZReXhMUVVFM1FqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdiVU5CUTJWWExFY3NSVUZCU3p0QlFVTnNRaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTWGxFTEdGQlFXRjZReXhKUVVGSldTeEpRVUZLTEVOQlFWTktMRWxCUVRGQ096dEJRVVZCTEZWQlFVbHRReXhOUVVGTk0wUXNUVUZCVFhkRExHTkJRVTRzUTBGQmNVSnBRaXhWUVVGeVFpeERRVUZXTzBGQlEwRXNZVUZCVDNwRUxFMUJRVTEzUXl4alFVRk9MRU5CUVhGQ2FVSXNWVUZCY2tJc1EwRkJVRHM3UVVGRlFTeFZRVUZKY0VRc1VVRkJVVHRCUVVOV2RrTXNZMEZCVFd0RUxFbEJRVWxaTEVsQlFVb3NRMEZCVXpsRUxFbEJSRXc3UVVGRlZsZ3NZVUZCUzNOSExGVkJSa3M3UVVGSFZqbEZMR2RDUVVGUlowWTdRVUZJUlN4UFFVRmFPenRCUVUxQkxGVkJRVWt6UkN4TlFVRk5iMFFzYzBKQlFWWXNSVUZCYTBNN1FVRkRhRU51Uml4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N4NVFrRkJXaXhGUVVGMVExb3NTMEZCZGtNN1FVRkRRVXdzWTBGQlRXOUVMSE5DUVVGT0xFTkJRVFpDTDBNc1MwRkJOMEk3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3TzJkRFFVTlpWeXhITEVWQlFVczdRVUZEWml4VlFVRkphRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVsTExGRkJRVkU3UVVGRFZuWkRMR05CUVUxclJDeEpRVUZKYkVRc1NVRkVRVHRCUVVWV1dDeGhRVUZMTmtRc1NVRkJTVkVzU1VGR1F6dEJRVWRXVVN4alFVRk5hRUlzU1VGQlNWa3NTVUZCU2l4RFFVRlRTVHRCUVVoTUxFOUJRVm83TzBGQlRVRXNWVUZCU1doRExFMUJRVTF4UkN4clFrRkJWaXhGUVVFNFFqdEJRVU0xUW5CR0xHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxHdENRVUZhTEVWQlFXZERXaXhMUVVGb1F6dEJRVU5CVEN4alFVRk5jVVFzYTBKQlFVNHNRMEZCZVVKb1JDeExRVUY2UWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN05FSkJRMUZYTEVjc1JVRkJTenRCUVVOWUxGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNVc3NVVUZCVVR0QlFVTldka01zWTBGQlRXdEVMRWxCUVVsc1JDeEpRVVJCTzBGQlJWWllMR0ZCUVVzMlJDeEpRVUZKVVN4SlFVWkRPenRCUVVsV2EwTXNaMEpCUVZFc2EwSkJRVTA3UVVGRFdqRkVMR2RDUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNhVU1zWjBKQlFVa3ZReXhKUVVGSkswTXNSVUZFWVN4RlFVTlVha2NzVFVGQlRTeFZRVVJITEVWQlExTXdSQ3hOUVVGTlVpeEpRVUZKVlN4RlFVUnVRaXhGUVVOMVFrRXNTVUZCU1ZZc1NVRkJTVkVzU1VGRUwwSTdRVUZGY2tKSkxHdENRVUZOTEVWQlFVVkpMRTFCUVUwc1IwRkJVaXhGUVVGaE1VVXNUMEZCVHl4elFrRkJWVEJETEUxQlFVMUVMRWxCUVdoQ0xFTkJRWEJDTzBGQlJtVXNWMEZCZGtJN1FVRkpSQ3hUUVZSVE96dEJRVmRXY1VVc1owSkJRVkVzWjBKQlFVTkRMRTFCUVVRc1JVRkJXVHRCUVVOc1FuSkZMR2RDUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNhVU1zWjBKQlFVa3ZReXhKUVVGSkswTXNSVUZFWVN4RlFVTlVha2NzVFVGQlRTeFZRVVJITEVWQlExTXdSQ3hOUVVGTlVpeEpRVUZKVlN4RlFVUnVRaXhGUVVOMVFrRXNTVUZCU1ZZc1NVRkJTVkVzU1VGRUwwSTdRVUZGY2tKSkxHdENRVUZOTEVWQlFVVkpMRTFCUVUwc1IwRkJVaXhGUVVGaGMwTXNUVUZCVFVRc1RVRkJia0k3UVVGR1pTeFhRVUYyUWp0QlFVbEVPMEZCYUVKVExFOUJRVm83TzBGQmJVSkJMRlZCUVVseVJTeE5RVUZOYzBRc1kwRkJWaXhGUVVFd1FqdEJRVU40UW5KR0xHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxHTkJRVm9zUlVGQk5FSmFMRXRCUVRWQ08wRkJRMEZNTEdOQlFVMXpSQ3hqUVVGT0xFTkJRWEZDYWtRc1MwRkJja0k3UVVGRFJEdEJRVU5HT3pzN2QwSkJOVXB0UWp0QlFVRkZMR0ZCUVU4c1MwRkJTMjFETEdOQlFWbzdRVUZCTmtJN096dDFRa0Y2UmxRc01rSTdPMnRDUVhsUU4wSkVMR3RDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTm9VV1k3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlJVRTdPenM3U1VGSlRXZERMRlU3UVVGRFNqczdPenM3T3pzN096czdPenM3UVVGcFFrRTdPenM3UVVGSlFTeHpRa0ZCV1M5RkxFOUJRVm9zUlVGQmNVSnlReXhIUVVGeVFpeEZRVUV3UW5ORExFMUJRVEZDTEVWQlFXdERReXhoUVVGc1F5eEZRVUZwUkVNc1YwRkJha1FzUlVGQk9FUkRMRk5CUVRsRUxFVkJRWGRHTzBGQlFVRXNVVUZCWmtVc1RVRkJaU3gxUlVGQlRpeEpRVUZOTzBGQlFVRTdPMEZCUTNSR0xGRkJRVWxGTEZGQlFWRXNTVUZCV2pzN1FVRkZRVUVzVlVGQlRYRkNMRkZCUVU0c1IwRkJhVUkzUWl4UFFVRnFRanRCUVVOQlVTeFZRVUZOWlN4SlFVRk9MRWRCUVdFMVJDeEhRVUZpTzBGQlEwRTJReXhWUVVGTlowUXNUMEZCVGl4SFFVRm5RblpFTEUxQlFXaENPMEZCUTBGUExGVkJRVTEzUlN4UFFVRk9MRWRCUVdkQ09VVXNZVUZCYUVJN1FVRkRRVTBzVlVGQlRVY3NVVUZCVGl4SFFVRnBRaXd3UWtGQlpWSXNWMEZCWml4RFFVRnFRanRCUVVOQlN5eFZRVUZOZVVVc1ZVRkJUaXhIUVVGdFFqZEZMRk5CUVc1Q096dEJRVVZCTzBGQlEwRkpMRlZCUVUxdFJTeHhRa0ZCVGl4SFFVRTRRbkpGTEUxQlFUbENPenRCUVVWQlJTeFZRVUZOUXl4UlFVRk9MRWRCUVdsQ0xFTkJRV3BDTzBGQlEwRkVMRlZCUVUwd1JTeFJRVUZPTEVkQlFXbENMRU5CUVdwQ08wRkJRMEV4UlN4VlFVRk5WU3huUWtGQlRpeEhRVUY1UWl4RlFVRjZRanRCUVVOQlZpeFZRVUZOTWtVc2EwSkJRVTRzUjBGQk1rSXNSVUZCTTBJN08wRkJSVUV6UlN4VlFVRk5lVUlzVFVGQlRpeEhRVUZsYWtNc1VVRkJVV2xETEUxQlFYWkNPMEZCUTBGNlFpeFZRVUZOWVN4SlFVRk9MRWRCUVdGeVFpeFJRVUZSY1VJc1NVRkJja0k3UVVGRFJEczdPenQ1UTBGRmIwSTdRVUZCUVRzN1FVRkRia0lzVlVGQlNXSXNVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWswUlN4bFFVRmxOVVVzVFVGQlRXVXNTVUZCVGl4SFFVRmhMRmxCUVdoRE8wRkJRMEU1UXl4alFVRlJaMFFzUjBGQlVpeERRVUZaTEhORFFVRmFMRVZCUVc5RWFrSXNUVUZCVFhsRkxGVkJRVEZFTzBGQlEwRXNWVUZCU1hwRkxFMUJRVTE1UlN4VlFVRldMRVZCUVhOQ08wRkJRM0JDZWtVc1kwRkJUWGxGTEZWQlFVNHNRMEZCYVVKc1JTeFBRVUZxUWl4RFFVRjVRaXhWUVVGRGMwVXNTMEZCUkN4RlFVRlhPMEZCUTJ4RExHTkJRVWxETEZkQlFWZEdMR1ZCUVdWRExFdEJRVGxDTzBGQlEwRXNZMEZCU1VVc1YwRkJWeTlGTEUxQlFVMWhMRWxCUVU0c1EwRkJWME1zVjBGQldDeERRVUYxUW1kRkxGRkJRWFpDTEVWQlFXbERMRlZCUVVNNVJDeEhRVUZFTEVWQlFWTTdRVUZEZGtRN1FVRkRRU3huUWtGQlNVRXNTVUZCU1ZFc1NVRkJTaXhMUVVGaExFOUJRVXRETEUxQlFYUkNMRVZCUVRoQ08wRkJRelZDZUVRc2MwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc01rSkJRVm9zUlVGQmVVTkVMRWRCUVhwRE8wRkJRMEVzYzBKQlFWRkJMRWxCUVVsc1JDeEpRVUZhTzBGQlEwVXNjVUpCUVVzc1VVRkJURHRCUVVGbGEwTXNkMEpCUVUxblJpeGpRVUZPTEVOQlFYRkNhRVVzUjBGQmNrSXNSVUZCTWtJN1FVRkRNVU1zY1VKQlFVc3NVVUZCVER0QlFVRmxMME1zTUVKQlFWRm5SQ3hIUVVGU0xFTkJRVmxFTEVkQlFWb3NSVUZCYTBJN1FVRkRha003UVVGQlUyaENMSGRDUVVGTmFVWXNaVUZCVGl4RFFVRnpRbXBGTEVkQlFYUkNMRVZCUVRSQ08wRkJTSFpETzBGQlMwUTdRVUZEUml4WFFWWmpMRU5CUVdZN08wRkJXVUZvUWl4blFrRkJUVEpGTEd0Q1FVRk9MRU5CUVhsQ1R5eEpRVUY2UWl4RFFVRTRRa2dzVVVGQk9VSTdRVUZEUkN4VFFXWkVPMEZCWjBKRU8wRkJRMFk3T3p0M1EwRkZiVUk3UVVGRGJFSXNWVUZCU1M5RkxGRkJRVkVzU1VGQldqczdRVUZGUVVFc1dVRkJUVEpGTEd0Q1FVRk9MRU5CUVhsQ2NFVXNUMEZCZWtJc1EwRkJhVU1zVlVGQlEzZEZMRkZCUVVRc1JVRkJZenRCUVVNM1EwRXNhVUpCUVZNMVJDeE5RVUZVTzBGQlEwUXNUMEZHUkRzN1FVRkpRU3d3UWtGQldXNUNMRTFCUVUxVkxHZENRVUZzUWl4RlFVRnZRMGdzVDBGQmNFTXNRMEZCTkVNc1ZVRkJRelJDTEVkQlFVUXNSVUZCVXp0QlFVTnVSRzVETEdOQlFVMVZMR2RDUVVGT0xFTkJRWFZDZVVJc1IwRkJka0lzUlVGQk5FSm1MR2xDUVVFMVFqdEJRVU5FTEU5QlJrUTdRVUZIUkRzN1FVRkZSRHM3T3pzN096czdPMEZCT0VKQk96czdORUpCUjFFN1FVRkRUanRCUVVOQkxGbEJRVTBzYVVKQlFVNDdRVUZEUkRzN1FVRkZSRHM3T3pzN096WkNRVWRUTzBGQlExQTdRVUZEUVN4WlFVRk5MR2xDUVVGT08wRkJRMFE3TzBGQlJVUTdPenM3T3pzeVFrRkhUenRCUVVOTU8wRkJRMEVzV1VGQlRTeHBRa0ZCVGp0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN096WkNRVTlUSzBRc1VTeEZRVUZWZUVZc1Z5eEZRVUZoTTBJc1VTeEZRVUZWTzBGQlEzaERMRlZCUVVsblF5eFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRVUVzV1VGQlRUQkZMRkZCUVU0N1FVRkRRU3hWUVVGSlZTeGhRVUZoY0VZc1RVRkJUWGxDTEUxQlFVNHNSMEZCWlN4SFFVRm1MRWRCUVhGQ2VrSXNUVUZCVFRCRkxGRkJRVFZETzBGQlEwRXNWVUZCU1Zjc1pVRkJaWEpHTEUxQlFVMWxMRWxCUVU0c1IwRkJZU3haUVVGaUxFZEJRVFJDYjBVc1VVRkJMME03TzBGQlJVRTdRVUZEUVN4VlFVRkpSeXhoUVVGaE8wRkJRMlo0U0N4alFVRk5MRkZCUkZNc1JVRkRRekJFTEUxQlFVMTRRaXhOUVVGTmVVSXNUVUZFWWl4RlFVTnhRa01zU1VGQlNUSkVMRmxCUkhwQ08wRkJSV1o2UkN4alFVRk5MRVZCUVVWRExGVkJRVlYxUkN4VlFVRmFMRVZCUVhkQ09VZ3NUMEZCVDNGRExGZEJRUzlDTzBGQlJsTXNUMEZCYWtJN08wRkJTMEVzVlVGQlNUTkNMRkZCUVVvc1JVRkJiVUk3UVVGQlJYTklMRzFDUVVGWE1VUXNTVUZCV0N4RFFVRm5RalZFTEZGQlFXaENMRWRCUVRKQ1FTeFJRVUV6UWp0QlFVRnpRenM3UVVGRk0wUTdRVUZEUVN4VlFVRkpMRU5CUVVOblF5eE5RVUZOYlVVc2NVSkJRVmdzUlVGQmEwTnRRaXhYUVVGWE1VUXNTVUZCV0N4RFFVRm5Rbk5ETEc5Q1FVRm9RaXhIUVVGMVEyeEZMRTFCUVUxdFJTeHhRa0ZCTjBNN08wRkJSV3hETzBGQlEwRXNZVUZCVHl4elFrRkJXU3hWUVVGRGIwSXNUMEZCUkN4RlFVRmhPMEZCUXpsQ0xGbEJRVWxETEZGQlFWRjRSaXhOUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDZDBRc1ZVRkJka0lzUTBGQldqczdRVUZGUVhKSUxHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxEUkNRVUUwUW1wQ0xFMUJRVTE1UWl4TlFVRnNReXhIUVVFeVF5eE5RVUYyUkN4RlFVRXJSRFpFTEZWQlFTOUVPMEZCUTBFc1dVRkJTVWNzVjBGQlZ5dzRRa0ZCYjBKNlJpeExRVUZ3UWl4RlFVRXlRbTlHTEZWQlFUTkNMRVZCUVhWRGVrWXNWMEZCZGtNc1JVRkJiMFJMTEUxQlFVMTVRaXhOUVVFeFJDeEZRVUZyUlN0RUxFdEJRV3hGTEVOQlFXWTdRVUZEUVVNc2FVSkJRVk5ETEZGQlFWUXNRMEZCYTBJc1ZVRkJRM0pHTEV0QlFVUXNSVUZCVnp0QlFVTXpRa3dzWjBKQlFVMTVReXhUUVVGT0xFTkJRV2RDY0VNc1MwRkJhRUlzUlVGQmRVSXNSVUZCUlhOR0xFMUJRVTFPTEZsQlFWSXNSVUZCYzBJM1JTeFRRVUZUTkVVc1ZVRkJMMElzUlVGQmRrSTdRVUZEUkN4VFFVWkVPenRCUVVsQmNFWXNZMEZCVFZVc1owSkJRVTRzUTBGQmRVSXdSU3hWUVVGMlFpeEpRVUZ4UTBzc1VVRkJja003TzBGQlJVRkdMR2RDUVVGUlJTeFJRVUZTTzBGQlEwUXNUMEZhVFN4RFFVRlFPMEZCWVVRN08wRkJSVVE3T3pzN096czdLMEpCU1ZkMlJDeFJMRVZCUVZVN1FVRkRia0lzVjBGQlN6QkVMSEZDUVVGTUxFZEJRVFpDTVVRc1VVRkJOMEk3UVVGRFJEczdRVUZGUkRzN096dHRRMEZEWld4Q0xFY3NSVUZCU3p0QlFVTnNRaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTVzlHTEdGQlFXRndSU3hKUVVGSldTeEpRVUZLTEVOQlFWTkRMRkZCUVRGQ096dEJRVVZCTlVRc1kwRkJVV2RFTEVkQlFWSXNRMEZCV1N3MFFrRkJORUpxUWl4TlFVRk5lVUlzVFVGQmJFTXNSMEZCTWtNc1RVRkJka1FzUlVGQkswUlVMRWRCUVM5RU8wRkJRMEVzVlVGQlNYbEZMRmRCUVZjc09FSkJRVzlDZWtZc1MwRkJjRUlzUlVGQk1rSnZSaXhWUVVFelFpeEZRVUYxUTNCRkxFbEJRVWxaTEVsQlFVb3NRMEZCVTNSRkxFdEJRV2hFTEVOQlFXWTdRVUZEUVRCRExGbEJRVTFWTEdkQ1FVRk9MRU5CUVhWQ01FVXNWVUZCZGtJc1NVRkJjVU5MTEZGQlFYSkRPenRCUVVWQlNTeHBRa0ZCVnl4WlFVRk5PMEZCUTJZN1FVRkRRVGRHTEdOQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0pwUXl4alFVRkpMME1zU1VGQlNTdERMRVZCUkdFc1JVRkRWR3BITEUxQlFVMHNWVUZFUnl4RlFVTlRNRVFzVFVGQlRWSXNTVUZCU1ZVc1JVRkVia0lzUlVGRGRVSkJMRWxCUVVsV0xFbEJRVWxSTEVsQlJDOUNPMEZCUlhKQ1NTeG5Ra0ZCVFN4RlFVRkZTU3hOUVVGTkxFZEJRVklzUlVGQllUaEVMRkZCUVZFNVJpeE5RVUZOZVVJc1RVRkJNMEk3UVVGR1pTeFRRVUYyUWp0QlFVbEVMRTlCVGtRN08wRkJVVUVzVlVGQlNYQkNMRkZCUVZFN1FVRkRWblpETEdOQlFVMXJSQ3hKUVVGSmJFUXNTVUZFUVR0QlFVVldNRVFzWTBGQlRWSXNTVUZCU1ZFc1NVRkdRVHRCUVVkV2NrVXNZVUZCU3paRUxFbEJRVWxWTEVWQlNFTTdRVUZKVm5CRkxHVkJRVTh3UkN4SlFVRkpXU3hKUVVGS0xFTkJRVk4wUlN4TFFVcE9PMEZCUzFaclJDeHBRa0ZCVXpSRkxGVkJURU03UVVGTlZuQklMR3RDUVVGVlowUXNTVUZCU1Zrc1NVRkJTaXhEUVVGVE5VUTdRVUZPVkN4UFFVRmFPenRCUVZOQkxGVkJRVWxuUXl4TlFVRk5ORVlzY1VKQlFWWXNSVUZCYVVNN1FVRkRMMEl6U0N4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N4elFrRkJXaXhGUVVGdlExb3NTMEZCY0VNN1FVRkRRVXdzWTBGQlRUUkdMSEZDUVVGT0xFTkJRVFJDZGtZc1MwRkJOVUk3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3T3poQ1FVTlZRU3hMTEVWQlFVOHdSaXhUTEVWQlFWYzdRVUZETVVJc1ZVRkJTUzlHTEZGQlFWRXNTVUZCV2pzN1FVRkZRVUVzV1VGQlRVTXNVVUZCVGpzN1FVRkZRU3hWUVVGSlJDeE5RVUZOZDBVc1QwRkJUaXhMUVVGclFpeEpRVUYwUWl4RlFVRTBRanRCUVVNeFFqdEJRVU5CTEZsQlFVbDNRaXhaUVVGWk8wRkJRMlJzU1N4blFrRkJUU3hSUVVSUkxFVkJRMFV3UkN4TlFVRk5lRUlzVFVGQlRXVXNTVUZFWkN4RlFVTnZRbGNzU1VGQlNURkNMRTFCUVUxbExFbEJRVTRzUjBGQllTeFZRVVJ5UXp0QlFVVmtZU3huUWtGQlRTeEZRVUZGYjBNc1UwRkJVMmhGTEUxQlFVMURMRkZCUVdwQ0xFVkJRVEpDTmtZc1VVRkJVVGxHTEUxQlFVMTVRaXhOUVVGNlF5eEZRVUZwUkhkRkxGZEJRVmMxUml4TlFVRk5hVU1zUzBGQmJFVTdRVUZHVVN4VFFVRm9RanM3UVVGTFFYSkZMR2RDUVVGUlowUXNSMEZCVWl4RFFVRlpMRFpDUVVGYUxFVkJRVEpEV2l4TFFVRXpReXhGUVVGclJEQkdMRk5CUVd4RUxFVkJRVFpFUXl4VFFVRTNSRHM3UVVGRlFTeFpRVUZKTTBZc1RVRkJUVFpHTEV0QlFVNHNTMEZCWjBJc2QwSkJRVmRETEUxQlFTOUNMRVZCUVhWRE8wRkJRM0pETEdOQlFVazVSaXhOUVVGTkswWXNTMEZCVGl4TFFVRm5RaXgzUWtGQlYwTXNUVUZCTDBJc1JVRkJkVU03UVVGRGNrTk1MSE5DUVVGVmNFVXNTVUZCVml4RFFVRmxkRVVzUzBGQlppeEhRVUYxUWl0RExFMUJRVTFPTEVsQlFUZENPMEZCUTBRN1FVRkRSaXhUUVVwRUxFMUJTVTg3UVVGRFRHbEhMRzlDUVVGVmNFVXNTVUZCVml4RFFVRmxNRVVzWVVGQlppeEhRVUVyUW1wSExFMUJRVTAyUml4TFFVRnlRenRCUVVOQlJpeHZRa0ZCVlhCRkxFbEJRVllzUTBGQlpYUkZMRXRCUVdZc1IwRkJkVUlyUXl4TlFVRk5UaXhKUVVFM1FqdEJRVU5CTEdOQlFVbE5MRTFCUVUwclJpeExRVUZPTEV0QlFXZENMSGRDUVVGWFJ5eE5RVUV2UWl4RlFVRjFRenRCUVVOeVExQXNjMEpCUVZWd1JTeEpRVUZXTEVOQlFXVTBSU3hUUVVGbUxFZEJRVEpDYmtjc1RVRkJUU3RHTEV0QlFXcERPMEZCUTBRN1FVRkRSanM3UVVGRlJEdEJRVU5CTEZsQlFVbE1MRk5CUVVvc1JVRkJaVHRCUVVOaVF5eHZRa0ZCVlhSRkxFVkJRVllzUjBGQlpYRkZMRlZCUVZWS0xFbEJRWHBDTzBGQlEwRkxMRzlDUVVGVmNFVXNTVUZCVml4RFFVRmxReXhSUVVGbUxFZEJRVEJDYTBVc1ZVRkJWWFpHTEU5QlFYQkRPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFpRVUZKTEVOQlFVTlNMRTFCUVUxdFJTeHhRa0ZCV0N4RlFVRnJRelpDTEZWQlFWVndSU3hKUVVGV0xFTkJRV1Z6UXl4dlFrRkJaaXhIUVVGelEyeEZMRTFCUVUxdFJTeHhRa0ZCTlVNN08wRkJSV3hEYmtVc1kwRkJUV0VzU1VGQlRpeERRVUZYYVVJc1YwRkJXQ3hEUVVGMVFtdEZMRk5CUVhaQ08wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096dHJRMEZEWTFNc1R5eEZRVUZUZWtZc1J5eEZRVUZMTzBGQlF6RkNMRlZCUVVsb1FpeFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlNVRXNUVUZCVFVNc1VVRkJUaXhIUVVGcFFpeERRVUZxUWl4TFFVRjFRbVVzU1VGQlNWa3NTVUZCU2l4RFFVRlRiME1zVDBGQmNFTXNSVUZCTmtNN1FVRkRNME5vUlN4alFVRk5ReXhSUVVGT08wRkJRMEVzV1VGQlNUQkdMRTlCUVU4elJTeEpRVUZKV1N4SlFVRktMRU5CUVZOeFJTeFRRVUZ3UWp0QlFVTkJMRmxCUVVrelNTeFJRVUZSTEhOQ1FVRlZNRVFzU1VGQlNWa3NTVUZCU2l4RFFVRlRkRVVzUzBGQmJrSXNRMEZCV2p0QlFVTkJMRmxCUVVsdlNpeGhRVUZoUkN4UlFVRlJSU3hWUVVGU0xFTkJRVzFDYUVJc1NVRkJia0lzUTBGQmFrSTdPMEZCUlVFc1dVRkJTVE5GTEVsQlFVbFpMRWxCUVVvc1EwRkJVekJGTEdGQlFWUXNTMEZCTWtJc2QwSkJRVmROTEV0QlFURkRMRVZCUVdsRU8wRkJReTlETEdOQlFVazFSaXhKUVVGSldTeEpRVUZLTEVOQlFWTTBSU3hUUVVGVUxFdEJRWFZDTEhkQ1FVRlhTeXhIUVVGMFF5eEZRVUV5UXp0QlFVTjZReXhuUWtGQlNVTXNUVUZCVFVvc1YwRkJWemxJTEVkQlFYSkNPMEZCUTBFc1owSkJRVWx0U1N4UlFVRlJUQ3hYUVVGWFRTeEpRVUYyUWp0QlFVTkJReXhyUWtGQlRVTXNVMEZCVGl4RFFVRm5Ra01zVFVGQmFFSXNRMEZCZFVKRExFdEJRWFpDTEVOQlFUWkNUaXhIUVVFM1FpeEZRVUZyUXl4RFFVRkRReXhMUVVGRUxFVkJRVkVzUTBGQlVpeEZRVUZYVFN4TlFVRllMRU5CUVd0Q0wwb3NTMEZCYkVJc1EwRkJiRU03UVVGRFJDeFhRVXBFTEUxQlNVOHNTVUZCU1RCRUxFbEJRVWxaTEVsQlFVb3NRMEZCVXpSRkxGTkJRVlFzUzBGQmRVSXNkMEpCUVZkSUxFMUJRWFJETEVWQlFUaERPMEZCUTI1RUxHZENRVUZKVXl4UFFVRk5TaXhYUVVGWE9VZ3NSMEZCY2tJN1FVRkRRU3huUWtGQlNXMUpMRk5CUVZGTUxGZEJRVmROTEVsQlFYWkNPMEZCUTBGR0xHbENRVUZKU3l4TlFVRktMRU5CUVZkS0xFMUJRVmdzUlVGQmEwSjZTaXhMUVVGc1FqdEJRVU5FTEZkQlNrMHNUVUZKUVR0QlFVTk1iMG9zZFVKQlFWYzVTQ3hIUVVGWUxFTkJRV1U0U0N4WFFVRlhUU3hKUVVFeFFpeEpRVUZyUXpGS0xFdEJRV3hETEVOQlJFc3NRMEZEYjBNN1FVRkRNVU03UVVGRFJpeFRRVnBFTEUxQldVODdRVUZEVEN4alFVRkpNRVFzU1VGQlNWa3NTVUZCU2l4RFFVRlRkRVVzUzBGQllpeEZRVUZ2UWp0QlFVTnNRbTlLTEhWQ1FVRlhPVWdzUjBGQldDeERRVUZsT0Vnc1YwRkJWMDBzU1VGQk1VSXNTVUZCYTBNeFNpeExRVUZzUXl4RFFVUnJRaXhEUVVOMVFqdEJRVU14UXl4WFFVWkVMRTFCUlU4N1FVRkRUQ3h0UWtGQlQyOUtMRmRCUVZjNVNDeEhRVUZZTEVOQlFXVTRTQ3hYUVVGWFRTeEpRVUV4UWl4RFFVRlFMRU5CUkVzc1EwRkRiVU03UVVGRGVrTTdRVUZEUmp0QlFVTkdMRTlCZWtKRUxFMUJlVUpQTzBGQlEwdzdRVUZEUVM5SkxHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxITkRRVUZ6UTJwQ0xFMUJRVTFETEZGQlFUVkRMRWRCUVhWRUxGZEJRWFpFTEVkQlFYRkZaU3hKUVVGSldTeEpRVUZLTEVOQlFWTnZReXhQUVVFNVJTeEhRVUYzUml4SFFVRndSenRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3YjBOQlEyZENhRVFzUnl4RlFVRkxPMEZCUTI1Q0xGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN1FVRkRRUzlDTEdOQlFWRm5SQ3hIUVVGU0xFTkJRVmtzYlVKQlFWb3NSVUZCYVVOcVFpeE5RVUZOZVVJc1RVRkJka01zUlVGQkswTlVMRWRCUVM5RE96dEJRVVZCTEZWQlFVbFNMRlZCUVZWUkxFbEJRVWxaTEVsQlFVb3NRMEZCVTBNc1VVRkJka0k3UVVGRFFTeFZRVUZKYzBRc1YwRkJWMjVHTEUxQlFVMVZMR2RDUVVGT0xFTkJRWFZDUml4UFFVRjJRaXhEUVVGbU96dEJRVVZCTEZWQlFVa3lSU3hSUVVGS0xFVkJRV003UVVGRFdtNUdMR05CUVUxclFpeGhRVUZPTEVOQlFXOUNhVVVzVTBGQlUyaEdMRkZCUVRkQ0xFVkJRWFZEWVN4SFFVRjJRenRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTDBNc1owSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2VVSkJRVm9zUlVGQmRVTlVMRTlCUVhaRE8wRkJRMFE3UVVGRFJqczdPM2RDUVM5T1V6dEJRVUZGTEdGQlFVOHNTMEZCUzA4c1NVRkJXanRCUVVGdFFqczdRVUZGTDBJN096czdPenM3ZDBKQlNXRTdRVUZCUlN4aFFVRlBMRXRCUVV0cFF5eFBRVUZhTzBGQlFYTkNPenRCUVVWeVF6czdPenM3T3p0M1FrRkpZVHRCUVVGRkxHRkJRVThzUzBGQlMzZENMRTlCUVZvN1FVRkJjMEk3TzBGQlJYSkRPenM3T3pzN08zZENRVWxYTzBGQlFVVXNZVUZCVHl4TFFVRkxja1VzVVVGQlRDeERRVUZqU2l4SlFVRnlRanRCUVVFMFFqczdRVUZGZWtNN096czdPenM3ZDBKQlNXZENPMEZCUVVVc1lVRkJUeXhMUVVGTFZ5eG5Ra0ZCV2p0QlFVRXJRanM3TzB0Qk5VbHVSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN2EwSkJkVlpsTmtRc1ZUczdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoVlpqczdPenM3TzBGQlJVRTdPenM3U1VGSlRTdERMR1VzUTBGQlowSXNNa0k3UVVGRGNFSTdPenM3TzBGQlRVRTdPenM3UVVGSlFTd3lRa0ZCV1VNc1RVRkJXaXhGUVVGdlFpOUhMRTlCUVhCQ0xFVkJRVFpDWWl4WFFVRTNRaXhGUVVFd1F6WklMRXRCUVRGRExFVkJRV2xFYUVNc1MwRkJha1FzUlVGQmQwUTdRVUZCUVRzN1FVRkRkRVFzVVVGQlNYaEdMRkZCUVZFc1NVRkJXanM3UVVGRlFVRXNWVUZCVFhsSUxFOUJRVTRzUjBGQlowSkdMRTFCUVdoQ08wRkJRMEYyU0N4VlFVRk5NRVVzVVVGQlRpeEhRVUZwUW14RkxFOUJRV3BDTzBGQlEwRlNMRlZCUVUxNVFpeE5RVUZPTEVkQlFXVXJSaXhMUVVGbU8wRkJRMEY0U0N4VlFVRk5NRWdzVFVGQlRpeEhRVUZsYkVNc1MwRkJaanM3UVVGRlFYaEdMRlZCUVUxSExGRkJRVTRzUjBGQmFVSXNNRUpCUVdWU0xGZEJRV1lzUTBGQmFrSTdPMEZCUlVGTExGVkJRVTFoTEVsQlFVNHNSMEZCWVRCSExFOUJRVTh4Unl4SlFVRndRanRCUVVOQllpeFZRVUZOVnl4clFrRkJUanRCUVVORU96czdPM2xEUVVWdlFqdEJRVU51UWl4VlFVRkpXQ3hSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVN4VlFVRkpRU3hOUVVGTmVVSXNUVUZCVml4RlFVRnJRanRCUVVOb1FucENMR05CUVUweVNDeFRRVUZPTEVkQlFXdENNMGdzVFVGQlRXRXNTVUZCVGl4RFFVRlhReXhYUVVGWUxFTkJRWFZDWkN4TlFVRk5lVUlzVFVGQk4wSXNSVUZCY1VNc1ZVRkJRMVFzUjBGQlJDeEZRVUZUTzBGQlF6bEVMR05CUVVsQkxFbEJRVWxzUkN4SlFVRktMRXRCUVdFc1ZVRkJZaXhKUVVFeVFtdEVMRWxCUVVrclF5eEZRVUZLTEV0QlFWY3ZSQ3hOUVVGTk1FZ3NUVUZCYUVRc1JVRkJkMFE3UVVGRGRFUjZTaXh2UWtGQlVXZEVMRWRCUVZJc1EwRkJXU3cyUWtGQldpeEZRVUV5UTBRc1IwRkJNME03UVVGRFFXaENMR3RDUVVGTk1rTXNWMEZCVGl4RFFVRnJRak5DTEVkQlFXeENPMEZCUTBRN1FVRkRSaXhUUVV4cFFpeERRVUZzUWp0QlFVMUVPMEZCUTBZN096dDNRMEZGYlVJN1FVRkRiRUlzVlVGQlNXaENMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKUVN4TlFVRk5Na2dzVTBGQlZpeEZRVUZ4UWp0QlFVTnVRak5JTEdOQlFVMHlTQ3hUUVVGT0xFTkJRV2RDZUVjc1RVRkJhRUk3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3T3pzN09FSkJSMU03UVVGRFVDeFZRVUZKYmtJc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOUJMRTFCUVUxNVNDeFBRVUZPTEVOQlFXTkhMRk5CUVdRc1EwRkJkMEkxU0N4TlFVRk5NRVVzVVVGQk9VSXNRMEZCVURzN1FVRkZRVEZGTEZsQlFVMXZRaXhwUWtGQlRqczdRVUZGUVR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN1FVRlpRVHM3T3pzMlFrRkpVMk1zVVN4RlFVRlZPMEZCUTJwQ0xGZEJRVXN2UWl4UlFVRk1MRU5CUVdORExFOUJRV1FzUTBGQmMwSXNWVUZCUTBNc1MwRkJSQ3hGUVVGWE8wRkJReTlDTmtJc2FVSkJRVk0zUWl4TFFVRlVPMEZCUTBRc1QwRkdSRHRCUVVkRU96dEJRVVZFT3pzN096czdPeXRDUVVsWE5rSXNVU3hGUVVGVk8wRkJRMjVDTEZkQlFVdHRRaXhyUWtGQlRDeEhRVUV3UW01Q0xGRkJRVEZDTzBGQlEwUTdPMEZCUlVRN096czdaME5CUTFsc1FpeEhMRVZCUVVzN1FVRkRaaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWxMTEZGQlFWRTdRVUZEVm5aRExHTkJRVTFyUkN4SlFVRkpiRVFzU1VGRVFUdEJRVVZXV0N4aFFVRkxOa1FzU1VGQlNWa3NTVUZCU2l4RFFVRlRhMFVzVFVGR1NqdEJRVWRXT1VRc1kwRkJUV2hDTEVsQlFVbFpMRWxCUVVvc1EwRkJVMGs3UVVGSVRDeFBRVUZhT3p0QlFVMUJMRlZCUVVsb1F5eE5RVUZOY1VRc2EwSkJRVllzUlVGQk9FSTdRVUZETlVKeVJDeGpRVUZOY1VRc2EwSkJRVTRzUTBGQmVVSm9SQ3hMUVVGNlFqdEJRVU5FTzBGQlEwWTdPenQzUWtGMlEyRTdRVUZCUlN4aFFVRlBMRXRCUVV0eFJTeFJRVUZhTzBGQlFYVkNPenRCUVVWMlF6czdPenM3T3p0M1FrRkpWenRCUVVGRkxHRkJRVThzUzBGQlMzWkZMRkZCUVV3c1EwRkJZMG9zU1VGQmNrSTdRVUZCTkVJN096dExRVzVITTBNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMnRDUVhkSlpYVklMR1U3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRlRWxtT3pzN08wRkJSVUVzU1VGQlRVOHNZVUZCWVN4RlFVRkRha0lzVDBGQlR5eG5Ra0ZCVWl4RlFVRXdRbFFzVVVGQlVTeHBRa0ZCYkVNc1JVRkJia0k3TzBGQlJVRTdPenM3T3p0SlFVdE5Na0lzVlR0QlFVVktMSE5DUVVGWmJra3NWMEZCV2l4RlFVRjVRanRCUVVGQk96dEJRVU4yUWl4UlFVRkpTeXhSUVVGUkxFbEJRVm83TzBGQlJVRkJMRlZCUVUxelFpeFZRVUZPTEVkQlFXMUNMRVZCUVc1Q08wRkJRMEYwUWl4VlFVRk5SU3hSUVVGT0xFZEJRV2xDTEVWQlFXcENPenRCUVVWQkxGTkJRVXMyU0N4TFFVRk1MRWRCUVdGd1NTeGxRVUZsTEVWQlFUVkNPenRCUVVWQkxGTkJRVXR4U1N4blFrRkJUQ3hEUVVGelFpeExRVUZMUkN4TFFVRXpRanRCUVVORU96czdPelJDUVVsUE4wWXNVU3hGUVVGVk8wRkJRMmhDTEZkQlFVdGFMRlZCUVV3c1EwRkJaMEkwUkN4SlFVRm9RaXhEUVVGeFFtaEVMRkZCUVhKQ08wRkJRMFE3T3p0NVFrRkZTWGxFTEVrc1JVRkJUVHRCUVVOVUxGVkJRVWx6UXl4UFFVRlBkRU1zUzBGQlMyaEpMRXRCUVV3c1EwRkJWeXhIUVVGWUxFTkJRVmc3TzBGQlJVRXNZVUZCVHl4TFFVRkxkVXNzWTBGQlRDeERRVUZ2UWtRc1NVRkJjRUlzUTBGQlVEdEJRVU5FT3pzN0swSkJSVlYwUXl4SkxFVkJRVTA3UVVGRFppeFZRVUZKT1Vnc1UwRkJVeXhGUVVGaU8wRkJRMEVzVlVGQlNXOUxMRTlCUVU5MFF5eExRVUZMYUVrc1MwRkJUQ3hEUVVGWExFZEJRVmdzUTBGQldEdEJRVU5CUlN4aFFVRlBiVW9zU1VGQlVDeEhRVUZqYVVJc1MwRkJTMFVzUjBGQlRDeEZRVUZrTzBGQlEwRjBTeXhoUVVGUFpTeEhRVUZRTEVkQlFXRXNTMEZCUzNOS0xHTkJRVXdzUTBGQmIwSkVMRWxCUVhCQ0xFTkJRV0k3TzBGQlJVRXNZVUZCVDNCTExFMUJRVkE3UVVGRFJEczdPMjFEUVVWamIwc3NTU3hGUVVGTk8wRkJRMjVDTEZWQlFVbHlTaXhOUVVGTkxFdEJRVXR0U2l4TFFVRm1PMEZCUTBGRkxGZEJRVXN4U0N4UFFVRk1MRU5CUVdFc1ZVRkJRMnBFTEV0QlFVUXNSVUZCVnp0QlFVTjBRbk5DTEdOQlFVMUJMRWxCUVVsMFFpeExRVUZLTEVOQlFVNDdRVUZEUkN4UFFVWkVPenRCUVVsQkxHRkJRVTl6UWl4SFFVRlFPMEZCUTBRN096dHhRMEZGWjBKRUxFMHNSVUZCVVR0QlFVRkJPenRCUVVWMlFpeFZRVUZKZVVvc1ZVRkJWU3hUUVVGV1FTeFBRVUZWTEVOQlFVTkRMRk5CUVVRc1JVRkJaVHM3UVVGRk0wSkJMR3RDUVVGVlF5eExRVUZXTEVOQlFXZENMRlZCUVVORExFMUJRVVFzUlVGQldUdEJRVU14UWl4cFFrRkJTME1zVlVGQlRDeERRVUZuUWtRc1RVRkJhRUk3UVVGRFJDeFRRVVpFTzBGQlNVUXNUMEZPUkRzN1FVRlJRU3hYUVVGTFVpeExRVUZNTEVkQlFXRlZMRTlCUVU5RExGZEJRVkFzUTBGQmJVSXZTaXhOUVVGdVFpeEZRVUV5UW5sS0xFOUJRVE5DTEVOQlFXSTdRVUZGUkRzN095dENRVVZWTDBnc1N5eEZRVUZQTzBGQlEyaENMRmRCUVV0cFFpeFZRVUZNTEVOQlFXZENaaXhQUVVGb1FpeERRVUYzUWl4VlFVRkRNa0lzVVVGQlJDeEZRVUZqTzBGQlEzQkRRU3hwUWtGQlV6ZENMRXRCUVZRN1FVRkRSQ3hQUVVaRU8wRkJSMFE3T3pzclFrRkZWV3RKTEUwc1JVRkJVVHM3UVVGRmFrSXNWVUZCU1ROS0xFMUJRVTB5U2l4UFFVRlBOVW9zVFVGQmFrSTdRVUZEUVN4VlFVRkpaMHNzWjBKQlFVbzdPMEZCUlVFc1ZVRkJTUzlLTEVsQlFVbG5TeXhYUVVGS0xFdEJRVzlDU0N4TlFVRjRRaXhGUVVGblF6dEJRVU01UWtVc2EwSkJRVlZGTEZkQlFWY3hReXhOUVVGeVFqdEJRVU5FT3p0QlFVVkVMRlZCUVVsMlNDeEpRVUZKWjBzc1YwRkJTaXhMUVVGdlFqTkNMRXRCUVhoQ0xFVkJRU3RDTzBGQlF6ZENNRUlzYTBKQlFWVkZMRmRCUVZkcVF5eExRVUZ5UWp0QlFVTkVPenRCUVVWRUxGVkJRVWxyUXl4alFVRmpVQ3hQUVVGUFVTeFBRVUY2UWpzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNWVUZCU1VNc1YwRkJWM0JMTEVsQlFVa3lTaXhQUVVGUFZTeEpRVUZZTEVOQlFXWTdPMEZCUlVFN08wRkJSVUVzVlVGQlNWWXNUMEZCVDNwTExFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1NVRkJORUlzUTBGQlEyZE1MRmxCUVZsc1RDeFJRVUZhTEVOQlFYRkNMRk5CUVhKQ0xFTkJRV3BETEVWQlFXdEZPMEZCUTJoRkxHRkJRVXR6VEN4VlFVRk1MRU5CUVdkQ08wRkJRMlE1UXl4cFFrRkJUeXRETEZkQlFWYzFReXhOUVVSS08wRkJSV1JNTEdsQ1FVRlBlVU1zVDBGR1R6dEJRVWRrY2tjc2FVSkJRVTkzUnl4WFFVaFBPMEZCU1dRdlNTeG5Ra0ZCVFdsS08wRkJTbEVzVTBGQmFFSTdRVUZOUkRzN1FVRkZSQ3hWUVVGSlZDeFBRVUZQZWtzc1NVRkJVQ3hMUVVGblFpeExRVUZ3UWl4RlFVRXlRanRCUVVONlFpeGhRVUZMYjB3c1ZVRkJUQ3hEUVVGblFqdEJRVU5rT1VNc2FVSkJRVThyUXl4WFFVRlhkRU1zUjBGRVNqdEJRVVZrV0N4cFFrRkJUM2xETEU5QlJrODdRVUZIWkhKSExHbENRVUZQZDBjc1YwRklUenRCUVVsa0wwa3NaMEpCUVUxcFNqdEJRVXBSTEZOQlFXaENPMEZCVFVRN08wRkJSVVFzVlVGQlNWUXNUMEZCVDNwTExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE5VSXNZVUZCUzI5TUxGVkJRVXdzUTBGQlowSTdRVUZEWkRsRExHbENRVUZQSzBNc1YwRkJWemxETEUxQlJFbzdRVUZGWkVnc2FVSkJRVTk1UXl4UFFVWlBPMEZCUjJSeVJ5eHBRa0ZCVDNkSE8wRkJTRThzVTBGQmFFSTdRVUZMUkR0QlFVTkdPenM3ZDBKQmJFZFZPMEZCUVVVc1lVRkJUeXhMUVVGTFppeExRVUZhTzBGQlFXOUNPenM3T3p0QlFYTkhOVUlzU1VGQlNXOUNMR3REUVVGaExFVkJRVU0xUXl4UlFVRlJMRkZCUVZRc1JVRkJiVUpOTEV0QlFVc3NTMEZCZUVJc1JVRkJLMEpTTEZGQlFWRXNVVUZCZGtNc1JVRkJha0k3UVVGRFFTeEpRVUZKZDBNc2EwTkJRV0VzUlVGQlF6RkRMRkZCUVZFc1VVRkJWQ3hGUVVGdFFsTXNUMEZCVHl4UFFVRXhRaXhGUVVGcVFqdHJRa0ZEVVd0Q0xGVTdPenM3T3pzN1FVTTVTR1k3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUVzYzBOQlFYTkRMSFZEUVVGMVF5eG5Ra0ZCWjBJN08wRkJSVGRHTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTEVkQlFVYzdRVUZEU0RzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMEZCUlVFN096czdPMGxCUzAxelFpeFBPMEZCUTBvN096czdPenM3T3pzN096dEJRV1ZCT3pzN096czdRVUZOUVN4dFFrRkJXVFZDTEV0QlFWb3NSVUZCYlVJMlFpeEhRVUZ1UWl4RlFVRjNRa01zVFVGQmVFSXNSVUZCWjBNN1FVRkJRVHM3UVVGRE9VSXNVVUZCU1hSS0xGRkJRVkVzU1VGQldqczdRVUZGUVVFc1ZVRkJUWGxDTEUxQlFVNHNSMEZCWlN0R0xFdEJRV1k3UVVGRFFYaElMRlZCUVUxaExFbEJRVTRzUjBGQllYZEpMRWRCUVdJN08wRkJSVUZ5U2l4VlFVRk5Na0lzVDBGQlRpeEhRVUZuUWpKSUxFOUJRVTlETEZWQlFWQXNSMEZCYjBJc1MwRkJjRU03TzBGQlJVRjJTaXhWUVVGTmJVUXNWVUZCVGl4SFFVRnRRaXhGUVVGdVFqdEJRVU5CYmtRc1ZVRkJUWE5DTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3UVVGRFFYUkNMRlZCUVUxM1NpeGhRVUZPTEVkQlFYTkNMRVZCUVhSQ096dEJRVVZCU0N4UlFVRkpka2tzVjBGQlNpeERRVUZuUWpCSExFdEJRV2hDTEVWQlFYVkNMRlZCUVVONFJ5eEhRVUZFTEVWQlFWTTdRVUZET1VJN1FVRkRRU3hWUVVGSlFTeEpRVUZKVVN4SlFVRktMRXRCUVdGblJ5eExRVUZxUWl4RlFVRjNRanRCUVVOMFFuWktMR2RDUVVGUmQwd3NTVUZCVWl4RFFVRmhMSGxDUVVGaUxFVkJRWGREZWtrc1IwRkJlRU03UVVGRFFTeG5Ra0ZCVVVFc1NVRkJTV3hFTEVsQlFWbzdRVUZEUlN4bFFVRkxMRk5CUVV3N1FVRkJaMEpyUXl4clFrRkJUVEJLTEZWQlFVNHNRMEZCYVVJeFNTeEhRVUZxUWl4RlFVRjFRanRCUVVOMlF5eGxRVUZMTEZGQlFVdzdRVUZCWldoQ0xHdENRVUZOTWtvc1pVRkJUaXhEUVVGelFqTkpMRWRCUVhSQ0xFVkJRVFJDTzBGQlF6TkRMR1ZCUVVzc1VVRkJURHRCUVVGbGFFSXNhMEpCUVUwMFNpeGxRVUZPTEVOQlFYTkNOVWtzUjBGQmRFSXNSVUZCTkVJN1FVRklOME03UVVGTFJEdEJRVU5HTEV0QlZrUTdRVUZYUkRzN1FVRkZSRHM3T3pzN096czdPenRCUVd0Q1FUczdPenM3T3pzN096c3lRa0ZWVDNaQ0xFMHNSVUZCVVc5RUxGTXNSVUZCVjJ4RUxGY3NSVUZCYlVRN1FVRkJRU3hWUVVGMFEydExMRXRCUVhORExIVkZRVUU1UWl4TFFVRTRRanRCUVVGQkxGVkJRWFpDUXl4SFFVRjFRaXgxUlVGQmFrSXNTMEZCYVVJN1FVRkJRU3hWUVVGV09Vd3NVVUZCVlRzN1FVRkRNMFVzVlVGQlNXZERMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtyU2l4WFFVRlhMRVZCUVdZN08wRkJSVUZCTEdWQlFWTkVMRWRCUVZRc1IwRkJaVUVzUjBGQlpqdEJRVU5CUXl4bFFVRlRSaXhMUVVGVUxFZEJRV2xDUVN4TFFVRnFRanRCUVVOQlJTeGxRVUZUZEVzc1RVRkJWQ3hIUVVGclFrRXNUVUZCYkVJN1FVRkRRWE5MTEdWQlFWTnNTQ3hUUVVGVUxFZEJRWEZDUVN4VFFVRnlRanRCUVVOQmEwZ3NaVUZCVTNCTExGZEJRVlFzUjBGQmRVSkJMRmRCUVhaQ096dEJRVVZCTEZWQlFVa3pRaXhSUVVGS0xFVkJRVzFDTzBGQlFVVXJUQ3hwUWtGQlV5OU1MRkZCUVZRc1IwRkJiMEpCTEZGQlFYQkNPMEZCUVN0Q096dEJRVVZ3UkVNc1kwRkJVV2RFTEVkQlFWSXNRMEZCV1N4dFJFRkJXaXhGUVVGcFJUaEpMRkZCUVdwRk96dEJRVVZCTERSQ1FVRmpRU3hSUVVGa0xFVkJRWGRDTEVWQlFVTm9TQ3hSUVVGUkxFdEJRVlFzUlVGQmVFSTdPMEZCUlVFc1lVRkJUeTlETEUxQlFVMW5TeXhQUVVGT0xFTkJRV05FTEZGQlFXUXNRMEZCVUR0QlFVTkVPenM3YjBOQlJXVkJMRkVzUlVGQlZUdEJRVU40UWl4VlFVRkpMMG9zVVVGQlVTeEpRVUZhTzBGQlEwRXZRaXhqUVVGUlowUXNSMEZCVWl4RFFVRlpMRzFFUVVGYUxFVkJRV2xGT0Vrc1VVRkJha1U3TzBGQlJVRXNORUpCUVdOQkxGRkJRV1FzUlVGQmQwSXNSVUZCUTJoSUxGRkJRVkVzU1VGQlZDeEZRVUY0UWpzN1FVRkZRU3hoUVVGUEwwTXNUVUZCVFdkTExFOUJRVTRzUTBGQlkwUXNVVUZCWkN4RFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3T3pzN09FSkJWVlYwU3l4TkxFVkJRVkYzU3l4TkxFVkJRVFpFTzBGQlFVRXNWVUZCY2tSS0xFdEJRWEZFTEhWRlFVRTNReXhMUVVFMlF6dEJRVUZCTEZWQlFYUkRReXhIUVVGelF5eDFSVUZCYUVNc1MwRkJaME03UVVGQlFTeFZRVUY2UW1oTExFMUJRWGxDTEhWRlFVRm9RaXhKUVVGblFqdEJRVUZCTEZWQlFWWTVRaXhSUVVGVk96dEJRVU0zUlN4VlFVRkpaME1zVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N0S0xGZEJRVmNzUlVGQlpqczdRVUZGUVVFc1pVRkJVMFFzUjBGQlZDeEhRVUZsUVN4SFFVRm1PMEZCUTBGRExHVkJRVk5HTEV0QlFWUXNSMEZCYVVKQkxFdEJRV3BDTzBGQlEwRkZMR1ZCUVZOMFN5eE5RVUZVTEVkQlFXdENRU3hOUVVGc1FqczdRVUZGUVhOTExHVkJRVk5zU1N4UlFVRlVMRWRCUVc5Q2Iwa3NUVUZCY0VJN1FVRkRRU3hWUVVGSmFrMHNVVUZCU2l4RlFVRnRRanRCUVVGRkswd3NhVUpCUVZNdlRDeFJRVUZVTEVkQlFXOUNRU3hSUVVGd1FqdEJRVUVyUWpzN1FVRkZjRVE3UVVGRFFTdE1MR1ZCUVZOcVN5eE5RVUZVTEVkQlFXdENRU3hOUVVGc1FqczdRVUZGUVRkQ0xHTkJRVkZuUkN4SFFVRlNMRU5CUVZrc09FTkJRVm9zUlVGQk5FUTRTU3hSUVVFMVJEczdRVUZGUVN3MFFrRkJZMEVzVVVGQlpDeEZRVUYzUWl4RlFVRkRhRWdzVVVGQlVTeExRVUZVTEVWQlFYaENPenRCUVVWQkxHRkJRVTh2UXl4TlFVRk5hMHNzVlVGQlRpeERRVUZwUWtnc1VVRkJha0lzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBKQkxGRXNSVUZCVlR0QlFVTjRRaXhWUVVGSkwwb3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTVzFMTEZsQlFWbEtMRmxCUVZrc1JVRkJOVUk3TzBGQlJVRXNORUpCUVdOSkxGTkJRV1FzUlVGQmVVSXNSVUZCUTNCSUxGRkJRVkVzU1VGQlZDeEZRVUY2UWpzN1FVRkZRU3hoUVVGUEwwTXNUVUZCVFd0TExGVkJRVTRzUTBGQmFVSkRMRk5CUVdwQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3ZVVKQlMwdEdMRTBzUlVGQlVUdEJRVU5ZTEZWQlFVbHFTeXhSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVR0QlFVTkJMRlZCUVVsdlN5eFZRVUZWTzBGQlExcDBUU3hqUVVGTkxFMUJSRTBzUlVGRFJUQkVMRTFCUVUxNFFpeE5RVUZOZVVJc1RVRkVaQ3hGUVVOelFrTXNTVUZCU1hWSk8wRkJSREZDTEU5QlFXUTdPMEZCU1VFc1lVRkJUeXh6UWtGQldTeFZRVUZETVVVc1QwRkJSQ3hGUVVGVmJrSXNUVUZCVml4RlFVRnhRanRCUVVOMFEzQkZMR05CUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUp6U1N4UFFVRjJRaXhGUVVGblF5eFZRVUZEY2trc1MwRkJSQ3hGUVVGWE8wRkJRM3BET1VRc2EwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2FVSkJRVm9zUlVGQkswSmpMRXRCUVM5Q08wRkJRMEVzWTBGQlNVRXNUVUZCVFVnc1NVRkJUaXhEUVVGWFNTeEpRVUZZTEV0QlFXOUNMRWRCUVhoQ0xFVkJRVFpDTzBGQlF6TkNkVVFzYjBKQlFWRjRSQ3hOUVVGTlNDeEpRVUZPTEVOQlFWZDBSU3hMUVVGdVFqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1PRWNzYlVKQlFVOXlReXhOUVVGTlNDeEpRVUZPTEVOQlFWY3dReXhKUVVGc1FqdEJRVU5FTzBGQlEwWXNVMEZRUkR0QlFWRkVMRTlCVkUwc1EwRkJVRHRCUVZWRU96dEJRVVZFT3pzN096czdPenR0UTBGTFpYQkRMRkVzUlVGQlZUdEJRVU4yUWl4WFFVRkxiVWtzYzBKQlFVd3NSMEZCT0VKdVNTeFJRVUU1UWp0QlFVTkVPenM3TkVKQlJVODJTQ3hSTEVWQlFWVTdRVUZEYUVJc1ZVRkJTUzlLTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFVTjFSaXhQUVVGRUxFVkJRVlZ1UWl4TlFVRldMRVZCUVhGQ08wRkJRM1JETEZsQlFVbHlRaXhUUVVGVFowZ3NVMEZCVTJoSUxFMUJRWFJDTzBGQlEwRXNXVUZCU1hCRUxHTkJRV052U3l4VFFVRlRjRXNzVjBGQlZDeEpRVUYzUWl4RlFVRXhRenRCUVVOQkxGbEJRVWxHTEdWQlFVbzdPMEZCUlVFN1FVRkRRU3haUVVGSk5rWXNZVUZCWVR0QlFVTm1lRWdzWjBKQlFVMHNVVUZFVXl4RlFVTkRNRVFzVFVGQlRYaENMRTFCUVUxNVFpeE5RVVJpTEVWQlEzRkNReXhKUVVGSk1VSXNUVUZCVFRKQ0xFOUJSQzlDTzBGQlJXWkRMR2RDUVVGTkxFVkJRVVZ0UWl4UlFVRlJRU3hOUVVGV08wRkJSbE1zVTBGQmFrSTdPMEZCUzBFNVJTeG5Ra0ZCVVdkRUxFZEJRVklzUTBGQldTeHpRa0ZCV2l4RlFVRnZRemhKTEZGQlFYQkRMRVZCUVRoRGVrVXNWVUZCT1VNN08wRkJSVUZCTEcxQ1FVRlhNVVFzU1VGQldDeERRVUZuUW5SRkxFdEJRV2hDTEVkQlFYZENjVU1zVjBGQmVFSTdRVUZEUVRKR0xHMUNRVUZYTVVRc1NVRkJXQ3hEUVVGblFuUkZMRXRCUVdoQ0xFTkJRWE5DWjA0c1VVRkJkRUlzUjBGQmFVTjBTeXhOUVVGTmVVSXNUVUZCZGtNN08wRkJSVUVzV1VGQlNYTkpMRk5CUVZOMFN5eE5RVUZpTEVWQlFYRkNPMEZCUTI1Q1FTeHRRa0ZCVTNOTExGTkJRVk4wU3l4TlFVRnNRanRCUVVOQk5rWXNjVUpCUVZjeFJDeEpRVUZZTEVOQlFXZENia01zVFVGQmFFSXNSMEZCZVVKelN5eFRRVUZUZEVzc1RVRkJiRU03UVVGRFJEczdRVUZGUkN4WlFVRkpjMHNzVTBGQlUwUXNSMEZCWWl4RlFVRnJRbmhGTEZkQlFWY3hSQ3hKUVVGWUxFTkJRV2RDYTBrc1IwRkJhRUlzUjBGQmMwSkRMRk5CUVZORUxFZEJRUzlDTzBGQlEyeENMRmxCUVVsRExGTkJRVk5HTEV0QlFXSXNSVUZCYjBKMlJTeFhRVUZYTVVRc1NVRkJXQ3hEUVVGblFtbEpMRXRCUVdoQ0xFZEJRWGRDUlN4VFFVRlRSaXhMUVVGcVF6dEJRVU53UWl4WlFVRkpSU3hUUVVGVGJFZ3NVMEZCWWl4RlFVRjNRbmxETEZkQlFWY3hSQ3hKUVVGWUxFTkJRV2RDY1VJc1UwRkJhRUlzUjBGQk5FSTRSeXhUUVVGVGJFZ3NVMEZCY2tNN1FVRkRlRUlzV1VGQlNXdElMRk5CUVZNdlRDeFJRVUZpTEVWQlFYVkNjMGdzVjBGQlZ6RkVMRWxCUVZnc1EwRkJaMEkxUkN4UlFVRm9RaXhIUVVFeVFpdE1MRk5CUVZNdlRDeFJRVUZ3UXpzN1FVRkZka0lzV1VGQlNTdEZMRTFCUVVvc1JVRkJXVHRCUVVOV09VVXNhMEpCUVZGblJDeEhRVUZTTEVOQlFWa3NkVU5CUVZvc1JVRkJjVVJ4UlN4VlFVRnlSRHRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NY2tnc2EwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2RVTkJRVm9zUlVGQmNVUnhSU3hWUVVGeVJEdEJRVU5FT3p0QlFVVkVPMEZCUTBGMFJpeGpRVUZOWVN4SlFVRk9MRU5CUVZkcFFpeFhRVUZZTEVOQlFYVkNkMFFzVlVGQmRrSXNSVUZCYlVNc1ZVRkJRM1pFTEV0QlFVUXNSVUZCVnp0QlFVTTFRemxFTEd0Q1FVRlJaMFFzUjBGQlVpeERRVUZaTEhkRFFVRmFMRVZCUVhORVl5eExRVUYwUkR0QlFVTkJMR05CUVVsQkxFMUJRVTFJTEVsQlFVNHNRMEZCVjBrc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFqdEJRVU5CTEdkQ1FVRkphVWtzVTBGQlUyeEpMRTFCUVUxSUxFbEJRVTRzUTBGQlYwTXNVVUZCZUVJN08wRkJSVUVzWjBKQlFVbHJRaXhOUVVGS0xFVkJRVms3UVVGRFZuUkVMSFZDUVVGVGMwTXNUVUZCVFVnc1NVRkJUaXhEUVVGWGJrTXNUVUZCY0VJN1FVRkRRVVVzTkVKQlFXTnZReXhOUVVGTlNDeEpRVUZPTEVOQlFWZDBSU3hMUVVGNlFqdEJRVU5FT3p0QlFVVkVMR2RDUVVGSmFVNHNVMEZCVXl4cFEwRkJkVUoyU3l4TFFVRjJRaXhGUVVFNFFtbExMRTFCUVRsQ0xFVkJRWE5EZUVzc1RVRkJkRU1zUlVGQk9FTXNTVUZCT1VNc1JVRkJiMFJGTEZkQlFYQkVMRVZCUVdsRmIwTXNUVUZCVFVnc1NVRkJUaXhEUVVGWE5Fa3NhVUpCUVRWRkxFTkJRV0k3UVVGRFFYaExMR3RDUVVGTmJVUXNWVUZCVGl4RFFVRnBRamhITEUxQlFXcENMRWxCUVRKQ1RTeE5RVUV6UWpzN1FVRkZRV2hHTEc5Q1FVRlJaMFlzVFVGQlVqdEJRVU5FTEZkQllrUXNUVUZoVHp0QlFVTk1PMEZCUTBGdVJ5eHRRa0ZCVDNKRExFMUJRVTFJTEVsQlFVNHNRMEZCVnpCRExFbEJRV3hDTzBGQlEwUTdRVUZEUml4VFFXNUNSRHRCUVc5Q1JDeFBRWEpFVFN4RFFVRlFPMEZCZFVSRU96czdLMEpCUlZWNVJpeFJMRVZCUVZVN1FVRkRia0lzVlVGQlNTOUtMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVOMVJpeFBRVUZFTEVWQlFWVnVRaXhOUVVGV0xFVkJRWEZDT3p0QlFVVjBRenRCUVVOQkxGbEJRVWx4Unl4bFFVRmxPMEZCUTJwQ00wMHNaMEpCUVUwc1YwRkVWeXhGUVVORk1FUXNUVUZCVFhoQ0xFMUJRVTE1UWl4TlFVUmtMRVZCUTNOQ1F5eEpRVUZKTVVJc1RVRkJUVEpDTEU5QlJHaERPMEZCUldwQ1F5eG5Ra0ZCVFR0QlFVWlhMRk5CUVc1Q096dEJRVXRCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNXVUZCU1cxSkxGRkJRVW9zUlVGQll6dEJRVU5hTEdOQlFVbEJMRk5CUVZNNVJpeGpRVUZVTEVOQlFYZENMRXRCUVhoQ0xFTkJRVW9zUlVGQmIwTjNSeXhoUVVGaE4wa3NTVUZCWWl4RFFVRnJRbXRKTEVkQlFXeENMRWRCUVhkQ1F5eFRRVUZUUkN4SFFVRnFRenRCUVVOd1F5eGpRVUZKUXl4VFFVRlRPVVlzWTBGQlZDeERRVUYzUWl4UFFVRjRRaXhEUVVGS0xFVkJRWE5EZDBjc1lVRkJZVGRKTEVsQlFXSXNRMEZCYTBKcFNTeExRVUZzUWl4SFFVRXdRa1VzVTBGQlUwWXNTMEZCYmtNN1FVRkRkRU1zWTBGQlNVVXNVMEZCVXpsR0xHTkJRVlFzUTBGQmQwSXNVVUZCZUVJc1EwRkJTaXhGUVVGMVEzZEhMR0ZCUVdFM1NTeEpRVUZpTEVOQlFXdENia01zVFVGQmJFSXNSMEZCTWtKelN5eFRRVUZUZEVzc1RVRkJjRU03UVVGRGRrTXNZMEZCU1hOTExGTkJRVk01Uml4alFVRlVMRU5CUVhkQ0xGVkJRWGhDTEVOQlFVb3NSVUZCZVVOM1J5eGhRVUZoTjBrc1NVRkJZaXhEUVVGclFqVkVMRkZCUVd4Q0xFZEJRVFpDSzB3c1UwRkJVeTlNTEZGQlFYUkRPMEZCUTNwRExHTkJRVWtyVEN4VFFVRlRPVVlzWTBGQlZDeERRVUYzUWl4VlFVRjRRaXhEUVVGS0xFVkJRWGxEZDBjc1lVRkJZVGRKTEVsQlFXSXNRMEZCYTBKRExGRkJRV3hDTEVkQlFUWkNhMGtzVTBGQlUyeEpMRkZCUVhSRE8wRkJRM3BETEdOQlFVbHJTU3hUUVVGVE9VWXNZMEZCVkN4RFFVRjNRaXhWUVVGNFFpeERRVUZLTEVWQlFYbERkMGNzWVVGQllUZEpMRWxCUVdJc1EwRkJhMEkxUkN4UlFVRnNRaXhIUVVFMlFpdE1MRk5CUVZNdlRDeFJRVUYwUXp0QlFVTXhRenM3UVVGRlJIbE5MSEZDUVVGaE4wa3NTVUZCWWl4RFFVRnJRbTFDTEUxQlFXeENMRWRCUVRKQ1owZ3NVMEZCVTJoSUxFMUJRWEJET3p0QlFVVkJPMEZCUTBFc1dVRkJTVzFDTEhWQ1FVRjFRalpHTEZOQlFWTnFTeXhOUVVGd1F6dEJRVU5CTEZsQlFVbHBTeXhUUVVGVE9VWXNZMEZCVkN4RFFVRjNRaXhSUVVGNFFpeERRVUZLTEVWQlFYVkRkMGNzWVVGQllUZEpMRWxCUVdJc1EwRkJhMEp6UXl4dlFrRkJiRUlzUjBGQmVVTkJMRzlDUVVGNlF6czdRVUZGZGtOcVJ5eG5Ra0ZCVVdkRUxFZEJRVklzUTBGQldTeHBRMEZCV2l4RlFVRXJRemhKTEZGQlFTOURMRVZCUVhsRVZTeFpRVUY2UkRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFYcExMR05CUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUl5U1N4WlFVRjJRaXhGUVVGeFF5eFZRVUZETVVrc1MwRkJSQ3hGUVVGWE8wRkJRemxET1VRc2EwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2EwTkJRVm9zUlVGQlowUmpMRXRCUVdoRU96dEJRVVZCTEdOQlFVbDBReXhUUVVGVGMwTXNUVUZCVFVnc1NVRkJUaXhEUVVGWGJrTXNUVUZCZUVJN1FVRkRRU3hqUVVGSmQwc3NVMEZCVTJ4SkxFMUJRVTFJTEVsQlFVNHNRMEZCVjBNc1VVRkJlRUk3TzBGQlJVRXNZMEZCU1RaSkxHbENRVUZwUWpGTExFMUJRVTEzU2l4aFFVRk9MRU5CUVc5Q1V5eE5RVUZ3UWl4RFFVRnlRanRCUVVOQkxHbENRVUZQYWtzc1RVRkJUWGRLTEdGQlFVNHNRMEZCYjBKVExFMUJRWEJDTEVOQlFWQTdRVUZEUVN4alFVRkpVeXhqUVVGS0xFVkJRVzlDUVN4bFFVRmxkRW9zYVVKQlFXWTdPMEZCUlhCQ0xHTkJRVWxYTEUxQlFVMUlMRWxCUVU0c1EwRkJWMGtzU1VGQldDeEhRVUZyUWl4SFFVRjBRaXhGUVVFeVFqdEJRVU42UWk5RUxHOUNRVUZSWjBRc1IwRkJVaXhEUVVGWkxHMURRVUZhTEVWQlFXbEVZeXhOUVVGTlNDeEpRVUZPTEVOQlFWYzBTU3hwUWtGQk5VUXNSVUZCSzBWUUxFMUJRUzlGTzBGQlEwRlRMRFpDUVVGcFFpdzRRa0ZCYjBJeFN5eE5RVUZOZVVJc1RVRkJNVUlzUlVGQmEwTjNTU3hOUVVGc1F5eEZRVUV3UTJwTExFMUJRVTFoTEVsQlFXaEVMRVZCUVhORWEwSXNUVUZCVFVnc1NVRkJUaXhEUVVGWE5Fa3NhVUpCUVdwRkxFTkJRV3BDTzBGQlEwRjRTeXhyUWtGQlRYZEtMR0ZCUVU0c1EwRkJiMEpUTEUxQlFYQkNMRWxCUVRoQ1V5eGpRVUU1UWp0QlFVTkVMRmRCU2tRc1RVRkpUeXhKUVVGSk0wa3NUVUZCVFVnc1NVRkJUaXhEUVVGWFNTeEpRVUZZTEV0QlFXOUNMRWRCUVhoQ0xFVkJRVFpDTzBGQlEyeERMMFFzYjBKQlFWRm5SQ3hIUVVGU0xFTkJRVmtzZDBOQlFWb3NSVUZCYzBSakxFdEJRWFJFTEVWQlFUWkVMMElzVFVGQlRYZEtMR0ZCUVc1Rk96dEJRVVZCTEdkQ1FVRkpOMG9zWTBGQlkyOURMRTFCUVUxSUxFbEJRVTRzUTBGQlYzUkZMRXRCUVRkQ08wRkJRMEVzWjBKQlFVa3NRMEZCUTNGRExGbEJRVmx6UlN4alFVRmFMRU5CUVRKQ0xGZEJRVE5DTEVOQlFVd3NSVUZCT0VNN1FVRkJSWFJGTERCQ1FVRlpReXhUUVVGYUxFZEJRWGRDTEVWQlFYaENPMEZCUVRaQ08wRkJRemRGTEdkQ1FVRkpMRU5CUVVORUxGbEJRVmx6UlN4alFVRmFMRU5CUVRKQ0xFMUJRVE5DTEVOQlFVd3NSVUZCZVVNN1FVRkJSWFJGTERCQ1FVRlpTU3hKUVVGYUxFZEJRVzFDTEVWQlFXNUNPMEZCUVhkQ096dEJRVVZ1UlR0QlFVTkJMR2RDUVVGSmQwc3NVMEZCVXl4cFEwRkJkVUoyU3l4TFFVRjJRaXhGUVVFNFFtbExMRTFCUVRsQ0xFVkJRWE5EZUVzc1RVRkJkRU1zUlVGQk9FTXNTVUZCT1VNc1JVRkJiMFJGTEZkQlFYQkVMRVZCUVdsRkswc3NaVUZCWlhaR0xGRkJRV2hHTEVWQlFUQkdjRVFzVFVGQlRVZ3NTVUZCVGl4RFFVRlhiME1zVDBGQmNrY3NSVUZCT0VkRkxHOUNRVUU1Unl4RFFVRmlPMEZCUTBGc1JTeHJRa0ZCVFhOQ0xGVkJRVTRzUTBGQmFVSXlTU3hOUVVGcVFpeEpRVUV5UWswc1RVRkJNMEk3TzBGQlJVRm9SaXh2UWtGQlVXZEdMRTFCUVZJN1FVRkRRVWNzTWtKQlFXVjBSQ3hMUVVGbUxFTkJRWEZDYlVRc1RVRkJja0k3UVVGRFJDeFhRV0pOTEUxQllVRTdRVUZEVEc1SExHMUNRVUZQY2tNc1RVRkJUVWdzU1VGQlRpeERRVUZYTUVNc1NVRkJiRUk3UVVGRFJEdEJRVU5HTEZOQk9VSkVPMEZCSzBKRUxFOUJia1ZOTEVOQlFWQTdRVUZ4UlVRN08wRkJSVVE3T3pzN0swSkJRMWQwUkN4SExFVkJRVXM3UVVGRFpDeFZRVUZKYUVJc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVbHpTeXhYUVVGWGRFc3NUVUZCVFcxRUxGVkJRVTRzUTBGQmFVSnVReXhKUVVGSldTeEpRVUZLTEVOQlFWTkdMRVZCUVRGQ0xFTkJRV1k3UVVGRFFUUkpMR1ZCUVZOYUxGVkJRVlFzUTBGQmIwSXhTU3hIUVVGd1FqdEJRVU5FT3p0QlFVVkVPenM3TzI5RFFVTm5Ra0VzUnl4RlFVRkxPMEZCUTI1Q0xGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN08wRkJSVVE3UVVGRFF5eFZRVUZKTmtJc1YwRkJWMklzU1VGQlNWRXNTVUZCU2l4RFFVRlRiVW9zUzBGQlZDeERRVUZsTEVOQlFXWXNSVUZCYTBJc1EwRkJReXhGUVVGdVFpeERRVUZtT3p0QlFVVkJMRlZCUVVsMFN5eFJRVUZSTzBGQlExWjJReXhqUVVGTmEwUXNTVUZCU1d4RUxFbEJSRUU3UVVGRlZqQkVMR05CUVUxU0xFbEJRVWxaTEVsQlFVb3NRMEZCVTJ0RkxFMUJSa3c3UVVGSFZqTkpMR0ZCUVVzd1JTeFJRVWhMTzBGQlNWWndReXhuUWtGQlVYVkNMRWxCUVVsWkxFbEJRVW9zUTBGQlUyNURMRTFCU2xBN1FVRkxWbTVETEdWQlFVOHdSQ3hKUVVGSldTeEpRVUZLTEVOQlFWTjBSU3hMUVV4T08wRkJUVlpWTEd0Q1FVRlZaMFFzU1VGQlNWa3NTVUZCU2l4RFFVRlROVVFzVVVGT1ZEczdRVUZSVmpSTkxHRkJRVXNzWVVGQlF6bE5MRWxCUVVRc1JVRkJWVHRCUVVOaUxHTkJRVWtyVFN4UlFVRlJMRWRCUVZvN1FVRkRRU3hqUVVGSkwwMHNTVUZCU2l4RlFVRlZPMEZCUTFJclRTeHZRa0ZCVVM5TkxFbEJRVkk3UVVGRFJEczdRVUZGUmp0QlFVTkRhME1zWjBKQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0pwUXl4blFrRkJTUzlETEVsQlFVa3JReXhGUVVSaExFVkJRMVJxUnl4TlFVRk5MRlZCUkVjc1JVRkRVekJFTEUxQlFVMVNMRWxCUVVsVkxFVkJSRzVDTEVWQlEzVkNRU3hKUVVGSlZpeEpRVUZKVVN4SlFVUXZRanRCUVVWeVFra3NhMEpCUVUwc1JVRkJSVWtzVFVGQlRUWkpMRXRCUVZJN1FVRkdaU3hYUVVGMlFqdEJRVWxFTzBGQmJrSlRMRTlCUVZvN08wRkJjMEpCTEZWQlFVazNTeXhOUVVGTmNVc3NjMEpCUVZZc1JVRkJhME03UVVGRGFFTndUU3huUWtGQlVYZE1MRWxCUVZJc1EwRkJZU3huUTBGQllpeEZRVUVyUTNCS0xFdEJRUzlETzBGQlEwRk1MR05CUVUxeFN5eHpRa0ZCVGl4RFFVRTJRbWhMTEV0QlFUZENPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenR2UTBGRFowSlhMRWNzUlVGQlN6dEJRVU51UWl4VlFVRkphRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkVPMEZCUTBNc1ZVRkJTVFpDTEZkQlFWZGlMRWxCUVVsWkxFbEJRVW9zUTBGQlUwTXNVVUZCZUVJN08wRkJSVUVzVlVGQlNXeEVMRk5CUVZOeFFpeE5RVUZOYzBJc1ZVRkJUaXhEUVVGcFFrOHNVVUZCYWtJc1EwRkJZanRCUVVOQkxGVkJRVWxzUkN4TlFVRktMRVZCUVZrN1FVRkRWaXhaUVVGSk1FSXNVVUZCVVR0QlFVTldka01zWjBKQlFVMXJSQ3hKUVVGSmJFUXNTVUZFUVR0QlFVVldXQ3hsUVVGTE1FVXNVVUZHU3p0QlFVZFdOMFFzYjBKQlFWVm5SQ3hKUVVGSldTeEpRVUZLTEVOQlFWTTFSQ3hSUVVoVU96dEJRVXRXTkUwc1pVRkJTeXhoUVVGRE9VMHNTVUZCUkN4RlFVRlZPMEZCUTJJc1owSkJRVWtyVFN4UlFVRlJMRWRCUVZvN1FVRkRRU3huUWtGQlNTOU5MRWxCUVVvc1JVRkJWVHRCUVVOU0swMHNjMEpCUVZFdlRTeEpRVUZTTzBGQlEwUTdPMEZCUlVZN1FVRkRReXhuUWtGQlNTdE5MRlZCUVZVc1IwRkJaQ3hGUVVGdFFqdEJRVU5xUW14TkxIRkNRVUZQYlUwc1RVRkJVRHRCUVVORU96dEJRVVZFTzBGQlEwRTVTeXhyUWtGQlRXRXNTVUZCVGl4RFFVRlhhVUlzVjBGQldDeERRVUYxUWp0QlFVTnlRbWxETEd0Q1FVRkpMME1zU1VGQlNTdERMRVZCUkdFc1JVRkRWR3BITEUxQlFVMHNWVUZFUnl4RlFVTlRNRVFzVFVGQlRWSXNTVUZCU1ZVc1JVRkVia0lzUlVGRGRVSkJMRWxCUVVsV0xFbEJRVWxSTEVsQlJDOUNPMEZCUlhKQ1NTeHZRa0ZCVFN4RlFVRkZTU3hOUVVGTk5ra3NTMEZCVWl4RlFVRmxMMFVzVVVGQlVUbEdMRTFCUVUxNVFpeE5RVUUzUWp0QlFVWmxMR0ZCUVhaQ08wRkJTVVE3UVVGeVFsTXNVMEZCV2pzN1FVRjNRa0VzV1VGQlNYcENMRTFCUVUxeFN5eHpRa0ZCVml4RlFVRnJRenRCUVVOb1EzQk5MR3RDUVVGUlowUXNSMEZCVWl4RFFVRlpMSE5DUVVGYUxFVkJRVzlEV2l4TFFVRndRenRCUVVOQlRDeG5Ra0ZCVFhGTExITkNRVUZPTEVOQlFUWkNhRXNzUzBGQk4wSTdRVUZEUkR0QlFVTkdMRTlCTjBKRUxFMUJOa0pQTzBGQlEweE1MR05CUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSnBReXhqUVVGSkwwTXNTVUZCU1N0RExFVkJSR0VzUlVGRFZHcEhMRTFCUVUwc1ZVRkVSeXhGUVVOVE1FUXNUVUZCVFZJc1NVRkJTVlVzUlVGRWJrSXNSVUZEZFVKQkxFbEJRVWxXTEVsQlFVbFJMRWxCUkM5Q08wRkJSWEpDU1N4blFrRkJUU3hGUVVGRlNTeE5RVUZOTEVkQlFWSXNSVUZCWVRoRUxGRkJRVkU1Uml4TlFVRk5lVUlzVFVGQk0wSTdRVUZHWlN4VFFVRjJRanRCUVVsRU8wRkJRMFk3T3p0M1FrRm9WMWM3UVVGQlJTeGhRVUZQTEV0QlFVdEJMRTFCUVZvN1FVRkJjVUk3TzBGQlJXNURPenM3T3pzN08zZENRVWxuUWp0QlFVRkZMR0ZCUVU4c1MwRkJTekJDTEZWQlFWbzdRVUZCZVVJN08wRkJSVE5ET3pzN096czdPM2RDUVVsblFqdEJRVUZGTEdGQlFVOHNTMEZCU3pkQ0xGVkJRVm83UVVGQmVVSTdPenRMUVM5R04wTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzJ0Q1FYVmlaVGhJTEU4N096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzWmlaanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRjFRa0U3T3pzN096czdPenM3TzBsQlYwMHlRaXhsTzBGQlEwbzdPenM3T3p0QlFVOUJMREpDUVVGWmRrUXNTMEZCV2l4RlFVRnRRbkpMTEVkQlFXNUNMRVZCUVhkQ2EwMHNSMEZCZUVJc1JVRkJOa0pzUlN4UlFVRTNRaXhGUVVGMVF6dEJRVUZCT3p0QlFVTnlReXhSUVVGSmJrWXNVVUZCVVN4SlFVRmFPenRCUVVWQlFTeFZRVUZOZVVJc1RVRkJUaXhIUVVGbEswWXNTMEZCWmp0QlFVTkJlRWdzVlVGQlRXVXNTVUZCVGl4SFFVRmhOVVFzUjBGQllqdEJRVU5CTmtNc1ZVRkJUV0VzU1VGQlRpeEhRVUZoZDBrc1IwRkJZanRCUVVOQmNrb3NWVUZCVFRSSUxGTkJRVTRzUjBGQmEwSjZReXhSUVVGc1FqczdRVUZGUVc1R0xGVkJRVTFuVEN4UlFVRk9MRWRCUVdsQ0xFVkJRV3BDTzBGQlEwRm9UQ3hWUVVGTlZ5eHJRa0ZCVGp0QlFVTkVPenM3TzNsRFFVVnZRanRCUVVOdVFpeFZRVUZKV0N4UlFVRlJMRWxCUVZvN08wRkJSVUZCTEZsQlFVMHlTQ3hUUVVGT0xFZEJRV3RDTTBnc1RVRkJUV0VzU1VGQlRpeERRVUZYUXl4WFFVRllMRU5CUVhWQ1pDeE5RVUZOWlN4SlFVRTNRaXhGUVVGdFF5eFZRVUZEUXl4SFFVRkVMRVZCUVZNN1FVRkROVVF2UXl4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N4eFFrRkJjVUpxUWl4TlFVRk5aU3hKUVVFelFpeEhRVUZyUXl4UlFVRTVReXhGUVVGM1JFTXNSMEZCZUVRN1FVRkRRV2hDTEdOQlFVMW5UQ3hSUVVGT0xFTkJRV1U1Uml4SlFVRm1MRU5CUVc5Q2JFVXNSMEZCY0VJN1FVRkRSQ3hQUVVocFFpeERRVUZzUWpzN1FVRkxRVHM3T3pzN096czdPenM3T3pzN08wRkJaMEpFT3pzN2QwTkJSVzFDTzBGQlEyeENMRlZCUVVsb1FpeFJRVUZSTEVsQlFWbzdPMEZCUlVGQkxGbEJRVTB5U0N4VFFVRk9MRU5CUVdkQ2VFY3NUVUZCYUVJN08wRkJSVUU3T3p0QlFVZEVPenM3TUVKQlNVczRTaXhSTEVWQlFWVTdRVUZEWkN4VlFVRkpha3dzVVVGQlVTeEpRVUZhTzBGQlEwRkJMRmxCUVUxblRDeFJRVUZPTEVOQlFXVjZTeXhQUVVGbUxFTkJRWFZDTEZWQlFVTm5TU3hOUVVGRUxFVkJRVms3UVVGRGFrTXdReXhwUWtGQlV5OUtMR0ZCUVZRc1EwRkJkVUlyU2l4VFFVRlRPVXNzVVVGQmFFTXNSVUZCTUVOdlNTeE5RVUV4UXp0QlFVTkVMRTlCUmtRN1FVRkhSRHM3TzNkQ1FWQmpPMEZCUVVVc1lVRkJUeXhMUVVGTFdDeFRRVUZhTzBGQlFYZENPenM3T3p0clFrRlZOVUp0UkN4bE96czdPenM3T3pzN1FVTndSMllzYTBKQlFXdENMSGxFT3pzN096czdPMEZEUVd4Q0xHdENRVUZyUWl4NVJEczdPenM3T3pzN096dEJRMEZzUWp0QlFVTkJMSE5FT3pzN096czdPMEZEUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZPenM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHdERRVUZyUXl4VlFVRlZMRVZCUVVVN1FVRkRPVU1zYlVKQlFXMUNMSE5EUVVGelF6dEJRVU42UkN4RFFVRkRMRzlEUVVGdlF6dEJRVU55UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGdzUTBGQlF5eFhPenM3T3pzN096dEJRMmhEUkR0QlFVTkJPenRCUVVWQkxEQkRRVUV3UXl4cFEwRkJiME1zUlRzN096czdPenRCUTBnNVJUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETEVVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTFKRU96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMUZCUlZFelFpeFBPMUZCUVZNM1J5eHJRanRSUVVGdlFtaEVMR3RDSWl3aVptbHNaU0k2SWxONWJtTm9aWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNGdkMlZpY0dGamExVnVhWFpsY25OaGJFMXZaSFZzWlVSbFptbHVhWFJwYjI0b2NtOXZkQ3dnWm1GamRHOXllU2tnZTF4dVhIUnBaaWgwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUcxdlpIVnNaU0E5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVdOMGIzSjVLQ2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVXVZVzFrS1Z4dVhIUmNkR1JsWm1sdVpTaGNJbE41Ym1Ob1pYSmNJaXdnVzEwc0lHWmhZM1J2Y25rcE8xeHVYSFJsYkhObElHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUmxlSEJ2Y25Selcxd2lVM2x1WTJobGNsd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JseDBaV3h6WlZ4dVhIUmNkSEp2YjNSYlhDSmNJbDBnUFNCeWIyOTBXMXdpWENKZElIeDhJSHQ5TENCeWIyOTBXMXdpWENKZFcxd2lVM2x1WTJobGNsd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JuMHBLSFJvYVhNc0lHWjFibU4wYVc5dUtDa2dlMXh1Y21WMGRYSnVJRnh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlCM1pXSndZV05yTDNWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRpTENJZ1hIUXZMeUJVYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzRnWEhSMllYSWdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN5QTlJSHQ5TzF4dVhHNGdYSFF2THlCVWFHVWdjbVZ4ZFdseVpTQm1kVzVqZEdsdmJseHVJRngwWm5WdVkzUnBiMjRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlodGIyUjFiR1ZKWkNrZ2UxeHVYRzRnWEhSY2RDOHZJRU5vWldOcklHbG1JRzF2WkhWc1pTQnBjeUJwYmlCallXTm9aVnh1SUZ4MFhIUnBaaWhwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU2xjYmlCY2RGeDBYSFJ5WlhSMWNtNGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHVaWGh3YjNKMGN6dGNibHh1SUZ4MFhIUXZMeUJEY21WaGRHVWdZU0J1WlhjZ2JXOWtkV3hsSUNoaGJtUWdjSFYwSUdsMElHbHVkRzhnZEdobElHTmhZMmhsS1Z4dUlGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzRnWEhSY2RGeDBhVG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMxY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdhV1JsYm5ScGRIa2dablZ1WTNScGIyNGdabTl5SUdOaGJHeHBibWNnYUdGeWJXOXVlU0JwYlhCdmNuUnpJSGRwZEdnZ2RHaGxJR052Y25KbFkzUWdZMjl1ZEdWNGRGeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1cElEMGdablZ1WTNScGIyNG9kbUZzZFdVcElIc2djbVYwZFhKdUlIWmhiSFZsT3lCOU8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1oyVjBkR1Z5SUdaMWJtTjBhVzl1SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNBOUlHWjFibU4wYVc5dUtHVjRjRzl5ZEhNc0lHNWhiV1VzSUdkbGRIUmxjaWtnZTF4dUlGeDBYSFJwWmlnaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJRzVoYldVcEtTQjdYRzRnWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUc1aGJXVXNJSHRjYmlCY2RGeDBYSFJjZEdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdYSFJjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJRngwWEhSY2RGeDBaMlYwT2lCblpYUjBaWEpjYmlCY2RGeDBYSFI5S1R0Y2JpQmNkRngwZlZ4dUlGeDBmVHRjYmx4dUlGeDBMeThnWjJWMFJHVm1ZWFZzZEVWNGNHOXlkQ0JtZFc1amRHbHZiaUJtYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lHNXZiaTFvWVhKdGIyNTVJRzF2WkhWc1pYTmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJpQTlJR1oxYm1OMGFXOXVLRzF2WkhWc1pTa2dlMXh1SUZ4MFhIUjJZWElnWjJWMGRHVnlJRDBnYlc5a2RXeGxJQ1ltSUcxdlpIVnNaUzVmWDJWelRXOWtkV3hsSUQ5Y2JpQmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUkVaV1poZFd4MEtDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bFd5ZGtaV1poZFd4MEoxMDdJSDBnT2x4dUlGeDBYSFJjZEdaMWJtTjBhVzl1SUdkbGRFMXZaSFZzWlVWNGNHOXlkSE1vS1NCN0lISmxkSFZ5YmlCdGIyUjFiR1U3SUgwN1hHNGdYSFJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDaG5aWFIwWlhJc0lDZGhKeXdnWjJWMGRHVnlLVHRjYmlCY2RGeDBjbVYwZFhKdUlHZGxkSFJsY2p0Y2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2SUQwZ1puVnVZM1JwYjI0b2IySnFaV04wTENCd2NtOXdaWEowZVNrZ2V5QnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcE95QjlPMXh1WEc0Z1hIUXZMeUJmWDNkbFluQmhZMnRmY0hWaWJHbGpYM0JoZEdoZlgxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1d0lEMGdYQ0pjSWp0Y2JseHVJRngwTHk4Z1RHOWhaQ0JsYm5SeWVTQnRiMlIxYkdVZ1lXNWtJSEpsZEhWeWJpQmxlSEJ2Y25SelhHNGdYSFJ5WlhSMWNtNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWhmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5NZ1BTQXhOallwTzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJSGRsWW5CaFkyc3ZZbTl2ZEhOMGNtRndJR1F5TldRNVpXRmlNMlJsWXpKaE16Tm1ZV1ppSWl3aWRtRnlJR052Y21VZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdDJaWEp6YVc5dU9pQW5NaTQwTGpBbmZUdGNibWxtS0hSNWNHVnZaaUJmWDJVZ1BUMGdKMjUxYldKbGNpY3BYMTlsSUQwZ1kyOXlaVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm1SbFpseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTI5eVpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SURraUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZW14dmFYSnZZMnN2WTI5eVpTMXFjeTlwYzNOMVpYTXZPRFlqYVhOemRXVmpiMjF0Wlc1MExURXhOVGMxT1RBeU9GeHVkbUZ5SUdkc2IySmhiQ0E5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQjNhVzVrYjNjdVRXRjBhQ0E5UFNCTllYUm9YRzRnSUQ4Z2QybHVaRzkzSURvZ2RIbHdaVzltSUhObGJHWWdJVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdjMlZzWmk1TllYUm9JRDA5SUUxaGRHZ2dQeUJ6Wld4bUlEb2dSblZ1WTNScGIyNG9KM0psZEhWeWJpQjBhR2x6Snlrb0tUdGNibWxtS0hSNWNHVnZaaUJmWDJjZ1BUMGdKMjUxYldKbGNpY3BYMTluSUQwZ1oyeHZZbUZzT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdVpHVm1YRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bmJHOWlZV3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURGY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0EySURjZ09DQTVJaXdpTHk4Z1ZHaGhibXNuY3lCSlJUZ2dabTl5SUdocGN5Qm1kVzV1ZVNCa1pXWnBibVZRY205d1pYSjBlVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FoY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0h0OUxDQW5ZU2NzSUh0blpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUEzT3lCOWZTa3VZU0FoUFNBM08xeHVmU2s3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtaWE5qY21sd2RHOXljeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTWx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElEa2lMQ0oyWVhJZ2MzUnZjbVVnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkM2EzTW5LVnh1SUNBc0lIVnBaQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lGTjViV0p2YkNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1VGVXMWliMnhjYmlBZ0xDQlZVMFZmVTFsTlFrOU1JRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQU0FuWm5WdVkzUnBiMjRuTzF4dVhHNTJZWElnSkdWNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBlMXh1SUNCeVpYUjFjbTRnYzNSdmNtVmJibUZ0WlYwZ2ZId2dLSE4wYjNKbFcyNWhiV1ZkSUQxY2JpQWdJQ0JWVTBWZlUxbE5RazlNSUNZbUlGTjViV0p2YkZ0dVlXMWxYU0I4ZkNBb1ZWTkZYMU5aVFVKUFRDQS9JRk41YldKdmJDQTZJSFZwWkNrb0oxTjViV0p2YkM0bklDc2dibUZ0WlNrcE8xeHVmVHRjYmx4dUpHVjRjRzl5ZEhNdWMzUnZjbVVnUFNCemRHOXlaVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzZHJjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTTF4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpZG1GeUlHRnVUMkpxWldOMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQkpSVGhmUkU5TlgwUkZSa2xPUlNBOUlISmxjWFZwY21Vb0p5NHZYMmxsT0Mxa2IyMHRaR1ZtYVc1bEp5bGNiaUFnTENCMGIxQnlhVzFwZEdsMlpTQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2daRkFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGs3WEc1Y2JtVjRjRzl5ZEhNdVppQTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrZ09pQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowZVNoUExDQlFMQ0JCZEhSeWFXSjFkR1Z6S1h0Y2JpQWdZVzVQWW1wbFkzUW9UeWs3WEc0Z0lGQWdQU0IwYjFCeWFXMXBkR2wyWlNoUUxDQjBjblZsS1R0Y2JpQWdZVzVQWW1wbFkzUW9RWFIwY21saWRYUmxjeWs3WEc0Z0lHbG1LRWxGT0Y5RVQwMWZSRVZHU1U1RktYUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHUlFLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBPMXh1SUNCOUlHTmhkR05vS0dVcGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc0Z0lHbG1LQ2RuWlhRbklHbHVJRUYwZEhKcFluVjBaWE1nZkh3Z0ozTmxkQ2NnYVc0Z1FYUjBjbWxpZFhSbGN5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb0owRmpZMlZ6YzI5eWN5QnViM1FnYzNWd2NHOXlkR1ZrSVNjcE8xeHVJQ0JwWmlnbmRtRnNkV1VuSUdsdUlFRjBkSEpwWW5WMFpYTXBUMXRRWFNBOUlFRjBkSEpwWW5WMFpYTXVkbUZzZFdVN1hHNGdJSEpsZEhWeWJpQlBPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMWtjQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTkZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElEa2lMQ0oyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppZ2hhWE5QWW1wbFkzUW9hWFFwS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhwZENBcklDY2dhWE1nYm05MElHRnVJRzlpYW1WamRDRW5LVHRjYmlBZ2NtVjBkWEp1SUdsME8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMVzlpYW1WamRDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SURraUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBUMGdKMjlpYW1WamRDY2dQeUJwZENBaFBUMGdiblZzYkNBNklIUjVjR1Z2WmlCcGRDQTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNBMklEY2dPQ0E1SWl3aWRtRnlJR1JRSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LVnh1SUNBc0lHTnlaV0YwWlVSbGMyTWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnUHlCbWRXNWpkR2x2YmlodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdaRkF1WmlodlltcGxZM1FzSUd0bGVTd2dZM0psWVhSbFJHVnpZeWd4TENCMllXeDFaU2twTzF4dWZTQTZJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2w3WEc0Z0lHOWlhbVZqZEZ0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUTdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ04xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSURZZ055QTRJRGtpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLR2x1YzNSaGJtTmxMQ0JEYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0JwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1kyRnNiQ0JoSUdOc1lYTnpJR0Z6SUdFZ1puVnVZM1JwYjI1Y0lpazdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamF5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SURrZ01UQWlMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIzSmxKeWxjYmlBZ0xDQmpkSGdnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lGQlNUMVJQVkZsUVJTQTlJQ2R3Y205MGIzUjVjR1VuTzF4dVhHNTJZWElnSkdWNGNHOXlkQ0E5SUdaMWJtTjBhVzl1S0hSNWNHVXNJRzVoYldVc0lITnZkWEpqWlNsN1hHNGdJSFpoY2lCSlUxOUdUMUpEUlVRZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1R1hHNGdJQ0FnTENCSlUxOUhURTlDUVV3Z1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1SFhHNGdJQ0FnTENCSlUxOVRWRUZVU1VNZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1VFhHNGdJQ0FnTENCSlUxOVFVazlVVHlBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1UVhHNGdJQ0FnTENCSlUxOUNTVTVFSUNBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1Q1hHNGdJQ0FnTENCSlUxOVhVa0ZRSUNBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1WFhHNGdJQ0FnTENCbGVIQnZjblJ6SUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJqYjNKbElEb2dZMjl5WlZ0dVlXMWxYU0I4ZkNBb1kyOXlaVnR1WVcxbFhTQTlJSHQ5S1Z4dUlDQWdJQ3dnWlhod1VISnZkRzhnSUQwZ1pYaHdiM0owYzF0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENCMFlYSm5aWFFnSUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJuYkc5aVlXd2dPaUJKVTE5VFZFRlVTVU1nUHlCbmJHOWlZV3hiYm1GdFpWMGdPaUFvWjJ4dlltRnNXMjVoYldWZElIeDhJSHQ5S1Z0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENCclpYa3NJRzkzYml3Z2IzVjBPMXh1SUNCcFppaEpVMTlIVEU5Q1FVd3BjMjkxY21ObElEMGdibUZ0WlR0Y2JpQWdabTl5S0d0bGVTQnBiaUJ6YjNWeVkyVXBlMXh1SUNBZ0lDOHZJR052Ym5SaGFXNXpJR2x1SUc1aGRHbDJaVnh1SUNBZ0lHOTNiaUE5SUNGSlUxOUdUMUpEUlVRZ0ppWWdkR0Z5WjJWMElDWW1JSFJoY21kbGRGdHJaWGxkSUNFOVBTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWW9iM2R1SUNZbUlHdGxlU0JwYmlCbGVIQnZjblJ6S1dOdmJuUnBiblZsTzF4dUlDQWdJQzh2SUdWNGNHOXlkQ0J1WVhScGRtVWdiM0lnY0dGemMyVmtYRzRnSUNBZ2IzVjBJRDBnYjNkdUlEOGdkR0Z5WjJWMFcydGxlVjBnT2lCemIzVnlZMlZiYTJWNVhUdGNiaUFnSUNBdkx5QndjbVYyWlc1MElHZHNiMkpoYkNCd2IyeHNkWFJwYjI0Z1ptOXlJRzVoYldWemNHRmpaWE5jYmlBZ0lDQmxlSEJ2Y25SelcydGxlVjBnUFNCSlUxOUhURTlDUVV3Z0ppWWdkSGx3Wlc5bUlIUmhjbWRsZEZ0clpYbGRJQ0U5SUNkbWRXNWpkR2x2YmljZ1B5QnpiM1Z5WTJWYmEyVjVYVnh1SUNBZ0lDOHZJR0pwYm1RZ2RHbHRaWEp6SUhSdklHZHNiMkpoYkNCbWIzSWdZMkZzYkNCbWNtOXRJR1Y0Y0c5eWRDQmpiMjUwWlhoMFhHNGdJQ0FnT2lCSlUxOUNTVTVFSUNZbUlHOTNiaUEvSUdOMGVDaHZkWFFzSUdkc2IySmhiQ2xjYmlBZ0lDQXZMeUIzY21Gd0lHZHNiMkpoYkNCamIyNXpkSEoxWTNSdmNuTWdabTl5SUhCeVpYWmxiblFnWTJoaGJtZGxJSFJvWlcwZ2FXNGdiR2xpY21GeWVWeHVJQ0FnSURvZ1NWTmZWMUpCVUNBbUppQjBZWEpuWlhSYmEyVjVYU0E5UFNCdmRYUWdQeUFvWm5WdVkzUnBiMjRvUXlsN1hHNGdJQ0FnSUNCMllYSWdSaUE5SUdaMWJtTjBhVzl1S0dFc0lHSXNJR01wZTF4dUlDQWdJQ0FnSUNCcFppaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1F5bDdYRzRnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2lCeVpYUjFjbTRnYm1WM0lFTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREU2SUhKbGRIVnliaUJ1WlhjZ1F5aGhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnY21WMGRYSnVJRzVsZHlCREtHRXNJR0lzSUdNcE8xeHVJQ0FnSUNBZ0lDQjlJSEpsZEhWeWJpQkRMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ1JsdFFVazlVVDFSWlVFVmRJRDBnUTF0UVVrOVVUMVJaVUVWZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUVZN1hHNGdJQ0FnTHk4Z2JXRnJaU0J6ZEdGMGFXTWdkbVZ5YzJsdmJuTWdabTl5SUhCeWIzUnZkSGx3WlNCdFpYUm9iMlJ6WEc0Z0lDQWdmU2tvYjNWMEtTQTZJRWxUWDFCU1QxUlBJQ1ltSUhSNWNHVnZaaUJ2ZFhRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUdOMGVDaEdkVzVqZEdsdmJpNWpZV3hzTENCdmRYUXBJRG9nYjNWME8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1dFpYUm9iMlJ6TGlWT1FVMUZKVnh1SUNBZ0lHbG1LRWxUWDFCU1QxUlBLWHRjYmlBZ0lDQWdJQ2hsZUhCdmNuUnpMblpwY25SMVlXd2dmSHdnS0dWNGNHOXlkSE11ZG1seWRIVmhiQ0E5SUh0OUtTbGJhMlY1WFNBOUlHOTFkRHRjYmlBZ0lDQWdJQzh2SUdWNGNHOXlkQ0J3Y205MGJ5QnRaWFJvYjJSeklIUnZJR052Y21VdUpVTlBUbE5VVWxWRFZFOVNKUzV3Y205MGIzUjVjR1V1SlU1QlRVVWxYRzRnSUNBZ0lDQnBaaWgwZVhCbElDWWdKR1Y0Y0c5eWRDNVNJQ1ltSUdWNGNGQnliM1J2SUNZbUlDRmxlSEJRY205MGIxdHJaWGxkS1docFpHVW9aWGh3VUhKdmRHOHNJR3RsZVN3Z2IzVjBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzR2THlCMGVYQmxJR0pwZEcxaGNGeHVKR1Y0Y0c5eWRDNUdJRDBnTVRzZ0lDQXZMeUJtYjNKalpXUmNiaVJsZUhCdmNuUXVSeUE5SURJN0lDQWdMeThnWjJ4dlltRnNYRzRrWlhod2IzSjBMbE1nUFNBME95QWdJQzh2SUhOMFlYUnBZMXh1SkdWNGNHOXlkQzVRSUQwZ09Ec2dJQ0F2THlCd2NtOTBiMXh1SkdWNGNHOXlkQzVDSUQwZ01UWTdJQ0F2THlCaWFXNWtYRzRrWlhod2IzSjBMbGNnUFNBek1qc2dJQzh2SUhkeVlYQmNiaVJsZUhCdmNuUXVWU0E5SURZME95QWdMeThnYzJGbVpWeHVKR1Y0Y0c5eWRDNVNJRDBnTVRJNE95QXZMeUJ5WldGc0lIQnliM1J2SUcxbGRHaHZaQ0JtYjNJZ1lHeHBZbkpoY25sZ0lGeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWtaWGh3YjNKME8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWlhod2IzSjBMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0E1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWdOaUEzSURnZ09TSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVsZUhCdmNuUnpMbDlmWlhOTmIyUjFiR1VnUFNCMGNuVmxPMXh1WEc1MllYSWdYMlJsWm1sdVpWQnliM0JsY25SNUlEMGdjbVZ4ZFdseVpTaGNJaTR1TDJOdmNtVXRhbk12YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLVHRjYmx4dWRtRnlJRjlrWldacGJtVlFjbTl3WlhKMGVUSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOWtaV1pwYm1WUWNtOXdaWEowZVNrN1hHNWNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3SUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN0lHUmxabUYxYkhRNklHOWlhaUI5T3lCOVhHNWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aDBZWEpuWlhRc0lIQnliM0J6S1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCd2NtOXdjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR1JsYzJOeWFYQjBiM0lnUFNCd2NtOXdjMXRwWFR0Y2JpQWdJQ0FnSUdSbGMyTnlhWEIwYjNJdVpXNTFiV1Z5WVdKc1pTQTlJR1JsYzJOeWFYQjBiM0l1Wlc1MWJXVnlZV0pzWlNCOGZDQm1ZV3h6WlR0Y2JpQWdJQ0FnSUdSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaFlteGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHbG1JQ2hjSW5aaGJIVmxYQ0lnYVc0Z1pHVnpZM0pwY0hSdmNpa2daR1Z6WTNKcGNIUnZjaTUzY21sMFlXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQW9NQ3dnWDJSbFptbHVaVkJ5YjNCbGNuUjVNaTVrWldaaGRXeDBLU2gwWVhKblpYUXNJR1JsYzJOeWFYQjBiM0l1YTJWNUxDQmtaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLRU52Ym5OMGNuVmpkRzl5TENCd2NtOTBiMUJ5YjNCekxDQnpkR0YwYVdOUWNtOXdjeWtnZTF4dUlDQWdJR2xtSUNod2NtOTBiMUJ5YjNCektTQmtaV1pwYm1WUWNtOXdaWEowYVdWektFTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU3dnY0hKdmRHOVFjbTl3Y3lrN1hHNGdJQ0FnYVdZZ0tITjBZWFJwWTFCeWIzQnpLU0JrWldacGJtVlFjbTl3WlhKMGFXVnpLRU52Ym5OMGNuVmpkRzl5TENCemRHRjBhV05RY205d2N5azdYRzRnSUNBZ2NtVjBkWEp1SUVOdmJuTjBjblZqZEc5eU8xeHVJQ0I5TzF4dWZTZ3BPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNNdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdnT1NJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1pYaGxZeWw3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlDRWhaWGhsWXlncE8xeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZabUZwYkhNdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdnT1NJc0luWmhjaUJvWVhOUGQyNVFjbTl3WlhKMGVTQTlJSHQ5TG1oaGMwOTNibEJ5YjNCbGNuUjVPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEN3Z2EyVjVLWHRjYmlBZ2NtVjBkWEp1SUdoaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2FYUXNJR3RsZVNrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFHRnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TWx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpTHk4Z2RHOGdhVzVrWlhobFpDQnZZbXBsWTNRc0lIUnZUMkpxWldOMElIZHBkR2dnWm1Gc2JHSmhZMnNnWm05eUlHNXZiaTFoY25KaGVTMXNhV3RsSUVWVE15QnpkSEpwYm1kelhHNTJZWElnU1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHZZbXBsWTNRbktWeHVJQ0FzSUdSbFptbHVaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlFbFBZbXBsWTNRb1pHVm1hVzVsWkNocGRDa3BPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFdsdlltcGxZM1F1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVpTENJdkx5QnZjSFJwYjI1aGJDQXZJSE5wYlhCc1pTQmpiMjUwWlhoMElHSnBibVJwYm1kY2JuWmhjaUJoUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dadUxDQjBhR0YwTENCc1pXNW5kR2dwZTF4dUlDQmhSblZ1WTNScGIyNG9abTRwTzF4dUlDQnBaaWgwYUdGMElEMDlQU0IxYm1SbFptbHVaV1FwY21WMGRYSnVJR1p1TzF4dUlDQnpkMmwwWTJnb2JHVnVaM1JvS1h0Y2JpQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tIUm9ZWFFzSUdFcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnWTJGelpTQXlPaUJ5WlhSMWNtNGdablZ1WTNScGIyNG9ZU3dnWWlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXNJR0lzSUdNcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvZEdoaGRDd2dZU3dnWWl3Z1l5azdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b0x5b2dMaTR1WVhKbmN5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9ZWFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJSDA3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWTNSNExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SURraUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHSnBkRzFoY0N3Z2RtRnNkV1VwZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVZ0lEb2dJU2hpYVhSdFlYQWdKaUF4S1N4Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklDRW9ZbWwwYldGd0lDWWdNaWtzWEc0Z0lDQWdkM0pwZEdGaWJHVWdJQ0FnT2lBaEtHSnBkRzFoY0NBbUlEUXBMRnh1SUNBZ0lIWmhiSFZsSUNBZ0lDQWdJRG9nZG1Gc2RXVmNiaUFnZlR0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5d2NtOXdaWEowZVMxa1pYTmpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TlZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElEa2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY21GMGIzSnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4Tmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JrYjJOMWJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcExtUnZZM1Z0Wlc1MFhHNGdJQzh2SUdsdUlHOXNaQ0JKUlNCMGVYQmxiMllnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDQnBjeUFuYjJKcVpXTjBKMXh1SUNBc0lHbHpJRDBnYVhOUFltcGxZM1FvWkc5amRXMWxiblFwSUNZbUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwY3lBL0lHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvYVhRcElEb2dlMzA3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkc5dExXTnlaV0YwWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNBMklEY2dPQ0E1SWl3aUx5OGdNVGt1TVM0eUxqRTBJQzhnTVRVdU1pNHpMakUwSUU5aWFtVmpkQzVyWlhsektFOHBYRzUyWVhJZ0pHdGxlWE1nSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDY3BYRzRnSUN3Z1pXNTFiVUoxWjB0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGJuVnRMV0oxWnkxclpYbHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wTG10bGVYTWdmSHdnWm5WdVkzUnBiMjRnYTJWNWN5aFBLWHRjYmlBZ2NtVjBkWEp1SUNSclpYbHpLRThzSUdWdWRXMUNkV2RMWlhsektUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdGEyVjVjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmloMGVYQmxiMllnYVhRZ0lUMGdKMloxYm1OMGFXOXVKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9hWFFnS3lBbklHbHpJRzV2ZENCaElHWjFibU4wYVc5dUlTY3BPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZllTMW1kVzVqZEdsdmJpNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVGxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TQTJJRGNnT0NBNUlpd2lkbUZ5SUhSdlUzUnlhVzVuSUQwZ2UzMHVkRzlUZEhKcGJtYzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdkRzlUZEhKcGJtY3VZMkZzYkNocGRDa3VjMnhwWTJVb09Dd2dMVEVwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOdlppNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNakJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJaTh2SURjdU1TNHhJRlJ2VUhKcGJXbDBhWFpsS0dsdWNIVjBJRnNzSUZCeVpXWmxjbkpsWkZSNWNHVmRLVnh1ZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlrN1hHNHZMeUJwYm5OMFpXRmtJRzltSUhSb1pTQkZVellnYzNCbFl5QjJaWEp6YVc5dUxDQjNaU0JrYVdSdUozUWdhVzF3YkdWdFpXNTBJRUJBZEc5UWNtbHRhWFJwZG1VZ1kyRnpaVnh1THk4Z1lXNWtJSFJvWlNCelpXTnZibVFnWVhKbmRXMWxiblFnTFNCbWJHRm5JQzBnY0hKbFptVnljbVZrSUhSNWNHVWdhWE1nWVNCemRISnBibWRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRc0lGTXBlMXh1SUNCcFppZ2hhWE5QWW1wbFkzUW9hWFFwS1hKbGRIVnliaUJwZER0Y2JpQWdkbUZ5SUdadUxDQjJZV3c3WEc0Z0lHbG1LRk1nSmlZZ2RIbHdaVzltSUNobWJpQTlJR2wwTG5SdlUzUnlhVzVuS1NBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNGcGMwOWlhbVZqZENoMllXd2dQU0JtYmk1allXeHNLR2wwS1NrcGNtVjBkWEp1SUhaaGJEdGNiaUFnYVdZb2RIbHdaVzltSUNobWJpQTlJR2wwTG5aaGJIVmxUMllwSUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnSVdselQySnFaV04wS0haaGJDQTlJR1p1TG1OaGJHd29hWFFwS1NseVpYUjFjbTRnZG1Gc08xeHVJQ0JwWmlnaFV5QW1KaUIwZVhCbGIyWWdLR1p1SUQwZ2FYUXVkRzlUZEhKcGJtY3BJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdJV2x6VDJKcVpXTjBLSFpoYkNBOUlHWnVMbU5oYkd3b2FYUXBLU2x5WlhSMWNtNGdkbUZzTzF4dUlDQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzRuZENCamIyNTJaWEowSUc5aWFtVmpkQ0IwYnlCd2NtbHRhWFJwZG1VZ2RtRnNkV1ZjSWlrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmRHOHRjSEpwYldsMGFYWmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F5TVZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElEa2lMQ0oyWVhJZ1pHVm1JRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5a3VabHh1SUNBc0lHaGhjeUE5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dWRUZISUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0ozUnZVM1J5YVc1blZHRm5KeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXNJSFJoWnl3Z2MzUmhkQ2w3WEc0Z0lHbG1LR2wwSUNZbUlDRm9ZWE1vYVhRZ1BTQnpkR0YwSUQ4Z2FYUWdPaUJwZEM1d2NtOTBiM1I1Y0dVc0lGUkJSeWtwWkdWbUtHbDBMQ0JVUVVjc0lIdGpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQjBZV2Q5S1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qSmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0luWmhjaUJwWkNBOUlEQmNiaUFnTENCd2VDQTlJRTFoZEdndWNtRnVaRzl0S0NrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lISmxkSFZ5YmlBblUzbHRZbTlzS0NjdVkyOXVZMkYwS0d0bGVTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z0p5Y2dPaUJyWlhrc0lDY3BYeWNzSUNncksybGtJQ3NnY0hncExuUnZVM1J5YVc1bktETTJLU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZFdsa0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXlNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lMeThnTnk0eUxqRWdVbVZ4ZFdseVpVOWlhbVZqZEVOdlpYSmphV0pzWlNoaGNtZDFiV1Z1ZENsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaHBkQ0E5UFNCMWJtUmxabWx1WldRcGRHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTJGc2JDQnRaWFJvYjJRZ2IyNGdJRndpSUNzZ2FYUXBPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpHVm1hVzVsWkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qUmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0lYSmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdJWEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5WlhGMWFYSmxLQ2N1TDE5a2IyMHRZM0psWVhSbEp5a29KMlJwZGljcExDQW5ZU2NzSUh0blpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUEzT3lCOWZTa3VZU0FoUFNBM08xeHVmU2s3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBaVGd0Wkc5dExXUmxabWx1WlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qVmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNBMklEY2dPQ0E1SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGNuVmxPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmJHbGljbUZ5ZVM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0luWmhjaUJ6YUdGeVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1FuS1NnbmEyVjVjeWNwWEc0Z0lDd2dkV2xrSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJSEpsZEhWeWJpQnphR0Z5WldSYmEyVjVYU0I4ZkNBb2MyaGhjbVZrVzJ0bGVWMGdQU0IxYVdRb2EyVjVLU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJoaGNtVmtMV3RsZVM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0lpOHZJRGN1TVM0MElGUnZTVzUwWldkbGNseHVkbUZ5SUdObGFXd2dJRDBnVFdGMGFDNWpaV2xzWEc0Z0lDd2dabXh2YjNJZ1BTQk5ZWFJvTG1ac2IyOXlPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQnBjMDVoVGlocGRDQTlJQ3RwZENrZ1B5QXdJRG9nS0dsMElENGdNQ0EvSUdac2IyOXlJRG9nWTJWcGJDa29hWFFwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXbHVkR1ZuWlhJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlESTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSXZMeUJKUlNBNExTQmtiMjRuZENCbGJuVnRJR0oxWnlCclpYbHpYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2hjYmlBZ0oyTnZibk4wY25WamRHOXlMR2hoYzA5M2JsQnliM0JsY25SNUxHbHpVSEp2ZEc5MGVYQmxUMllzY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVc2RHOU1iMk5oYkdWVGRISnBibWNzZEc5VGRISnBibWNzZG1Gc2RXVlBaaWRjYmlrdWMzQnNhWFFvSnl3bktUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJWdWRXMHRZblZuTFd0bGVYTXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREk1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWlMQ0oyWVhJZ1oyeHZZbUZzSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCVFNFRlNSVVFnUFNBblgxOWpiM0psTFdwelgzTm9ZWEpsWkY5ZkoxeHVJQ0FzSUhOMGIzSmxJQ0E5SUdkc2IySmhiRnRUU0VGU1JVUmRJSHg4SUNobmJHOWlZV3hiVTBoQlVrVkVYU0E5SUh0OUtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdjbVYwZFhKdUlITjBiM0psVzJ0bGVWMGdmSHdnS0hOMGIzSmxXMnRsZVYwZ1BTQjdmU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJoaGNtVmtMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F6TUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTXpGY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2lMeThnTnk0eExqRXpJRlJ2VDJKcVpXTjBLR0Z5WjNWdFpXNTBLVnh1ZG1GeUlHUmxabWx1WldRZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRTlpYW1WamRDaGtaV1pwYm1Wa0tHbDBLU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGIySnFaV04wTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBek1seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIbGNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5a1pXWnBibVV0Y0hKdmNHVnlkSGt1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVnTmlBM0lEZ2dPU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNTJZWElnWDNObGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2hjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrN1hHNWNiblpoY2lCZmMyVjBVSEp2ZEc5MGVYQmxUMll5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYzJWMFVISnZkRzkwZVhCbFQyWXBPMXh1WEc1MllYSWdYMk55WldGMFpTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlqY21WaGRHVmNJaWs3WEc1Y2JuWmhjaUJmWTNKbFlYUmxNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMk55WldGMFpTazdYRzVjYm5aaGNpQmZkSGx3Wlc5bU1pQTlJSEpsY1hWcGNtVW9YQ0l1TGk5b1pXeHdaWEp6TDNSNWNHVnZabHdpS1R0Y2JseHVkbUZ5SUY5MGVYQmxiMll6SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmZEhsd1pXOW1NaWs3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlDaHpkV0pEYkdGemN5d2djM1Z3WlhKRGJHRnpjeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSE4xY0dWeVEyeGhjM01nSVQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCemRYQmxja05zWVhOeklDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE4xY0dWeUlHVjRjSEpsYzNOcGIyNGdiWFZ6ZENCbGFYUm9aWElnWW1VZ2JuVnNiQ0J2Y2lCaElHWjFibU4wYVc5dUxDQnViM1FnWENJZ0t5QW9kSGx3Wlc5bUlITjFjR1Z5UTJ4aGMzTWdQVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJjSW5WdVpHVm1hVzVsWkZ3aUlEb2dLREFzSUY5MGVYQmxiMll6TG1SbFptRjFiSFFwS0hOMWNHVnlRMnhoYzNNcEtTazdYRzRnSUgxY2JseHVJQ0J6ZFdKRGJHRnpjeTV3Y205MGIzUjVjR1VnUFNBb01Dd2dYMk55WldGMFpUSXVaR1ZtWVhWc2RDa29jM1Z3WlhKRGJHRnpjeUFtSmlCemRYQmxja05zWVhOekxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUI3WEc0Z0lDQWdJQ0IyWVd4MVpUb2djM1ZpUTJ4aGMzTXNYRzRnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnYVdZZ0tITjFjR1Z5UTJ4aGMzTXBJRjl6WlhSUWNtOTBiM1I1Y0dWUFpqSXVaR1ZtWVhWc2RDQS9JQ2d3TENCZmMyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFwS0hOMVlrTnNZWE56TENCemRYQmxja05zWVhOektTQTZJSE4xWWtOc1lYTnpMbDlmY0hKdmRHOWZYeUE5SUhOMWNHVnlRMnhoYzNNN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12YVc1b1pYSnBkSE11YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVsZUhCdmNuUnpMbDlmWlhOTmIyUjFiR1VnUFNCMGNuVmxPMXh1WEc1MllYSWdYM1I1Y0dWdlpqSWdQU0J5WlhGMWFYSmxLRndpTGk0dmFHVnNjR1Z5Y3k5MGVYQmxiMlpjSWlrN1hHNWNiblpoY2lCZmRIbHdaVzltTXlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNSNWNHVnZaaklwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyRnNiQ2tnZTF4dUlDQnBaaUFvSVhObGJHWXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSjBhR2x6SUdoaGMyNG5kQ0JpWldWdUlHbHVhWFJwWVd4cGMyVmtJQzBnYzNWd1pYSW9LU0JvWVhOdUozUWdZbVZsYmlCallXeHNaV1JjSWlrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1kyRnNiQ0FtSmlBb0tIUjVjR1Z2WmlCallXeHNJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnWENKMWJtUmxabWx1WldSY0lpQTZJQ2d3TENCZmRIbHdaVzltTXk1a1pXWmhkV3gwS1NoallXeHNLU2tnUFQwOUlGd2liMkpxWldOMFhDSWdmSHdnZEhsd1pXOW1JR05oYkd3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ1B5QmpZV3hzSURvZ2MyVnNaanRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXpOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUjVKeWs3WEc1MllYSWdKRTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1UFltcGxZM1E3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLR2wwTENCclpYa3NJR1JsYzJNcGUxeHVJQ0J5WlhSMWNtNGdKRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1TENCa1pYTmpLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F6Tmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElEa2lMQ0l2THlBeE9TNHhMakl1TWlBdklERTFMakl1TXk0MUlFOWlhbVZqZEM1amNtVmhkR1VvVHlCYkxDQlFjbTl3WlhKMGFXVnpYU2xjYm5aaGNpQmhiazlpYW1WamRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1pGQnpJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhCekp5bGNiaUFnTENCbGJuVnRRblZuUzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJWdWRXMHRZblZuTFd0bGVYTW5LVnh1SUNBc0lFbEZYMUJTVDFSUElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrTFd0bGVTY3BLQ2RKUlY5UVVrOVVUeWNwWEc0Z0lDd2dSVzF3ZEhrZ0lDQWdJQ0FnUFNCbWRXNWpkR2x2YmlncGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc0Z0lDd2dVRkpQVkU5VVdWQkZJQ0FnUFNBbmNISnZkRzkwZVhCbEp6dGNibHh1THk4Z1EzSmxZWFJsSUc5aWFtVmpkQ0IzYVhSb0lHWmhhMlVnWUc1MWJHeGdJSEJ5YjNSdmRIbHdaVG9nZFhObElHbG1jbUZ0WlNCUFltcGxZM1FnZDJsMGFDQmpiR1ZoY21Wa0lIQnliM1J2ZEhsd1pWeHVkbUZ5SUdOeVpXRjBaVVJwWTNRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBdkx5QlVhSEpoYzJnc0lIZGhjM1JsSUdGdVpDQnpiMlJ2YlhrNklFbEZJRWRESUdKMVoxeHVJQ0IyWVhJZ2FXWnlZVzFsSUQwZ2NtVnhkV2x5WlNnbkxpOWZaRzl0TFdOeVpXRjBaU2NwS0NkcFpuSmhiV1VuS1Z4dUlDQWdJQ3dnYVNBZ0lDQWdJRDBnWlc1MWJVSjFaMHRsZVhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JzZENBZ0lDQWdQU0FuUENkY2JpQWdJQ0FzSUdkMElDQWdJQ0E5SUNjK0oxeHVJQ0FnSUN3Z2FXWnlZVzFsUkc5amRXMWxiblE3WEc0Z0lHbG1jbUZ0WlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh1SUNCeVpYRjFhWEpsS0NjdUwxOW9kRzFzSnlrdVlYQndaVzVrUTJocGJHUW9hV1p5WVcxbEtUdGNiaUFnYVdaeVlXMWxMbk55WXlBOUlDZHFZWFpoYzJOeWFYQjBPaWM3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0YzJOeWFYQjBMWFZ5YkZ4dUlDQXZMeUJqY21WaGRHVkVhV04wSUQwZ2FXWnlZVzFsTG1OdmJuUmxiblJYYVc1a2IzY3VUMkpxWldOME8xeHVJQ0F2THlCb2RHMXNMbkpsYlc5MlpVTm9hV3hrS0dsbWNtRnRaU2s3WEc0Z0lHbG1jbUZ0WlVSdlkzVnRaVzUwSUQwZ2FXWnlZVzFsTG1OdmJuUmxiblJYYVc1a2IzY3VaRzlqZFcxbGJuUTdYRzRnSUdsbWNtRnRaVVJ2WTNWdFpXNTBMbTl3Wlc0b0tUdGNiaUFnYVdaeVlXMWxSRzlqZFcxbGJuUXVkM0pwZEdVb2JIUWdLeUFuYzJOeWFYQjBKeUFySUdkMElDc2dKMlJ2WTNWdFpXNTBMa1k5VDJKcVpXTjBKeUFySUd4MElDc2dKeTl6WTNKcGNIUW5JQ3NnWjNRcE8xeHVJQ0JwWm5KaGJXVkViMk4xYldWdWRDNWpiRzl6WlNncE8xeHVJQ0JqY21WaGRHVkVhV04wSUQwZ2FXWnlZVzFsUkc5amRXMWxiblF1Ump0Y2JpQWdkMmhwYkdVb2FTMHRLV1JsYkdWMFpTQmpjbVZoZEdWRWFXTjBXMUJTVDFSUFZGbFFSVjFiWlc1MWJVSjFaMHRsZVhOYmFWMWRPMXh1SUNCeVpYUjFjbTRnWTNKbFlYUmxSR2xqZENncE8xeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1F1WTNKbFlYUmxJSHg4SUdaMWJtTjBhVzl1SUdOeVpXRjBaU2hQTENCUWNtOXdaWEowYVdWektYdGNiaUFnZG1GeUlISmxjM1ZzZER0Y2JpQWdhV1lvVHlBaFBUMGdiblZzYkNsN1hHNGdJQ0FnUlcxd2RIbGJVRkpQVkU5VVdWQkZYU0E5SUdGdVQySnFaV04wS0U4cE8xeHVJQ0FnSUhKbGMzVnNkQ0E5SUc1bGR5QkZiWEIwZVR0Y2JpQWdJQ0JGYlhCMGVWdFFVazlVVDFSWlVFVmRJRDBnYm5Wc2JEdGNiaUFnSUNBdkx5QmhaR1FnWENKZlgzQnliM1J2WDE5Y0lpQm1iM0lnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUlIQnZiSGxtYVd4c1hHNGdJQ0FnY21WemRXeDBXMGxGWDFCU1QxUlBYU0E5SUU4N1hHNGdJSDBnWld4elpTQnlaWE4xYkhRZ1BTQmpjbVZoZEdWRWFXTjBLQ2s3WEc0Z0lISmxkSFZ5YmlCUWNtOXdaWEowYVdWeklEMDlQU0IxYm1SbFptbHVaV1FnUHlCeVpYTjFiSFFnT2lCa1VITW9jbVZ6ZFd4MExDQlFjbTl3WlhKMGFXVnpLVHRjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFqY21WaGRHVXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRE0zWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWlMQ0oyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1THk4Z01Ua3VNUzR5TGpRZ0x5QXhOUzR5TGpNdU5pQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWxjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJWEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a3NJQ2RQWW1wbFkzUW5MQ0I3WkdWbWFXNWxVSEp2Y0dWeWRIazZJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcExtWjlLVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlETTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdnT1NJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQk1TVUpTUVZKWklDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LVnh1SUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCeVpXUmxabWx1WlNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCb2FXUmxJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCSmRHVnlZWFJ2Y25NZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEpoZEc5eWN5Y3BYRzRnSUN3Z0pHbDBaWEpEY21WaGRHVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOeVpXRjBaU2NwWEc0Z0lDd2djMlYwVkc5VGRISnBibWRVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeWNwWEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0JKVkVWU1FWUlBVaUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dRbFZIUjFrZ0lDQWdJQ0FnSUNBZ1BTQWhLRnRkTG10bGVYTWdKaVlnSjI1bGVIUW5JR2x1SUZ0ZExtdGxlWE1vS1NrZ0x5OGdVMkZtWVhKcElHaGhjeUJpZFdkbmVTQnBkR1Z5WVhSdmNuTWdkeTl2SUdCdVpYaDBZRnh1SUNBc0lFWkdYMGxVUlZKQlZFOVNJQ0FnSUQwZ0owQkFhWFJsY21GMGIzSW5YRzRnSUN3Z1MwVlpVeUFnSUNBZ0lDQWdJQ0FnUFNBbmEyVjVjeWRjYmlBZ0xDQldRVXhWUlZNZ0lDQWdJQ0FnSUNBOUlDZDJZV3gxWlhNbk8xeHVYRzUyWVhJZ2NtVjBkWEp1VkdocGN5QTlJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUIwYUdsek95QjlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VKaGMyVXNJRTVCVFVVc0lFTnZibk4wY25WamRHOXlMQ0J1WlhoMExDQkVSVVpCVlV4VUxDQkpVMTlUUlZRc0lFWlBVa05GUkNsN1hHNGdJQ1JwZEdWeVEzSmxZWFJsS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGTENCdVpYaDBLVHRjYmlBZ2RtRnlJR2RsZEUxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0d0cGJtUXBlMXh1SUNBZ0lHbG1LQ0ZDVlVkSFdTQW1KaUJyYVc1a0lHbHVJSEJ5YjNSdktYSmxkSFZ5YmlCd2NtOTBiMXRyYVc1a1hUdGNiaUFnSUNCemQybDBZMmdvYTJsdVpDbDdYRzRnSUNBZ0lDQmpZWE5sSUV0RldWTTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnJaWGx6S0NsN0lISmxkSFZ5YmlCdVpYY2dRMjl1YzNSeWRXTjBiM0lvZEdocGN5d2dhMmx1WkNrN0lIMDdYRzRnSUNBZ0lDQmpZWE5sSUZaQlRGVkZVem9nY21WMGRYSnVJR1oxYm1OMGFXOXVJSFpoYkhWbGN5Z3BleUJ5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtIUm9hWE1zSUd0cGJtUXBPeUI5TzF4dUlDQWdJSDBnY21WMGRYSnVJR1oxYm1OMGFXOXVJR1Z1ZEhKcFpYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdmVHRjYmlBZ2RtRnlJRlJCUnlBZ0lDQWdJQ0FnUFNCT1FVMUZJQ3NnSnlCSmRHVnlZWFJ2Y2lkY2JpQWdJQ0FzSUVSRlJsOVdRVXhWUlZNZ1BTQkVSVVpCVlV4VUlEMDlJRlpCVEZWRlUxeHVJQ0FnSUN3Z1ZrRk1WVVZUWDBKVlJ5QTlJR1poYkhObFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRbUZ6WlM1d2NtOTBiM1I1Y0dWY2JpQWdJQ0FzSUNSdVlYUnBkbVVnSUNBZ1BTQndjbTkwYjF0SlZFVlNRVlJQVWwwZ2ZId2djSEp2ZEc5YlJrWmZTVlJGVWtGVVQxSmRJSHg4SUVSRlJrRlZURlFnSmlZZ2NISnZkRzliUkVWR1FWVk1WRjFjYmlBZ0lDQXNJQ1JrWldaaGRXeDBJQ0FnUFNBa2JtRjBhWFpsSUh4OElHZGxkRTFsZEdodlpDaEVSVVpCVlV4VUtWeHVJQ0FnSUN3Z0pHVnVkSEpwWlhNZ0lDQTlJRVJGUmtGVlRGUWdQeUFoUkVWR1gxWkJURlZGVXlBL0lDUmtaV1poZFd4MElEb2daMlYwVFdWMGFHOWtLQ2RsYm5SeWFXVnpKeWtnT2lCMWJtUmxabWx1WldSY2JpQWdJQ0FzSUNSaGJubE9ZWFJwZG1VZ1BTQk9RVTFGSUQwOUlDZEJjbkpoZVNjZ1B5QndjbTkwYnk1bGJuUnlhV1Z6SUh4OElDUnVZWFJwZG1VZ09pQWtibUYwYVhabFhHNGdJQ0FnTENCdFpYUm9iMlJ6TENCclpYa3NJRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxPMXh1SUNBdkx5QkdhWGdnYm1GMGFYWmxYRzRnSUdsbUtDUmhibmxPWVhScGRtVXBlMXh1SUNBZ0lFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb0pHRnVlVTVoZEdsMlpTNWpZV3hzS0c1bGR5QkNZWE5sS1NrN1hHNGdJQ0FnYVdZb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ0lUMDlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXBlMXh1SUNBZ0lDQWdMeThnVTJWMElFQkFkRzlUZEhKcGJtZFVZV2NnZEc4Z2JtRjBhWFpsSUdsMFpYSmhkRzl5YzF4dUlDQWdJQ0FnYzJWMFZHOVRkSEpwYm1kVVlXY29TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJRlJCUnl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0F2THlCbWFYZ2dabTl5SUhOdmJXVWdiMnhrSUdWdVoybHVaWE5jYmlBZ0lDQWdJR2xtS0NGTVNVSlNRVkpaSUNZbUlDRm9ZWE1vU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUVsVVJWSkJWRTlTS1Nsb2FXUmxLRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JKVkVWU1FWUlBVaXdnY21WMGRYSnVWR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUM4dklHWnBlQ0JCY25KaGVTTjdkbUZzZFdWekxDQkFRR2wwWlhKaGRHOXlmUzV1WVcxbElHbHVJRlk0SUM4Z1JrWmNiaUFnYVdZb1JFVkdYMVpCVEZWRlV5QW1KaUFrYm1GMGFYWmxJQ1ltSUNSdVlYUnBkbVV1Ym1GdFpTQWhQVDBnVmtGTVZVVlRLWHRjYmlBZ0lDQldRVXhWUlZOZlFsVkhJRDBnZEhKMVpUdGNiaUFnSUNBa1pHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlIWmhiSFZsY3lncGV5QnlaWFIxY200Z0pHNWhkR2wyWlM1allXeHNLSFJvYVhNcE95QjlPMXh1SUNCOVhHNGdJQzh2SUVSbFptbHVaU0JwZEdWeVlYUnZjbHh1SUNCcFppZ29JVXhKUWxKQlVsa2dmSHdnUms5U1EwVkVLU0FtSmlBb1FsVkhSMWtnZkh3Z1ZrRk1WVVZUWDBKVlJ5QjhmQ0FoY0hKdmRHOWJTVlJGVWtGVVQxSmRLU2w3WEc0Z0lDQWdhR2xrWlNod2NtOTBieXdnU1ZSRlVrRlVUMUlzSUNSa1pXWmhkV3gwS1R0Y2JpQWdmVnh1SUNBdkx5QlFiSFZuSUdadmNpQnNhV0p5WVhKNVhHNGdJRWwwWlhKaGRHOXljMXRPUVUxRlhTQTlJQ1JrWldaaGRXeDBPMXh1SUNCSmRHVnlZWFJ2Y25OYlZFRkhYU0FnUFNCeVpYUjFjbTVVYUdsek8xeHVJQ0JwWmloRVJVWkJWVXhVS1h0Y2JpQWdJQ0J0WlhSb2IyUnpJRDBnZTF4dUlDQWdJQ0FnZG1Gc2RXVnpPaUFnUkVWR1gxWkJURlZGVXlBL0lDUmtaV1poZFd4MElEb2daMlYwVFdWMGFHOWtLRlpCVEZWRlV5a3NYRzRnSUNBZ0lDQnJaWGx6T2lBZ0lDQkpVMTlUUlZRZ0lDQWdJRDhnSkdSbFptRjFiSFFnT2lCblpYUk5aWFJvYjJRb1MwVlpVeWtzWEc0Z0lDQWdJQ0JsYm5SeWFXVnpPaUFrWlc1MGNtbGxjMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9SazlTUTBWRUtXWnZjaWhyWlhrZ2FXNGdiV1YwYUc5a2N5bDdYRzRnSUNBZ0lDQnBaaWdoS0d0bGVTQnBiaUJ3Y205MGJ5a3BjbVZrWldacGJtVW9jSEp2ZEc4c0lHdGxlU3dnYldWMGFHOWtjMXRyWlhsZEtUdGNiaUFnSUNCOUlHVnNjMlVnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9RbFZIUjFrZ2ZId2dWa0ZNVlVWVFgwSlZSeWtzSUU1QlRVVXNJRzFsZEdodlpITXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnRaWFJvYjJSek8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WkdWbWFXNWxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F6T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMnB6YjI0dmMzUnlhVzVuYVdaNVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5cWMyOXVMM04wY21sdVoybG1lUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTkRCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0EySWl3aVpYaHdiM0owY3k1bUlEMGdlMzB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRjR2xsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBME1WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTG1SdlkzVnRaVzUwSUNZbUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZER0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmgwYld3dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEUXlYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSXZMeUF4T1M0eExqSXVPU0F2SURFMUxqSXVNeTR5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaFBLVnh1ZG1GeUlHaGhjeUFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1NVVmZVRkpQVkU4Z0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1F0YTJWNUp5a29KMGxGWDFCU1QxUlBKeWxjYmlBZ0xDQlBZbXBsWTNSUWNtOTBieUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1U3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1JSHg4SUdaMWJtTjBhVzl1S0U4cGUxeHVJQ0JQSUQwZ2RHOVBZbXBsWTNRb1R5azdYRzRnSUdsbUtHaGhjeWhQTENCSlJWOVFVazlVVHlrcGNtVjBkWEp1SUU5YlNVVmZVRkpQVkU5ZE8xeHVJQ0JwWmloMGVYQmxiMllnVHk1amIyNXpkSEoxWTNSdmNpQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlFOGdhVzV6ZEdGdVkyVnZaaUJQTG1OdmJuTjBjblZqZEc5eUtYdGNiaUFnSUNCeVpYUjFjbTRnVHk1amIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVTdYRzRnSUgwZ2NtVjBkWEp1SUU4Z2FXNXpkR0Z1WTJWdlppQlBZbXBsWTNRZ1B5QlBZbXBsWTNSUWNtOTBieUE2SUc1MWJHdzdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXZHdieTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTkROY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSW5aaGNpQm9ZWE1nSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1Z4dUlDQXNJR0Z5Y21GNVNXNWtaWGhQWmlBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXbHVZMngxWkdWekp5a29abUZzYzJVcFhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtMV3RsZVNjcEtDZEpSVjlRVWs5VVR5Y3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYm1GdFpYTXBlMXh1SUNCMllYSWdUeUFnSUNBZ0lEMGdkRzlKVDJKcVpXTjBLRzlpYW1WamRDbGNiaUFnSUNBc0lHa2dJQ0FnSUNBOUlEQmNiaUFnSUNBc0lISmxjM1ZzZENBOUlGdGRYRzRnSUNBZ0xDQnJaWGs3WEc0Z0lHWnZjaWhyWlhrZ2FXNGdUeWxwWmloclpYa2dJVDBnU1VWZlVGSlBWRThwYUdGektFOHNJR3RsZVNrZ0ppWWdjbVZ6ZFd4MExuQjFjMmdvYTJWNUtUdGNiaUFnTHk4Z1JHOXVKM1FnWlc1MWJTQmlkV2NnSmlCb2FXUmtaVzRnYTJWNWMxeHVJQ0IzYUdsc1pTaHVZVzFsY3k1c1pXNW5kR2dnUGlCcEtXbG1LR2hoY3loUExDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTbDdYRzRnSUNBZ2ZtRnljbUY1U1c1a1pYaFBaaWh5WlhOMWJIUXNJR3RsZVNrZ2ZId2djbVZ6ZFd4MExuQjFjMmdvYTJWNUtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTBORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lMeThnYlc5emRDQlBZbXBsWTNRZ2JXVjBhRzlrY3lCaWVTQkZVellnYzJodmRXeGtJR0ZqWTJWd2RDQndjbWx0YVhScGRtVnpYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kyOXlaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktWeHVJQ0FzSUdaaGFXeHpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUdWNFpXTXBlMXh1SUNCMllYSWdabTRnSUQwZ0tHTnZjbVV1VDJKcVpXTjBJSHg4SUh0OUtWdExSVmxkSUh4OElFOWlhbVZqZEZ0TFJWbGRYRzRnSUNBZ0xDQmxlSEFnUFNCN2ZUdGNiaUFnWlhod1cwdEZXVjBnUFNCbGVHVmpLR1p1S1R0Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lCbVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCbWJpZ3hLVHNnZlNrc0lDZFBZbXBsWTNRbkxDQmxlSEFwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzF6WVhBdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEUTFYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNKbFpHVm1hVzVsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBME5seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSWl3aUx5OGdOeTR4TGpFMUlGUnZUR1Z1WjNSb1hHNTJZWElnZEc5SmJuUmxaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDd2diV2x1SUNBZ0lDQWdJRDBnVFdGMGFDNXRhVzQ3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUQ0Z01DQS9JRzFwYmloMGIwbHVkR1ZuWlhJb2FYUXBMQ0F3ZURGbVptWm1abVptWm1abVptWm1LU0E2SURBN0lDOHZJSEJ2ZHlneUxDQTFNeWtnTFNBeElEMDlJRGt3TURjeE9Ua3lOVFEzTkRBNU9URmNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTFzWlc1bmRHZ3Vhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFEzWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWlMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdOdmNtVWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXlaU2NwWEc0Z0lDd2dURWxDVWtGU1dTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWxjYmlBZ0xDQjNhM05GZUhRZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3kxbGVIUW5LVnh1SUNBc0lHUmxabWx1WlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1Wmp0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2JtRnRaU2w3WEc0Z0lIWmhjaUFrVTNsdFltOXNJRDBnWTI5eVpTNVRlVzFpYjJ3Z2ZId2dLR052Y21VdVUzbHRZbTlzSUQwZ1RFbENVa0ZTV1NBL0lIdDlJRG9nWjJ4dlltRnNMbE41YldKdmJDQjhmQ0I3ZlNrN1hHNGdJR2xtS0c1aGJXVXVZMmhoY2tGMEtEQXBJQ0U5SUNkZkp5QW1KaUFoS0c1aGJXVWdhVzRnSkZONWJXSnZiQ2twWkdWbWFXNWxVSEp2Y0dWeWRIa29KRk41YldKdmJDd2dibUZ0WlN3Z2UzWmhiSFZsT2lCM2EzTkZlSFF1WmlodVlXMWxLWDBwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNkcmN5MWtaV1pwYm1VdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEUTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSW1WNGNHOXlkSE11WmlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZDJ0ekxXVjRkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTkRsY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JoZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZWFFuS1NoMGNuVmxLVHRjYmx4dUx5OGdNakV1TVM0ekxqSTNJRk4wY21sdVp5NXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pXWnBibVVuS1NoVGRISnBibWNzSUNkVGRISnBibWNuTENCbWRXNWpkR2x2YmlocGRHVnlZWFJsWkNsN1hHNGdJSFJvYVhNdVgzUWdQU0JUZEhKcGJtY29hWFJsY21GMFpXUXBPeUF2THlCMFlYSm5aWFJjYmlBZ2RHaHBjeTVmYVNBOUlEQTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmk4dklESXhMakV1TlM0eUxqRWdKVk4wY21sdVowbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpTNXVaWGgwS0NsY2JuMHNJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQTlJSFJvYVhNdVgzUmNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVZ4dUlDQWdJQ3dnY0c5cGJuUTdYRzRnSUdsbUtHbHVaR1Y0SUQ0OUlFOHViR1Z1WjNSb0tYSmxkSFZ5YmlCN2RtRnNkV1U2SUhWdVpHVm1hVzVsWkN3Z1pHOXVaVG9nZEhKMVpYMDdYRzRnSUhCdmFXNTBJRDBnSkdGMEtFOHNJR2x1WkdWNEtUdGNiaUFnZEdocGN5NWZhU0FyUFNCd2IybHVkQzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUI3ZG1Gc2RXVTZJSEJ2YVc1MExDQmtiMjVsT2lCbVlXeHpaWDA3WEc1OUtUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05UQmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0luSmxjWFZwY21Vb0p5NHZaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlKeWs3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRWwwWlhKaGRHOXljeUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeVlYUnZjbk1uS1Z4dUlDQXNJRlJQWDFOVVVrbE9SMTlVUVVjZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25kRzlUZEhKcGJtZFVZV2NuS1R0Y2JseHVabTl5S0haaGNpQmpiMnhzWldOMGFXOXVjeUE5SUZzblRtOWtaVXhwYzNRbkxDQW5SRTlOVkc5clpXNU1hWE4wSnl3Z0owMWxaR2xoVEdsemRDY3NJQ2RUZEhsc1pWTm9aV1YwVEdsemRDY3NJQ2REVTFOU2RXeGxUR2x6ZENkZExDQnBJRDBnTURzZ2FTQThJRFU3SUdrckt5bDdYRzRnSUhaaGNpQk9RVTFGSUNBZ0lDQWdJRDBnWTI5c2JHVmpkR2x2Ym5OYmFWMWNiaUFnSUNBc0lFTnZiR3hsWTNScGIyNGdQU0JuYkc5aVlXeGJUa0ZOUlYxY2JpQWdJQ0FzSUhCeWIzUnZJQ0FnSUNBZ1BTQkRiMnhzWldOMGFXOXVJQ1ltSUVOdmJHeGxZM1JwYjI0dWNISnZkRzkwZVhCbE8xeHVJQ0JwWmlod2NtOTBieUFtSmlBaGNISnZkRzliVkU5ZlUxUlNTVTVIWDFSQlIxMHBhR2xrWlNod2NtOTBieXdnVkU5ZlUxUlNTVTVIWDFSQlJ5d2dUa0ZOUlNrN1hHNGdJRWwwWlhKaGRHOXljMXRPUVUxRlhTQTlJRWwwWlhKaGRHOXljeTVCY25KaGVUdGNibjFjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05URmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0luWmhjaUJqYjNKbElDQTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1Z4dUlDQXNJQ1JLVTA5T0lEMGdZMjl5WlM1S1UwOU9JSHg4SUNoamIzSmxMa3BUVDA0Z1BTQjdjM1J5YVc1bmFXWjVPaUJLVTA5T0xuTjBjbWx1WjJsbWVYMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJ6ZEhKcGJtZHBabmtvYVhRcGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUhKbGRIVnliaUFrU2xOUFRpNXpkSEpwYm1kcFpua3VZWEJ3Ykhrb0pFcFRUMDRzSUdGeVozVnRaVzUwY3lrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5rdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVXpYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pSXNJaTh2SUdkbGRIUnBibWNnZEdGbklHWnliMjBnTVRrdU1TNHpMallnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeWdwWEc1MllYSWdZMjltSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlsY2JpQWdMQ0JVUVVjZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25kRzlUZEhKcGJtZFVZV2NuS1Z4dUlDQXZMeUJGVXpNZ2QzSnZibWNnYUdWeVpWeHVJQ0FzSUVGU1J5QTlJR052WmlobWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1lYSm5kVzFsYm5Sek95QjlLQ2twSUQwOUlDZEJjbWQxYldWdWRITW5PMXh1WEc0dkx5Qm1ZV3hzWW1GamF5Qm1iM0lnU1VVeE1TQlRZM0pwY0hRZ1FXTmpaWE56SUVSbGJtbGxaQ0JsY25KdmNseHVkbUZ5SUhSeWVVZGxkQ0E5SUdaMWJtTjBhVzl1S0dsMExDQnJaWGtwZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQnBkRnRyWlhsZE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2RtRnlJRThzSUZRc0lFSTdYRzRnSUhKbGRIVnliaUJwZENBOVBUMGdkVzVrWldacGJtVmtJRDhnSjFWdVpHVm1hVzVsWkNjZ09pQnBkQ0E5UFQwZ2JuVnNiQ0EvSUNkT2RXeHNKMXh1SUNBZ0lDOHZJRUJBZEc5VGRISnBibWRVWVdjZ1kyRnpaVnh1SUNBZ0lEb2dkSGx3Wlc5bUlDaFVJRDBnZEhKNVIyVjBLRThnUFNCUFltcGxZM1FvYVhRcExDQlVRVWNwS1NBOVBTQW5jM1J5YVc1bkp5QS9JRlJjYmlBZ0lDQXZMeUJpZFdsc2RHbHVWR0ZuSUdOaGMyVmNiaUFnSUNBNklFRlNSeUEvSUdOdlppaFBLVnh1SUNBZ0lDOHZJRVZUTXlCaGNtZDFiV1Z1ZEhNZ1ptRnNiR0poWTJ0Y2JpQWdJQ0E2SUNoQ0lEMGdZMjltS0U4cEtTQTlQU0FuVDJKcVpXTjBKeUFtSmlCMGVYQmxiMllnVHk1allXeHNaV1VnUFQwZ0oyWjFibU4wYVc5dUp5QS9JQ2RCY21kMWJXVnVkSE1uSURvZ1FqdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpiR0Z6YzI5bUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTFOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQTBJRFVpTENJdkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYm05dUxXRnljbUY1TFd4cGEyVWdSVk16SUdGdVpDQnViMjR0Wlc1MWJXVnlZV0pzWlNCdmJHUWdWamdnYzNSeWFXNW5jMXh1ZG1GeUlHTnZaaUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1FvSjNvbktTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2d3S1NBL0lFOWlhbVZqZENBNklHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdOdlppaHBkQ2tnUFQwZ0oxTjBjbWx1WnljZ1B5QnBkQzV6Y0d4cGRDZ25KeWtnT2lCUFltcGxZM1FvYVhRcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHZZbXBsWTNRdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVTJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSjJZWElnY0VsRklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQnliM0JsY25SNUxXUmxjMk1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UWNtbHRhWFJwZG1VZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0JKUlRoZlJFOU5YMFJGUmtsT1JTQTlJSEpsY1hWcGNtVW9KeTR2WDJsbE9DMWtiMjB0WkdWbWFXNWxKeWxjYmlBZ0xDQm5UMUJFSUNBZ0lDQWdJQ0FnSUNBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k3WEc1Y2JtVjRjRzl5ZEhNdVppQTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJuVDFCRUlEb2dablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtFOHNJRkFwZTF4dUlDQlBJRDBnZEc5SlQySnFaV04wS0U4cE8xeHVJQ0JRSUQwZ2RHOVFjbWx0YVhScGRtVW9VQ3dnZEhKMVpTazdYRzRnSUdsbUtFbEZPRjlFVDAxZlJFVkdTVTVGS1hSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkUFVFUW9UeXdnVUNrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnYVdZb2FHRnpLRThzSUZBcEtYSmxkSFZ5YmlCamNtVmhkR1ZFWlhOaktDRndTVVV1Wmk1allXeHNLRThzSUZBcExDQlBXMUJkS1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjI5d1pDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVGRjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aVpYaHdiM0owY3k1bUlEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0ExT0Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOXBkR1Z5WVhSdmNpQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiQzlwZEdWeVlYUnZjbHdpS1R0Y2JseHVkbUZ5SUY5cGRHVnlZWFJ2Y2pJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5cGRHVnlZWFJ2Y2lrN1hHNWNiblpoY2lCZmMzbHRZbTlzSUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZjM2x0WW05c1hDSXBPMXh1WEc1MllYSWdYM041YldKdmJESWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOXplVzFpYjJ3cE8xeHVYRzUyWVhJZ1gzUjVjR1Z2WmlBOUlIUjVjR1Z2WmlCZmMzbHRZbTlzTWk1a1pXWmhkV3gwSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ2RIbHdaVzltSUY5cGRHVnlZWFJ2Y2pJdVpHVm1ZWFZzZENBOVBUMGdYQ0p6ZVcxaWIyeGNJaUEvSUdaMWJtTjBhVzl1SUNodlltb3BJSHNnY21WMGRYSnVJSFI1Y0dWdlppQnZZbW83SUgwZ09pQm1kVzVqZEdsdmJpQW9iMkpxS1NCN0lISmxkSFZ5YmlCdlltb2dKaVlnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUY5emVXMWliMnd5TG1SbFptRjFiSFFnSmlZZ2IySnFJQ0U5UFNCZmMzbHRZbTlzTWk1a1pXWmhkV3gwTG5CeWIzUnZkSGx3WlNBL0lGd2ljM2x0WW05c1hDSWdPaUIwZVhCbGIyWWdiMkpxT3lCOU8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0IwZVhCbGIyWWdYM041YldKdmJESXVaR1ZtWVhWc2RDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JRjkwZVhCbGIyWW9YMmwwWlhKaGRHOXlNaTVrWldaaGRXeDBLU0E5UFQwZ1hDSnplVzFpYjJ4Y0lpQS9JR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnZZbW9nUFQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCY0luVnVaR1ZtYVc1bFpGd2lJRG9nWDNSNWNHVnZaaWh2WW1vcE8xeHVmU0E2SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ2NtVjBkWEp1SUc5aWFpQW1KaUIwZVhCbGIyWWdYM041YldKdmJESXVaR1ZtWVhWc2RDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpQTlQVDBnWDNONWJXSnZiREl1WkdWbVlYVnNkQ0FtSmlCdlltb2dJVDA5SUY5emVXMWliMnd5TG1SbFptRjFiSFF1Y0hKdmRHOTBlWEJsSUQ4Z1hDSnplVzFpYjJ4Y0lpQTZJSFI1Y0dWdlppQnZZbW9nUFQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCY0luVnVaR1ZtYVc1bFpGd2lJRG9nWDNSNWNHVnZaaWh2WW1vcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNSNWNHVnZaaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTlRsY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpZ3BleUF2S2lCbGJYQjBlU0FxTHlCOU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMk1GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSWl3aUx5OGdabUZzYzJVZ0xUNGdRWEp5WVhramFXNWtaWGhQWmx4dUx5OGdkSEoxWlNBZ0xUNGdRWEp5WVhramFXNWpiSFZrWlhOY2JuWmhjaUIwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktWeHVJQ0FzSUhSdlNXNWtaWGdnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdVpHVjRKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VsVFgwbE9RMHhWUkVWVEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ1IwYUdsekxDQmxiQ3dnWm5KdmJVbHVaR1Y0S1h0Y2JpQWdJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOUpUMkpxWldOMEtDUjBhR2x6S1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2RHOUpibVJsZUNobWNtOXRTVzVrWlhnc0lHeGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2RtRnNkV1U3WEc0Z0lDQWdMeThnUVhKeVlYa2phVzVqYkhWa1pYTWdkWE5sY3lCVFlXMWxWbUZzZFdWYVpYSnZJR1Z4ZFdGc2FYUjVJR0ZzWjI5eWFYUm9iVnh1SUNBZ0lHbG1LRWxUWDBsT1EweFZSRVZUSUNZbUlHVnNJQ0U5SUdWc0tYZG9hV3hsS0d4bGJtZDBhQ0ErSUdsdVpHVjRLWHRjYmlBZ0lDQWdJSFpoYkhWbElEMGdUMXRwYm1SbGVDc3JYVHRjYmlBZ0lDQWdJR2xtS0haaGJIVmxJQ0U5SUhaaGJIVmxLWEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQzh2SUVGeWNtRjVJM1J2U1c1a1pYZ2dhV2R1YjNKbGN5Qm9iMnhsY3l3Z1FYSnlZWGtqYVc1amJIVmtaWE1nTFNCdWIzUmNiaUFnSUNCOUlHVnNjMlVnWm05eUtEdHNaVzVuZEdnZ1BpQnBibVJsZURzZ2FXNWtaWGdyS3lscFppaEpVMTlKVGtOTVZVUkZVeUI4ZkNCcGJtUmxlQ0JwYmlCUEtYdGNiaUFnSUNBZ0lHbG1LRTliYVc1a1pYaGRJRDA5UFNCbGJDbHlaWFIxY200Z1NWTmZTVTVEVEZWRVJWTWdmSHdnYVc1a1pYZ2dmSHdnTUR0Y2JpQWdJQ0I5SUhKbGRIVnliaUFoU1ZOZlNVNURURlZFUlZNZ0ppWWdMVEU3WEc0Z0lIMDdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZWEp5WVhrdGFXNWpiSFZrWlhNdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEWXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdZM0psWVhSbElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRZM0psWVhSbEp5bGNiaUFnTENCa1pYTmpjbWx3ZEc5eUlDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQnliM0JsY25SNUxXUmxjMk1uS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxJRDBnZTMwN1hHNWNiaTh2SURJMUxqRXVNaTR4TGpFZ0pVbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpWdEFRR2wwWlhKaGRHOXlYU2dwWEc1eVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlrb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVc0lISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BMQ0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGN6c2dmU2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1EyOXVjM1J5ZFdOMGIzSXNJRTVCVFVVc0lHNWxlSFFwZTF4dUlDQkRiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VnUFNCamNtVmhkR1VvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUh0dVpYaDBPaUJrWlhOamNtbHdkRzl5S0RFc0lHNWxlSFFwZlNrN1hHNGdJSE5sZEZSdlUzUnlhVzVuVkdGbktFTnZibk4wY25WamRHOXlMQ0JPUVUxRklDc2dKeUJKZEdWeVlYUnZjaWNwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRZM0psWVhSbExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTJNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaGtiMjVsTENCMllXeDFaU2w3WEc0Z0lISmxkSFZ5YmlCN2RtRnNkV1U2SUhaaGJIVmxMQ0JrYjI1bE9pQWhJV1J2Ym1WOU8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0YzNSbGNDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOak5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJblpoY2lCa1VDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdkbGRFdGxlWE1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElEOGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNZ09pQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektFOHNJRkJ5YjNCbGNuUnBaWE1wZTF4dUlDQmhiazlpYW1WamRDaFBLVHRjYmlBZ2RtRnlJR3RsZVhNZ0lDQTlJR2RsZEV0bGVYTW9VSEp2Y0dWeWRHbGxjeWxjYmlBZ0lDQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JwSUQwZ01GeHVJQ0FnSUN3Z1VEdGNiaUFnZDJocGJHVW9iR1Z1WjNSb0lENGdhU2xrVUM1bUtFOHNJRkFnUFNCclpYbHpXMmtySzEwc0lGQnliM0JsY25ScFpYTmJVRjBwTzF4dUlDQnlaWFIxY200Z1R6dGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFpIQnpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTkZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpTHk4Z01Ua3VNUzR5TGpjZ0x5QXhOUzR5TGpNdU5DQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aFBLVnh1ZG1GeUlDUnJaWGx6SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDY3BYRzRnSUN3Z2FHbGtaR1Z1UzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJWdWRXMHRZblZuTFd0bGVYTW5LUzVqYjI1allYUW9KMnhsYm1kMGFDY3NJQ2R3Y205MGIzUjVjR1VuS1R0Y2JseHVaWGh3YjNKMGN5NW1JRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1nZkh3Z1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aFBLWHRjYmlBZ2NtVjBkWEp1SUNSclpYbHpLRThzSUdocFpHUmxia3RsZVhNcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnVMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EyTlZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNaUxDSjJZWElnZEc5SmJuUmxaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDd2daR1ZtYVc1bFpDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHVMeThnZEhKMVpTQWdMVDRnVTNSeWFXNW5JMkYwWEc0dkx5Qm1ZV3h6WlNBdFBpQlRkSEpwYm1jalkyOWtaVkJ2YVc1MFFYUmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9WRTlmVTFSU1NVNUhLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0hSb1lYUXNJSEJ2Y3lsN1hHNGdJQ0FnZG1GeUlITWdQU0JUZEhKcGJtY29aR1ZtYVc1bFpDaDBhR0YwS1NsY2JpQWdJQ0FnSUN3Z2FTQTlJSFJ2U1c1MFpXZGxjaWh3YjNNcFhHNGdJQ0FnSUNBc0lHd2dQU0J6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0JoTENCaU8xeHVJQ0FnSUdsbUtHa2dQQ0F3SUh4OElHa2dQajBnYkNseVpYUjFjbTRnVkU5ZlUxUlNTVTVISUQ4Z0p5Y2dPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdZU0E5SUhNdVkyaGhja052WkdWQmRDaHBLVHRjYmlBZ0lDQnlaWFIxY200Z1lTQThJREI0WkRnd01DQjhmQ0JoSUQ0Z01IaGtZbVptSUh4OElHa2dLeUF4SUQwOVBTQnNJSHg4SUNoaUlEMGdjeTVqYUdGeVEyOWtaVUYwS0drZ0t5QXhLU2tnUENBd2VHUmpNREFnZkh3Z1lpQStJREI0WkdabVpseHVJQ0FnSUNBZ1B5QlVUMTlUVkZKSlRrY2dQeUJ6TG1Ob1lYSkJkQ2hwS1NBNklHRmNiaUFnSUNBZ0lEb2dWRTlmVTFSU1NVNUhJRDhnY3k1emJHbGpaU2hwTENCcElDc2dNaWtnT2lBb1lTQXRJREI0WkRnd01DQThQQ0F4TUNrZ0t5QW9ZaUF0SURCNFpHTXdNQ2tnS3lBd2VERXdNREF3TzF4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM04wY21sdVp5MWhkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTmpaY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSW5aaGNpQmpkSGdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lHbHVkbTlyWlNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdWRtOXJaU2NwWEc0Z0lDd2dhSFJ0YkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFIUnRiQ2NwWEc0Z0lDd2dZMlZzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHOXRMV055WldGMFpTY3BYRzRnSUN3Z1oyeHZZbUZzSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQndjbTlqWlhOeklDQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VjSEp2WTJWemMxeHVJQ0FzSUhObGRGUmhjMnNnSUNBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1elpYUkpiVzFsWkdsaGRHVmNiaUFnTENCamJHVmhjbFJoYzJzZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVkyeGxZWEpKYlcxbFpHbGhkR1ZjYmlBZ0xDQk5aWE56WVdkbFEyaGhibTVsYkNBZ0lDQWdQU0JuYkc5aVlXd3VUV1Z6YzJGblpVTm9ZVzV1Wld4Y2JpQWdMQ0JqYjNWdWRHVnlJQ0FnSUNBZ0lDQWdJQ0FnUFNBd1hHNGdJQ3dnY1hWbGRXVWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2UzMWNiaUFnTENCUFRsSkZRVVJaVTFSQlZFVkRTRUZPUjBVZ1BTQW5iMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxKMXh1SUNBc0lHUmxabVZ5TENCamFHRnVibVZzTENCd2IzSjBPMXh1ZG1GeUlISjFiaUE5SUdaMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCcFpDQTlJQ3QwYUdsek8xeHVJQ0JwWmloeGRXVjFaUzVvWVhOUGQyNVFjbTl3WlhKMGVTaHBaQ2twZTF4dUlDQWdJSFpoY2lCbWJpQTlJSEYxWlhWbFcybGtYVHRjYmlBZ0lDQmtaV3hsZEdVZ2NYVmxkV1ZiYVdSZE8xeHVJQ0FnSUdadUtDazdYRzRnSUgxY2JuMDdYRzUyWVhJZ2JHbHpkR1Z1WlhJZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENsN1hHNGdJSEoxYmk1allXeHNLR1YyWlc1MExtUmhkR0VwTzF4dWZUdGNiaTh2SUU1dlpHVXVhbk1nTUM0NUt5QW1JRWxGTVRBcklHaGhjeUJ6WlhSSmJXMWxaR2xoZEdVc0lHOTBhR1Z5ZDJselpUcGNibWxtS0NGelpYUlVZWE5ySUh4OElDRmpiR1ZoY2xSaGMyc3BlMXh1SUNCelpYUlVZWE5ySUQwZ1puVnVZM1JwYjI0Z2MyVjBTVzF0WldScFlYUmxLR1p1S1h0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUZ0ZExDQnBJRDBnTVR0Y2JpQWdJQ0IzYUdsc1pTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdhU2xoY21kekxuQjFjMmdvWVhKbmRXMWxiblJ6VzJrcksxMHBPMXh1SUNBZ0lIRjFaWFZsV3lzclkyOTFiblJsY2wwZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdhVzUyYjJ0bEtIUjVjR1Z2WmlCbWJpQTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z1ptNGdPaUJHZFc1amRHbHZiaWhtYmlrc0lHRnlaM01wTzF4dUlDQWdJSDA3WEc0Z0lDQWdaR1ZtWlhJb1kyOTFiblJsY2lrN1hHNGdJQ0FnY21WMGRYSnVJR052ZFc1MFpYSTdYRzRnSUgwN1hHNGdJR05zWldGeVZHRnpheUE5SUdaMWJtTjBhVzl1SUdOc1pXRnlTVzF0WldScFlYUmxLR2xrS1h0Y2JpQWdJQ0JrWld4bGRHVWdjWFZsZFdWYmFXUmRPMXh1SUNCOU8xeHVJQ0F2THlCT2IyUmxMbXB6SURBdU9DMWNiaUFnYVdZb2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrb2NISnZZMlZ6Y3lrZ1BUMGdKM0J5YjJObGMzTW5LWHRjYmlBZ0lDQmtaV1psY2lBOUlHWjFibU4wYVc5dUtHbGtLWHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZM1I0S0hKMWJpd2dhV1FzSURFcEtUdGNiaUFnSUNCOU8xeHVJQ0F2THlCQ2NtOTNjMlZ5Y3lCM2FYUm9JRTFsYzNOaFoyVkRhR0Z1Ym1Wc0xDQnBibU5zZFdSbGN5QlhaV0pYYjNKclpYSnpYRzRnSUgwZ1pXeHpaU0JwWmloTlpYTnpZV2RsUTJoaGJtNWxiQ2w3WEc0Z0lDQWdZMmhoYm01bGJDQTlJRzVsZHlCTlpYTnpZV2RsUTJoaGJtNWxiRHRjYmlBZ0lDQndiM0owSUNBZ0lEMGdZMmhoYm01bGJDNXdiM0owTWp0Y2JpQWdJQ0JqYUdGdWJtVnNMbkJ2Y25ReExtOXViV1Z6YzJGblpTQTlJR3hwYzNSbGJtVnlPMXh1SUNBZ0lHUmxabVZ5SUQwZ1kzUjRLSEJ2Y25RdWNHOXpkRTFsYzNOaFoyVXNJSEJ2Y25Rc0lERXBPMXh1SUNBdkx5QkNjbTkzYzJWeWN5QjNhWFJvSUhCdmMzUk5aWE56WVdkbExDQnphMmx3SUZkbFlsZHZjbXRsY25OY2JpQWdMeThnU1VVNElHaGhjeUJ3YjNOMFRXVnpjMkZuWlN3Z1luVjBJR2wwSjNNZ2MzbHVZeUFtSUhSNWNHVnZaaUJwZEhNZ2NHOXpkRTFsYzNOaFoyVWdhWE1nSjI5aWFtVmpkQ2RjYmlBZ2ZTQmxiSE5sSUdsbUtHZHNiMkpoYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SUNZbUlIUjVjR1Z2WmlCd2IzTjBUV1Z6YzJGblpTQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDRm5iRzlpWVd3dWFXMXdiM0owVTJOeWFYQjBjeWw3WEc0Z0lDQWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpaHBaQ2w3WEc0Z0lDQWdJQ0JuYkc5aVlXd3VjRzl6ZEUxbGMzTmhaMlVvYVdRZ0t5QW5KeXdnSnlvbktUdGNiaUFnSUNCOU8xeHVJQ0FnSUdkc2IySmhiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R0WlhOellXZGxKeXdnYkdsemRHVnVaWElzSUdaaGJITmxLVHRjYmlBZ0x5OGdTVVU0TFZ4dUlDQjlJR1ZzYzJVZ2FXWW9UMDVTUlVGRVdWTlVRVlJGUTBoQlRrZEZJR2x1SUdObGJDZ25jMk55YVhCMEp5a3BlMXh1SUNBZ0lHUmxabVZ5SUQwZ1puVnVZM1JwYjI0b2FXUXBlMXh1SUNBZ0lDQWdhSFJ0YkM1aGNIQmxibVJEYUdsc1pDaGpaV3dvSjNOamNtbHdkQ2NwS1Z0UFRsSkZRVVJaVTFSQlZFVkRTRUZPUjBWZElEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnYUhSdGJDNXlaVzF2ZG1WRGFHbHNaQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdjblZ1TG1OaGJHd29hV1FwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQXZMeUJTWlhOMElHOXNaQ0JpY205M2MyVnljMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR1JsWm1WeUlEMGdablZ1WTNScGIyNG9hV1FwZTF4dUlDQWdJQ0FnYzJWMFZHbHRaVzkxZENoamRIZ29jblZ1TENCcFpDd2dNU2tzSURBcE8xeHVJQ0FnSUgwN1hHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0J6WlhRNklDQWdjMlYwVkdGemF5eGNiaUFnWTJ4bFlYSTZJR05zWldGeVZHRnphMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1JoYzJzdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEWTNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElEUWdOU0lzSW5aaGNpQjBiMGx1ZEdWblpYSWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiblJsWjJWeUp5bGNiaUFnTENCdFlYZ2dJQ0FnSUNBZ1BTQk5ZWFJvTG0xaGVGeHVJQ0FzSUcxcGJpQWdJQ0FnSUNBOUlFMWhkR2d1YldsdU8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBibVJsZUN3Z2JHVnVaM1JvS1h0Y2JpQWdhVzVrWlhnZ1BTQjBiMGx1ZEdWblpYSW9hVzVrWlhncE8xeHVJQ0J5WlhSMWNtNGdhVzVrWlhnZ1BDQXdJRDhnYldGNEtHbHVaR1Y0SUNzZ2JHVnVaM1JvTENBd0tTQTZJRzFwYmlocGJtUmxlQ3dnYkdWdVozUm9LVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJtUmxlQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTmpoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCaFpHUlViMVZ1YzJOdmNHRmliR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWxjYmlBZ0xDQnpkR1Z3SUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMXpkR1Z3SnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwTzF4dVhHNHZMeUF5TWk0eExqTXVOQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVaVzUwY21sbGN5Z3BYRzR2THlBeU1pNHhMak11TVRNZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG10bGVYTW9LVnh1THk4Z01qSXVNUzR6TGpJNUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1MllXeDFaWE1vS1Z4dUx5OGdNakl1TVM0ekxqTXdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pWdEFRR2wwWlhKaGRHOXlYU2dwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWbWFXNWxKeWtvUVhKeVlYa3NJQ2RCY25KaGVTY3NJR1oxYm1OMGFXOXVLR2wwWlhKaGRHVmtMQ0JyYVc1a0tYdGNiaUFnZEdocGN5NWZkQ0E5SUhSdlNVOWlhbVZqZENocGRHVnlZWFJsWkNrN0lDOHZJSFJoY21kbGRGeHVJQ0IwYUdsekxsOXBJRDBnTURzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibVY0ZENCcGJtUmxlRnh1SUNCMGFHbHpMbDlySUQwZ2EybHVaRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYTJsdVpGeHVMeThnTWpJdU1TNDFMakl1TVNBbFFYSnlZWGxKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU1V1Ym1WNGRDZ3BYRzU5TENCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnUFNCMGFHbHpMbDkwWEc0Z0lDQWdMQ0JyYVc1a0lDQTlJSFJvYVhNdVgydGNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVNzck8xeHVJQ0JwWmlnaFR5QjhmQ0JwYm1SbGVDQStQU0JQTG14bGJtZDBhQ2w3WEc0Z0lDQWdkR2hwY3k1ZmRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnlaWFIxY200Z2MzUmxjQ2d4S1R0Y2JpQWdmVnh1SUNCcFppaHJhVzVrSUQwOUlDZHJaWGx6SnlBZ0tYSmxkSFZ5YmlCemRHVndLREFzSUdsdVpHVjRLVHRjYmlBZ2FXWW9hMmx1WkNBOVBTQW5kbUZzZFdWekp5bHlaWFIxY200Z2MzUmxjQ2d3TENCUFcybHVaR1Y0WFNrN1hHNGdJSEpsZEhWeWJpQnpkR1Z3S0RBc0lGdHBibVJsZUN3Z1QxdHBibVJsZUYxZEtUdGNibjBzSUNkMllXeDFaWE1uS1R0Y2JseHVMeThnWVhKbmRXMWxiblJ6VEdsemRGdEFRR2wwWlhKaGRHOXlYU0JwY3lBbFFYSnlZWGxRY205MGIxOTJZV3gxWlhNbElDZzVMalF1TkM0MkxDQTVMalF1TkM0M0tWeHVTWFJsY21GMGIzSnpMa0Z5WjNWdFpXNTBjeUE5SUVsMFpYSmhkRzl5Y3k1QmNuSmhlVHRjYmx4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmEyVjVjeWNwTzF4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmRtRnNkV1Z6SnlrN1hHNWhaR1JVYjFWdWMyTnZjR0ZpYkdWektDZGxiblJ5YVdWekp5azdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05qbGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YTJWNWMxd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJ0bGVYTXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGN3WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXlJRFFnTlNJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5d2NtOXRhWE5sWENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl3Y205dGFYTmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EzTVZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0EwSURVaUxDSjJZWElnVFVWVVFTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTFhV1FuS1NnbmJXVjBZU2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0J6WlhSRVpYTmpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQnBaQ0FnSUNBZ0lDQTlJREE3WEc1MllYSWdhWE5GZUhSbGJuTnBZbXhsSUQwZ1QySnFaV04wTG1selJYaDBaVzV6YVdKc1pTQjhmQ0JtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z2RISjFaVHRjYm4wN1hHNTJZWElnUmxKRlJWcEZJRDBnSVhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJR2x6UlhoMFpXNXphV0pzWlNoUFltcGxZM1F1Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk1vZTMwcEtUdGNibjBwTzF4dWRtRnlJSE5sZEUxbGRHRWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSE5sZEVSbGMyTW9hWFFzSUUxRlZFRXNJSHQyWVd4MVpUb2dlMXh1SUNBZ0lHazZJQ2RQSnlBcklDc3JhV1FzSUM4dklHOWlhbVZqZENCSlJGeHVJQ0FnSUhjNklIdDlJQ0FnSUNBZ0lDQWdJQzh2SUhkbFlXc2dZMjlzYkdWamRHbHZibk1nU1VSelhHNGdJSDE5S1R0Y2JuMDdYRzUyWVhJZ1ptRnpkRXRsZVNBOUlHWjFibU4wYVc5dUtHbDBMQ0JqY21WaGRHVXBlMXh1SUNBdkx5QnlaWFIxY200Z2NISnBiV2wwYVhabElIZHBkR2dnY0hKbFptbDRYRzRnSUdsbUtDRnBjMDlpYW1WamRDaHBkQ2twY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFNBbmMzbHRZbTlzSnlBL0lHbDBJRG9nS0hSNWNHVnZaaUJwZENBOVBTQW5jM1J5YVc1bkp5QS9JQ2RUSnlBNklDZFFKeWtnS3lCcGREdGNiaUFnYVdZb0lXaGhjeWhwZEN3Z1RVVlVRU2twZTF4dUlDQWdJQzh2SUdOaGJpZDBJSE5sZENCdFpYUmhaR0YwWVNCMGJ5QjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2IySnFaV04wWEc0Z0lDQWdhV1lvSVdselJYaDBaVzV6YVdKc1pTaHBkQ2twY21WMGRYSnVJQ2RHSnp0Y2JpQWdJQ0F2THlCdWIzUWdibVZqWlhOellYSjVJSFJ2SUdGa1pDQnRaWFJoWkdGMFlWeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUNkRkp6dGNiaUFnSUNBdkx5QmhaR1FnYldsemMybHVaeUJ0WlhSaFpHRjBZVnh1SUNBZ0lITmxkRTFsZEdFb2FYUXBPMXh1SUNBdkx5QnlaWFIxY200Z2IySnFaV04wSUVsRVhHNGdJSDBnY21WMGRYSnVJR2wwVzAxRlZFRmRMbWs3WEc1OU8xeHVkbUZ5SUdkbGRGZGxZV3NnUFNCbWRXNWpkR2x2YmlocGRDd2dZM0psWVhSbEtYdGNiaUFnYVdZb0lXaGhjeWhwZEN3Z1RVVlVRU2twZTF4dUlDQWdJQzh2SUdOaGJpZDBJSE5sZENCdFpYUmhaR0YwWVNCMGJ5QjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2IySnFaV04wWEc0Z0lDQWdhV1lvSVdselJYaDBaVzV6YVdKc1pTaHBkQ2twY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnTHk4Z2JtOTBJRzVsWTJWemMyRnllU0IwYnlCaFpHUWdiV1YwWVdSaGRHRmNiaUFnSUNCcFppZ2hZM0psWVhSbEtYSmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQXZMeUJoWkdRZ2JXbHpjMmx1WnlCdFpYUmhaR0YwWVZ4dUlDQWdJSE5sZEUxbGRHRW9hWFFwTzF4dUlDQXZMeUJ5WlhSMWNtNGdhR0Z6YUNCM1pXRnJJR052Ykd4bFkzUnBiMjV6SUVsRWMxeHVJQ0I5SUhKbGRIVnliaUJwZEZ0TlJWUkJYUzUzTzF4dWZUdGNiaTh2SUdGa1pDQnRaWFJoWkdGMFlTQnZiaUJtY21WbGVtVXRabUZ0YVd4NUlHMWxkR2h2WkhNZ1kyRnNiR2x1WjF4dWRtRnlJRzl1Um5KbFpYcGxJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmloR1VrVkZXa1VnSmlZZ2JXVjBZUzVPUlVWRUlDWW1JR2x6UlhoMFpXNXphV0pzWlNocGRDa2dKaVlnSVdoaGN5aHBkQ3dnVFVWVVFTa3BjMlYwVFdWMFlTaHBkQ2s3WEc0Z0lISmxkSFZ5YmlCcGREdGNibjA3WEc1MllYSWdiV1YwWVNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JMUlZrNklDQWdJQ0FnVFVWVVFTeGNiaUFnVGtWRlJEb2dJQ0FnSUdaaGJITmxMRnh1SUNCbVlYTjBTMlY1T2lBZ1ptRnpkRXRsZVN4Y2JpQWdaMlYwVjJWaGF6b2dJR2RsZEZkbFlXc3NYRzRnSUc5dVJuSmxaWHBsT2lCdmJrWnlaV1Y2WlZ4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDIxbGRHRXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGN5WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlJc0luWmhjaUJqYkdGemMyOW1JQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiR0Z6YzI5bUp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LVnh1SUNBc0lFbDBaWEpoZEc5eWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5a3VaMlYwU1hSbGNtRjBiM0pOWlhSb2IyUWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0dsMElDRTlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdhWFJiU1ZSRlVrRlVUMUpkWEc0Z0lDQWdmSHdnYVhSYkowQkFhWFJsY21GMGIzSW5YVnh1SUNBZ0lIeDhJRWwwWlhKaGRHOXljMXRqYkdGemMyOW1LR2wwS1YwN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURjelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURRZ05TSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlkzSmxZWFJsWENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZZM0psWVhSbExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTNORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMM05sZEMxd2NtOTBiM1I1Y0dVdGIyWmNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM05WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZjM2x0WW05c1hDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5emVXMWliMnd1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURjMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXplVzFpYjJ3dmFYUmxjbUYwYjNKY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDNONWJXSnZiQzlwZEdWeVlYUnZjaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTnpkY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtTnlaV0YwWlNjcE8xeHVkbUZ5SUNSUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOME8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmpjbVZoZEdVb1VDd2dSQ2w3WEc0Z0lISmxkSFZ5YmlBa1QySnFaV04wTG1OeVpXRjBaU2hRTENCRUtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZM0psWVhSbExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTNPRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGM1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1clpYbHpKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdWEyVjVjenRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXJaWGx6TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNE1GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTWlBMElEVWlMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVjMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1PMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZ3hYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSW5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtY25LVHRjYm5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsSnlrN1hHNXlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMMlZ6Tmk1d2NtOXRhWE5sSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVFjbTl0YVhObE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmNISnZiV2x6WlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09ESmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ05DQTFJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YzNsdFltOXNKeWs3WEc1eVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1ZEc4dGMzUnlhVzVuSnlrN1hHNXlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1dlluTmxjblpoWW14bEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1VGVXMWliMnc3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl6ZVcxaWIyd3ZhVzVrWlhndWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZ3pYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTkzWldJdVpHOXRMbWwwWlhKaFlteGxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYM2RyY3kxbGVIUW5LUzVtS0NkcGRHVnlZWFJ2Y2ljcE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmMzbHRZbTlzTDJsMFpYSmhkRzl5TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNE5GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCRGIyNXpkSEoxWTNSdmNpd2dibUZ0WlN3Z1ptOXlZbWxrWkdWdVJtbGxiR1FwZTF4dUlDQnBaaWdoS0dsMElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwSUh4OElDaG1iM0ppYVdSa1pXNUdhV1ZzWkNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUdadmNtSnBaR1JsYmtacFpXeGtJR2x1SUdsMEtTbDdYRzRnSUNBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0c1aGJXVWdLeUFuT2lCcGJtTnZjbkpsWTNRZ2FXNTJiMk5oZEdsdmJpRW5LVHRjYmlBZ2ZTQnlaWFIxY200Z2FYUTdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZVzR0YVc1emRHRnVZMlV1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURnMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURRZ05TSXNJaTh2SUdGc2JDQmxiblZ0WlhKaFlteGxJRzlpYW1WamRDQnJaWGx6TENCcGJtTnNkV1JsY3lCemVXMWliMnh6WEc1MllYSWdaMlYwUzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5bGNiaUFnTENCblQxQlRJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjSE1uS1Z4dUlDQXNJSEJKUlNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0FnSUNBZ1BTQm5aWFJMWlhsektHbDBLVnh1SUNBZ0lDd2daMlYwVTNsdFltOXNjeUE5SUdkUFVGTXVaanRjYmlBZ2FXWW9aMlYwVTNsdFltOXNjeWw3WEc0Z0lDQWdkbUZ5SUhONWJXSnZiSE1nUFNCblpYUlRlVzFpYjJ4ektHbDBLVnh1SUNBZ0lDQWdMQ0JwYzBWdWRXMGdJRDBnY0VsRkxtWmNiaUFnSUNBZ0lDd2dhU0FnSUNBZ0lDQTlJREJjYmlBZ0lDQWdJQ3dnYTJWNU8xeHVJQ0FnSUhkb2FXeGxLSE41YldKdmJITXViR1Z1WjNSb0lENGdhU2xwWmlocGMwVnVkVzB1WTJGc2JDaHBkQ3dnYTJWNUlEMGdjM2x0WW05c2MxdHBLeXRkS1NseVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQjlJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpXNTFiUzFyWlhsekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRObHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKMllYSWdZM1I0SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR05oYkd3Z0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxallXeHNKeWxjYmlBZ0xDQnBjMEZ5Y21GNVNYUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlgybHpMV0Z5Y21GNUxXbDBaWEluS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYRzRnSUN3Z1oyVjBTWFJsY2tadUlDQWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQ2NwWEc0Z0lDd2dRbEpGUVVzZ0lDQWdJQ0FnUFNCN2ZWeHVJQ0FzSUZKRlZGVlNUaUFnSUNBZ0lEMGdlMzA3WEc1MllYSWdaWGh3YjNKMGN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFJsY21GaWJHVXNJR1Z1ZEhKcFpYTXNJR1p1TENCMGFHRjBMQ0JKVkVWU1FWUlBVaWw3WEc0Z0lIWmhjaUJwZEdWeVJtNGdQU0JKVkVWU1FWUlBVaUEvSUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCcGRHVnlZV0pzWlRzZ2ZTQTZJR2RsZEVsMFpYSkdiaWhwZEdWeVlXSnNaU2xjYmlBZ0lDQXNJR1lnSUNBZ0lDQTlJR04wZUNobWJpd2dkR2hoZEN3Z1pXNTBjbWxsY3lBL0lESWdPaUF4S1Z4dUlDQWdJQ3dnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ3dnYkdWdVozUm9MQ0J6ZEdWd0xDQnBkR1Z5WVhSdmNpd2djbVZ6ZFd4ME8xeHVJQ0JwWmloMGVYQmxiMllnYVhSbGNrWnVJQ0U5SUNkbWRXNWpkR2x2YmljcGRHaHliM2NnVkhsd1pVVnljbTl5S0dsMFpYSmhZbXhsSUNzZ0p5QnBjeUJ1YjNRZ2FYUmxjbUZpYkdVaEp5azdYRzRnSUM4dklHWmhjM1FnWTJGelpTQm1iM0lnWVhKeVlYbHpJSGRwZEdnZ1pHVm1ZWFZzZENCcGRHVnlZWFJ2Y2x4dUlDQnBaaWhwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1dadmNpaHNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaHBkR1Z5WVdKc1pTNXNaVzVuZEdncE95QnNaVzVuZEdnZ1BpQnBibVJsZURzZ2FXNWtaWGdyS3lsN1hHNGdJQ0FnY21WemRXeDBJRDBnWlc1MGNtbGxjeUEvSUdZb1lXNVBZbXBsWTNRb2MzUmxjQ0E5SUdsMFpYSmhZbXhsVzJsdVpHVjRYU2xiTUYwc0lITjBaWEJiTVYwcElEb2daaWhwZEdWeVlXSnNaVnRwYm1SbGVGMHBPMXh1SUNBZ0lHbG1LSEpsYzNWc2RDQTlQVDBnUWxKRlFVc2dmSHdnY21WemRXeDBJRDA5UFNCU1JWUlZVazRwY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlNCbGJITmxJR1p2Y2locGRHVnlZWFJ2Y2lBOUlHbDBaWEpHYmk1allXeHNLR2wwWlhKaFlteGxLVHNnSVNoemRHVndJRDBnYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bE95QXBlMXh1SUNBZ0lISmxjM1ZzZENBOUlHTmhiR3dvYVhSbGNtRjBiM0lzSUdZc0lITjBaWEF1ZG1Gc2RXVXNJR1Z1ZEhKcFpYTXBPMXh1SUNBZ0lHbG1LSEpsYzNWc2RDQTlQVDBnUWxKRlFVc2dmSHdnY21WemRXeDBJRDA5UFNCU1JWUlZVazRwY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZUdGNibVY0Y0c5eWRITXVRbEpGUVVzZ0lEMGdRbEpGUVVzN1hHNWxlSEJ2Y25SekxsSkZWRlZTVGlBOUlGSkZWRlZTVGp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMlp2Y2kxdlppNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPRGRjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdOQ0ExSWl3aUx5OGdabUZ6ZENCaGNIQnNlU3dnYUhSMGNEb3ZMMnB6Y0dWeVppNXNibXRwZEM1amIyMHZabUZ6ZEMxaGNIQnNlUzgxWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dadUxDQmhjbWR6TENCMGFHRjBLWHRjYmlBZ2RtRnlJSFZ1SUQwZ2RHaGhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0J6ZDJsMFkyZ29ZWEpuY3k1c1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Eb2djbVYwZFhKdUlIVnVJRDhnWm00b0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1ptNHVZMkZzYkNoMGFHRjBLVHRjYmlBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCMWJpQS9JR1p1S0dGeVozTmJNRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJtYmk1allXeHNLSFJvWVhRc0lHRnlaM05iTUYwcE8xeHVJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJSFZ1SUQ4Z1ptNG9ZWEpuYzFzd1hTd2dZWEpuYzFzeFhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ3dnWVhKbmMxc3dYU3dnWVhKbmMxc3hYU2s3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZExDQmhjbWR6V3pGZExDQmhjbWR6V3pKZEtUdGNiaUFnSUNCallYTmxJRFE2SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHNJR0Z5WjNOYk0xMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBzSUdGeVozTmJNbDBzSUdGeVozTmJNMTBwTzF4dUlDQjlJSEpsZEhWeWJpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm00dVlYQndiSGtvZEdoaGRDd2dZWEpuY3lrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXNTJiMnRsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNE9GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBMElEVWlMQ0l2THlCamFHVmpheUJ2YmlCa1pXWmhkV3gwSUVGeWNtRjVJR2wwWlhKaGRHOXlYRzUyWVhJZ1NYUmxjbUYwYjNKeklDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcFhHNGdJQ3dnU1ZSRlVrRlVUMUlnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1FYSnlZWGxRY205MGJ5QTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQnBkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JQ2hKZEdWeVlYUnZjbk11UVhKeVlYa2dQVDA5SUdsMElIeDhJRUZ5Y21GNVVISnZkRzliU1ZSRlVrRlVUMUpkSUQwOVBTQnBkQ2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhNdFlYSnlZWGt0YVhSbGNpNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPRGxjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdOQ0ExSWl3aUx5OGdOeTR5TGpJZ1NYTkJjbkpoZVNoaGNtZDFiV1Z1ZENsY2JuWmhjaUJqYjJZZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJZbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRWEp5WVhrdWFYTkJjbkpoZVNCOGZDQm1kVzVqZEdsdmJpQnBjMEZ5Y21GNUtHRnlaeWw3WEc0Z0lISmxkSFZ5YmlCamIyWW9ZWEpuS1NBOVBTQW5RWEp5WVhrbk8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHpMV0Z5Y21GNUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTVNRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENJdkx5QmpZV3hzSUhOdmJXVjBhR2x1WnlCdmJpQnBkR1Z5WVhSdmNpQnpkR1Z3SUhkcGRHZ2djMkZtWlNCamJHOXphVzVuSUc5dUlHVnljbTl5WEc1MllYSWdZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFJsY21GMGIzSXNJR1p1TENCMllXeDFaU3dnWlc1MGNtbGxjeWw3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVnVkSEpwWlhNZ1B5Qm1iaWhoYms5aWFtVmpkQ2gyWVd4MVpTbGJNRjBzSUhaaGJIVmxXekZkS1NBNklHWnVLSFpoYkhWbEtUdGNiaUFnTHk4Z055NDBMallnU1hSbGNtRjBiM0pEYkc5elpTaHBkR1Z5WVhSdmNpd2dZMjl0Y0d4bGRHbHZiaWxjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNCMllYSWdjbVYwSUQwZ2FYUmxjbUYwYjNKYkozSmxkSFZ5YmlkZE8xeHVJQ0FnSUdsbUtISmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tXRnVUMkpxWldOMEtISmxkQzVqWVd4c0tHbDBaWEpoZEc5eUtTazdYRzRnSUNBZ2RHaHliM2NnWlR0Y2JpQWdmVnh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhJdFkyRnNiQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnT1RGY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTkNBMUlpd2lkbUZ5SUVsVVJWSkJWRTlTSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dVMEZHUlY5RFRFOVRTVTVISUQwZ1ptRnNjMlU3WEc1Y2JuUnllU0I3WEc0Z0lIWmhjaUJ5YVhSbGNpQTlJRnMzWFZ0SlZFVlNRVlJQVWwwb0tUdGNiaUFnY21sMFpYSmJKM0psZEhWeWJpZGRJRDBnWm5WdVkzUnBiMjRvS1hzZ1UwRkdSVjlEVEU5VFNVNUhJRDBnZEhKMVpUc2dmVHRjYmlBZ1FYSnlZWGt1Wm5KdmJTaHlhWFJsY2l3Z1puVnVZM1JwYjI0b0tYc2dkR2h5YjNjZ01qc2dmU2s3WEc1OUlHTmhkR05vS0dVcGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1pYaGxZeXdnYzJ0cGNFTnNiM05wYm1jcGUxeHVJQ0JwWmlnaGMydHBjRU5zYjNOcGJtY2dKaVlnSVZOQlJrVmZRMHhQVTBsT1J5bHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIWmhjaUJ6WVdabElEMGdabUZzYzJVN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHRnljaUFnUFNCYk4xMWNiaUFnSUNBZ0lDd2dhWFJsY2lBOUlHRnljbHRKVkVWU1FWUlBVbDBvS1R0Y2JpQWdJQ0JwZEdWeUxtNWxlSFFnUFNCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2UyUnZibVU2SUhOaFptVWdQU0IwY25WbGZUc2dmVHRjYmlBZ0lDQmhjbkpiU1ZSRlVrRlVUMUpkSUQwZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlHbDBaWEk3SUgwN1hHNGdJQ0FnWlhobFl5aGhjbklwTzF4dUlDQjlJR05oZEdOb0tHVXBleUF2S2lCbGJYQjBlU0FxTHlCOVhHNGdJSEpsZEhWeWJpQnpZV1psTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRaR1YwWldOMExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTVNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQTBJRFVpTENKMllYSWdaMlYwUzJWNWN5QWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVnh1SUNBc0lIUnZTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iMkpxWldOMExDQmxiQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQWdQU0IwYjBsUFltcGxZM1FvYjJKcVpXTjBLVnh1SUNBZ0lDd2dhMlY1Y3lBZ0lEMGdaMlYwUzJWNWN5aFBLVnh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2x1WkdWNElDQTlJREJjYmlBZ0lDQXNJR3RsZVR0Y2JpQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FXNWtaWGdwYVdZb1QxdHJaWGtnUFNCclpYbHpXMmx1WkdWNEt5dGRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlHdGxlVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlyWlhsdlppNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPVE5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aWRtRnlJR2RzYjJKaGJDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnYldGamNtOTBZWE5ySUQwZ2NtVnhkV2x5WlNnbkxpOWZkR0Z6YXljcExuTmxkRnh1SUNBc0lFOWljMlZ5ZG1WeUlDQTlJR2RzYjJKaGJDNU5kWFJoZEdsdmJrOWljMlZ5ZG1WeUlIeDhJR2RzYjJKaGJDNVhaV0pMYVhSTmRYUmhkR2x2Yms5aWMyVnlkbVZ5WEc0Z0lDd2djSEp2WTJWemN5QWdJRDBnWjJ4dlltRnNMbkJ5YjJObGMzTmNiaUFnTENCUWNtOXRhWE5sSUNBZ1BTQm5iRzlpWVd3dVVISnZiV2x6WlZ4dUlDQXNJR2x6VG05a1pTQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwS0hCeWIyTmxjM01wSUQwOUlDZHdjbTlqWlhOekp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnYUdWaFpDd2diR0Z6ZEN3Z2JtOTBhV1o1TzF4dVhHNGdJSFpoY2lCbWJIVnphQ0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZEN3Z1ptNDdYRzRnSUNBZ2FXWW9hWE5PYjJSbElDWW1JQ2h3WVhKbGJuUWdQU0J3Y205alpYTnpMbVJ2YldGcGJpa3BjR0Z5Wlc1MExtVjRhWFFvS1R0Y2JpQWdJQ0IzYUdsc1pTaG9aV0ZrS1h0Y2JpQWdJQ0FnSUdadUlDQWdQU0JvWldGa0xtWnVPMXh1SUNBZ0lDQWdhR1ZoWkNBOUlHaGxZV1F1Ym1WNGREdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdadUtDazdYRzRnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0JwWmlob1pXRmtLVzV2ZEdsbWVTZ3BPMXh1SUNBZ0lDQWdJQ0JsYkhObElHeGhjM1FnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCc1lYTjBJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtS0hCaGNtVnVkQ2x3WVhKbGJuUXVaVzUwWlhJb0tUdGNiaUFnZlR0Y2JseHVJQ0F2THlCT2IyUmxMbXB6WEc0Z0lHbG1LR2x6VG05a1pTbDdYRzRnSUNBZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1pteDFjMmdwTzF4dUlDQWdJSDA3WEc0Z0lDOHZJR0p5YjNkelpYSnpJSGRwZEdnZ1RYVjBZWFJwYjI1UFluTmxjblpsY2x4dUlDQjlJR1ZzYzJVZ2FXWW9UMkp6WlhKMlpYSXBlMXh1SUNBZ0lIWmhjaUIwYjJkbmJHVWdQU0IwY25WbFhHNGdJQ0FnSUNBc0lHNXZaR1VnSUNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSbGVIUk9iMlJsS0NjbktUdGNiaUFnSUNCdVpYY2dUMkp6WlhKMlpYSW9abXgxYzJncExtOWljMlZ5ZG1Vb2JtOWtaU3dnZTJOb1lYSmhZM1JsY2tSaGRHRTZJSFJ5ZFdWOUtUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MXVaWGRjYmlBZ0lDQnViM1JwWm5rZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdibTlrWlM1a1lYUmhJRDBnZEc5bloyeGxJRDBnSVhSdloyZHNaVHRjYmlBZ0lDQjlPMXh1SUNBdkx5QmxiblpwY205dWJXVnVkSE1nZDJsMGFDQnRZWGxpWlNCdWIyNHRZMjl0Y0d4bGRHVnNlU0JqYjNKeVpXTjBMQ0JpZFhRZ1pYaHBjM1JsYm5RZ1VISnZiV2x6WlZ4dUlDQjlJR1ZzYzJVZ2FXWW9VSEp2YldselpTQW1KaUJRY205dGFYTmxMbkpsYzI5c2RtVXBlMXh1SUNBZ0lIWmhjaUJ3Y205dGFYTmxJRDBnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdibTkwYVdaNUlEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVkR2hsYmlobWJIVnphQ2s3WEc0Z0lDQWdmVHRjYmlBZ0x5OGdabTl5SUc5MGFHVnlJR1Z1ZG1seWIyNXRaVzUwY3lBdElHMWhZM0p2ZEdGemF5QmlZWE5sWkNCdmJqcGNiaUFnTHk4Z0xTQnpaWFJKYlcxbFpHbGhkR1ZjYmlBZ0x5OGdMU0JOWlhOellXZGxRMmhoYm01bGJGeHVJQ0F2THlBdElIZHBibVJ2ZHk1d2IzTjBUV1Z6YzJGblhHNGdJQzh2SUMwZ2IyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbFhHNGdJQzh2SUMwZ2MyVjBWR2x0Wlc5MWRGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHNXZkR2xtZVNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQXZMeUJ6ZEhKaGJtZGxJRWxGSUNzZ2QyVmljR0ZqYXlCa1pYWWdjMlZ5ZG1WeUlHSjFaeUF0SUhWelpTQXVZMkZzYkNobmJHOWlZV3dwWEc0Z0lDQWdJQ0J0WVdOeWIzUmhjMnN1WTJGc2JDaG5iRzlpWVd3c0lHWnNkWE5vS1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dadUtYdGNiaUFnSUNCMllYSWdkR0Z6YXlBOUlIdG1iam9nWm00c0lHNWxlSFE2SUhWdVpHVm1hVzVsWkgwN1hHNGdJQ0FnYVdZb2JHRnpkQ2xzWVhOMExtNWxlSFFnUFNCMFlYTnJPMXh1SUNBZ0lHbG1LQ0ZvWldGa0tYdGNiaUFnSUNBZ0lHaGxZV1FnUFNCMFlYTnJPMXh1SUNBZ0lDQWdibTkwYVdaNUtDazdYRzRnSUNBZ2ZTQnNZWE4wSUQwZ2RHRnphenRjYmlBZ2ZUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXRhV055YjNSaGMyc3Vhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGswWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRFFnTlNJc0lpOHZJR1poYkd4aVlXTnJJR1p2Y2lCSlJURXhJR0oxWjJkNUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWeklIZHBkR2dnYVdaeVlXMWxJR0Z1WkNCM2FXNWtiM2RjYm5aaGNpQjBiMGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCblQxQk9JQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcExtWmNiaUFnTENCMGIxTjBjbWx1WnlBZ1BTQjdmUzUwYjFOMGNtbHVaenRjYmx4dWRtRnlJSGRwYm1SdmQwNWhiV1Z6SUQwZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFNBbmIySnFaV04wSnlBbUppQjNhVzVrYjNjZ0ppWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTmNiaUFnUHlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loM2FXNWtiM2NwSURvZ1cxMDdYRzVjYm5aaGNpQm5aWFJYYVc1a2IzZE9ZVzFsY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z1owOVFUaWhwZENrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIZHBibVJ2ZDA1aGJXVnpMbk5zYVdObEtDazdYRzRnSUgxY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpMbVlnUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVTVoYldWektHbDBLWHRjYmlBZ2NtVjBkWEp1SUhkcGJtUnZkMDVoYldWeklDWW1JSFJ2VTNSeWFXNW5MbU5oYkd3b2FYUXBJRDA5SUNkYmIySnFaV04wSUZkcGJtUnZkMTBuSUQ4Z1oyVjBWMmx1Wkc5M1RtRnRaWE1vYVhRcElEb2daMDlRVGloMGIwbFBZbXBsWTNRb2FYUXBLVHRjYm4wN1hHNWNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCdUxXVjRkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnT1RWY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2lkbUZ5SUdocFpHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnYzNKakxDQnpZV1psS1h0Y2JpQWdabTl5S0haaGNpQnJaWGtnYVc0Z2MzSmpLWHRjYmlBZ0lDQnBaaWh6WVdabElDWW1JSFJoY21kbGRGdHJaWGxkS1hSaGNtZGxkRnRyWlhsZElEMGdjM0pqVzJ0bGVWMDdYRzRnSUNBZ1pXeHpaU0JvYVdSbEtIUmhjbWRsZEN3Z2EyVjVMQ0J6Y21OYmEyVjVYU2s3WEc0Z0lIMGdjbVYwZFhKdUlIUmhjbWRsZER0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5eVpXUmxabWx1WlMxaGJHd3Vhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGsyWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRFFnTlNJc0lpOHZJRmR2Y210eklIZHBkR2dnWDE5d2NtOTBiMTlmSUc5dWJIa3VJRTlzWkNCMk9DQmpZVzRuZENCM2IzSnJJSGRwZEdnZ2JuVnNiQ0J3Y205MGJ5QnZZbXBsWTNSekxseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0Y0hKdmRHOGdLaTljYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYm5aaGNpQmphR1ZqYXlBOUlHWjFibU4wYVc5dUtFOHNJSEJ5YjNSdktYdGNiaUFnWVc1UFltcGxZM1FvVHlrN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENod2NtOTBieWtnSmlZZ2NISnZkRzhnSVQwOUlHNTFiR3dwZEdoeWIzY2dWSGx3WlVWeWNtOXlLSEJ5YjNSdklDc2dYQ0k2SUdOaGJpZDBJSE5sZENCaGN5QndjbTkwYjNSNWNHVWhYQ0lwTzF4dWZUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCelpYUTZJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZDQW9KMTlmY0hKdmRHOWZYeWNnYVc0Z2UzMGdQeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnWm5WdVkzUnBiMjRvZEdWemRDd2dZblZuWjNrc0lITmxkQ2w3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnpaWFFnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1NoR2RXNWpkR2x2Ymk1allXeHNMQ0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BMbVlvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaU3dnSjE5ZmNISnZkRzlmWHljcExuTmxkQ3dnTWlrN1hHNGdJQ0FnSUNBZ0lITmxkQ2gwWlhOMExDQmJYU2s3WEc0Z0lDQWdJQ0FnSUdKMVoyZDVJRDBnSVNoMFpYTjBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BPMXh1SUNBZ0lDQWdmU0JqWVhSamFDaGxLWHNnWW5Wbloza2dQU0IwY25WbE95QjlYRzRnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2MyVjBVSEp2ZEc5MGVYQmxUMllvVHl3Z2NISnZkRzhwZTF4dUlDQWdJQ0FnSUNCamFHVmpheWhQTENCd2NtOTBieWs3WEc0Z0lDQWdJQ0FnSUdsbUtHSjFaMmQ1S1U4dVgxOXdjbTkwYjE5ZklEMGdjSEp2ZEc4N1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYzJWMEtFOHNJSEJ5YjNSdktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFODdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMG9lMzBzSUdaaGJITmxLU0E2SUhWdVpHVm1hVzVsWkNrc1hHNGdJR05vWldOck9pQmphR1ZqYTF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNObGRDMXdjbTkwYnk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09UZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1Z4dUlDQXNJR1JRSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQkVSVk5EVWtsUVZFOVNVeUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWxjYmlBZ0xDQlRVRVZEU1VWVElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkemNHVmphV1Z6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaS1h0Y2JpQWdkbUZ5SUVNZ1BTQjBlWEJsYjJZZ1kyOXlaVnRMUlZsZElEMDlJQ2RtZFc1amRHbHZiaWNnUHlCamIzSmxXMHRGV1YwZ09pQm5iRzlpWVd4YlMwVlpYVHRjYmlBZ2FXWW9SRVZUUTFKSlVGUlBVbE1nSmlZZ1F5QW1KaUFoUTF0VFVFVkRTVVZUWFNsa1VDNW1LRU1zSUZOUVJVTkpSVk1zSUh0Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2RHaHBjenNnZlZ4dUlDQjlLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6WlhRdGMzQmxZMmxsY3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09UaGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ05DQTFJaXdpTHk4Z055NHpMakl3SUZOd1pXTnBaWE5EYjI1emRISjFZM1J2Y2loUExDQmtaV1poZFd4MFEyOXVjM1J5ZFdOMGIzSXBYRzUyWVhJZ1lXNVBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JoUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQlRVRVZEU1VWVElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYzNCbFkybGxjeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloUExDQkVLWHRjYmlBZ2RtRnlJRU1nUFNCaGJrOWlhbVZqZENoUEtTNWpiMjV6ZEhKMVkzUnZjaXdnVXp0Y2JpQWdjbVYwZFhKdUlFTWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQW9VeUE5SUdGdVQySnFaV04wS0VNcFcxTlFSVU5KUlZOZEtTQTlQU0IxYm1SbFptbHVaV1FnUHlCRUlEb2dZVVoxYm1OMGFXOXVLRk1wTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEazVYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElEUWdOU0lzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmk4dklERTVMakV1TWk0eUlDOGdNVFV1TWk0ekxqVWdUMkpxWldOMExtTnlaV0YwWlNoUElGc3NJRkJ5YjNCbGNuUnBaWE5kS1Z4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdZM0psWVhSbE9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRZM0psWVhSbEp5bDlLVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWpjbVZoZEdVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXdNRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENJdkx5QXhPUzR4TGpJdU9TQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvVHlsY2JuWmhjaUIwYjA5aWFtVmpkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUNSblpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkblpYUlFjbTkwYjNSNWNHVlBaaWNzSUdaMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm5aWFJRY205MGIzUjVjR1ZQWmlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSblpYUlFjbTkwYjNSNWNHVlBaaWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UQXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSWk4dklERTVMakV1TWk0eE5DQlBZbXBsWTNRdWEyVjVjeWhQS1Z4dWRtRnlJSFJ2VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENBa2EyVjVjeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25hMlY1Y3ljc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJyWlhsektHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z0pHdGxlWE1vZEc5UFltcGxZM1FvYVhRcEtUdGNiaUFnZlR0Y2JuMHBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE11YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFd01seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTWlBMElEVWlMQ0l2THlBeE9TNHhMak11TVRrZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LRThzSUhCeWIzUnZLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblQySnFaV04wSnl3Z2UzTmxkRkJ5YjNSdmRIbHdaVTltT2lCeVpYRjFhWEpsS0NjdUwxOXpaWFF0Y0hKdmRHOG5LUzV6WlhSOUtUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1ETmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUV4SlFsSkJVbGtnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LVnh1SUNBc0lHZHNiMkpoYkNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dZM1I0SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQmpiR0Z6YzI5bUlDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amJHRnpjMjltSnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdselQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGFXNXpkR0Z1WTJVbktWeHVJQ0FzSUdadmNrOW1JQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlp2Y2kxdlppY3BYRzRnSUN3Z2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYzNCbFkybGxjeTFqYjI1emRISjFZM1J2Y2ljcFhHNGdJQ3dnZEdGemF5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkR0Z6YXljcExuTmxkRnh1SUNBc0lHMXBZM0p2ZEdGemF5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxcFkzSnZkR0Z6YXljcEtDbGNiaUFnTENCUVVrOU5TVk5GSUNBZ0lDQWdJQ0FnSUNBZ1BTQW5VSEp2YldselpTZGNiaUFnTENCVWVYQmxSWEp5YjNJZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVZIbHdaVVZ5Y205eVhHNGdJQ3dnY0hKdlkyVnpjeUFnSUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTG5CeWIyTmxjM05jYmlBZ0xDQWtVSEp2YldselpTQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXeGJVRkpQVFVsVFJWMWNiaUFnTENCd2NtOWpaWE56SUNBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dWNISnZZMlZ6YzF4dUlDQXNJR2x6VG05a1pTQWdJQ0FnSUNBZ0lDQWdJQ0E5SUdOc1lYTnpiMllvY0hKdlkyVnpjeWtnUFQwZ0ozQnliMk5sYzNNblhHNGdJQ3dnWlcxd2RIa2dJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ1puVnVZM1JwYjI0b0tYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQXNJRWx1ZEdWeWJtRnNMQ0JIWlc1bGNtbGpVSEp2YldselpVTmhjR0ZpYVd4cGRIa3NJRmR5WVhCd1pYSTdYRzVjYm5aaGNpQlZVMFZmVGtGVVNWWkZJRDBnSVNGbWRXNWpkR2x2YmlncGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUM4dklHTnZjbkpsWTNRZ2MzVmlZMnhoYzNOcGJtY2dkMmwwYUNCQVFITndaV05wWlhNZ2MzVndjRzl5ZEZ4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUNBZ0lDQTlJQ1JRY205dGFYTmxMbkpsYzI5c2RtVW9NU2xjYmlBZ0lDQWdJQ3dnUm1GclpWQnliMjFwYzJVZ1BTQW9jSEp2YldselpTNWpiMjV6ZEhKMVkzUnZjaUE5SUh0OUtWdHlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25jM0JsWTJsbGN5Y3BYU0E5SUdaMWJtTjBhVzl1S0dWNFpXTXBleUJsZUdWaktHVnRjSFI1TENCbGJYQjBlU2s3SUgwN1hHNGdJQ0FnTHk4Z2RXNW9ZVzVrYkdWa0lISmxhbVZqZEdsdmJuTWdkSEpoWTJ0cGJtY2djM1Z3Y0c5eWRDd2dUbTlrWlVwVElGQnliMjFwYzJVZ2QybDBhRzkxZENCcGRDQm1ZV2xzY3lCQVFITndaV05wWlhNZ2RHVnpkRnh1SUNBZ0lISmxkSFZ5YmlBb2FYTk9iMlJsSUh4OElIUjVjR1Z2WmlCUWNtOXRhWE5sVW1WcVpXTjBhVzl1UlhabGJuUWdQVDBnSjJaMWJtTjBhVzl1SnlrZ0ppWWdjSEp2YldselpTNTBhR1Z1S0dWdGNIUjVLU0JwYm5OMFlXNWpaVzltSUVaaGEyVlFjbTl0YVhObE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzU5S0NrN1hHNWNiaTh2SUdobGJIQmxjbk5jYm5aaGNpQnpZVzFsUTI5dWMzUnlkV04wYjNJZ1BTQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdMeThnZDJsMGFDQnNhV0p5WVhKNUlIZHlZWEJ3WlhJZ2MzQmxZMmxoYkNCallYTmxYRzRnSUhKbGRIVnliaUJoSUQwOVBTQmlJSHg4SUdFZ1BUMDlJQ1JRY205dGFYTmxJQ1ltSUdJZ1BUMDlJRmR5WVhCd1pYSTdYRzU5TzF4dWRtRnlJR2x6VkdobGJtRmliR1VnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhaaGNpQjBhR1Z1TzF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2FYUXBJQ1ltSUhSNWNHVnZaaUFvZEdobGJpQTlJR2wwTG5Sb1pXNHBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QjBhR1Z1SURvZ1ptRnNjMlU3WEc1OU8xeHVkbUZ5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdablZ1WTNScGIyNG9ReWw3WEc0Z0lISmxkSFZ5YmlCellXMWxRMjl1YzNSeWRXTjBiM0lvSkZCeWIyMXBjMlVzSUVNcFhHNGdJQ0FnUHlCdVpYY2dVSEp2YldselpVTmhjR0ZpYVd4cGRIa29ReWxjYmlBZ0lDQTZJRzVsZHlCSFpXNWxjbWxqVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlrN1hHNTlPMXh1ZG1GeUlGQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdSMlZ1WlhKcFkxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdablZ1WTNScGIyNG9ReWw3WEc0Z0lIWmhjaUJ5WlhOdmJIWmxMQ0J5WldwbFkzUTdYRzRnSUhSb2FYTXVjSEp2YldselpTQTlJRzVsZHlCREtHWjFibU4wYVc5dUtDUWtjbVZ6YjJ4MlpTd2dKQ1J5WldwbFkzUXBlMXh1SUNBZ0lHbG1LSEpsYzI5c2RtVWdJVDA5SUhWdVpHVm1hVzVsWkNCOGZDQnlaV3BsWTNRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMEpoWkNCUWNtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUp5azdYRzRnSUNBZ2NtVnpiMngyWlNBOUlDUWtjbVZ6YjJ4MlpUdGNiaUFnSUNCeVpXcGxZM1FnSUQwZ0pDUnlaV3BsWTNRN1hHNGdJSDBwTzF4dUlDQjBhR2x6TG5KbGMyOXNkbVVnUFNCaFJuVnVZM1JwYjI0b2NtVnpiMngyWlNrN1hHNGdJSFJvYVhNdWNtVnFaV04wSUNBOUlHRkdkVzVqZEdsdmJpaHlaV3BsWTNRcE8xeHVmVHRjYm5aaGNpQndaWEptYjNKdElEMGdablZ1WTNScGIyNG9aWGhsWXlsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnWlhobFl5Z3BPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUI3WlhKeWIzSTZJR1Y5TzF4dUlDQjlYRzU5TzF4dWRtRnlJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLSEJ5YjIxcGMyVXNJR2x6VW1WcVpXTjBLWHRjYmlBZ2FXWW9jSEp2YldselpTNWZiaWx5WlhSMWNtNDdYRzRnSUhCeWIyMXBjMlV1WDI0Z1BTQjBjblZsTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J3Y205dGFYTmxMbDlqTzF4dUlDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0J3Y205dGFYTmxMbDkyWEc0Z0lDQWdJQ0FzSUc5cklDQWdJRDBnY0hKdmJXbHpaUzVmY3lBOVBTQXhYRzRnSUNBZ0lDQXNJR2tnSUNBZ0lEMGdNRHRjYmlBZ0lDQjJZWElnY25WdUlEMGdablZ1WTNScGIyNG9jbVZoWTNScGIyNHBlMXh1SUNBZ0lDQWdkbUZ5SUdoaGJtUnNaWElnUFNCdmF5QS9JSEpsWVdOMGFXOXVMbTlySURvZ2NtVmhZM1JwYjI0dVptRnBiRnh1SUNBZ0lDQWdJQ0FzSUhKbGMyOXNkbVVnUFNCeVpXRmpkR2x2Ymk1eVpYTnZiSFpsWEc0Z0lDQWdJQ0FnSUN3Z2NtVnFaV04wSUNBOUlISmxZV04wYVc5dUxuSmxhbVZqZEZ4dUlDQWdJQ0FnSUNBc0lHUnZiV0ZwYmlBZ1BTQnlaV0ZqZEdsdmJpNWtiMjFoYVc1Y2JpQWdJQ0FnSUNBZ0xDQnlaWE4xYkhRc0lIUm9aVzQ3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaWhvWVc1a2JHVnlLWHRjYmlBZ0lDQWdJQ0FnSUNCcFppZ2hiMnNwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvY0hKdmJXbHpaUzVmYUNBOVBTQXlLVzl1U0dGdVpHeGxWVzVvWVc1a2JHVmtLSEJ5YjIxcGMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlM1ZmFDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2xtS0doaGJtUnNaWElnUFQwOUlIUnlkV1VwY21WemRXeDBJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaGtiMjFoYVc0cFpHOXRZV2x1TG1WdWRHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQm9ZVzVrYkdWeUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dSdmJXRnBiaWxrYjIxaGFXNHVaWGhwZENncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCcFppaHlaWE4xYkhRZ1BUMDlJSEpsWVdOMGFXOXVMbkJ5YjIxcGMyVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0ZSNWNHVkZjbkp2Y2lnblVISnZiV2x6WlMxamFHRnBiaUJqZVdOc1pTY3BLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb2RHaGxiaUE5SUdselZHaGxibUZpYkdVb2NtVnpkV3gwS1NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdWdUxtTmhiR3dvY21WemRXeDBMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnlaV3BsWTNRb2RtRnNkV1VwTzF4dUlDQWdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnZDJocGJHVW9ZMmhoYVc0dWJHVnVaM1JvSUQ0Z2FTbHlkVzRvWTJoaGFXNWJhU3NyWFNrN0lDOHZJSFpoY21saFlteGxJR3hsYm1kMGFDQXRJR05oYmlkMElIVnpaU0JtYjNKRllXTm9YRzRnSUNBZ2NISnZiV2x6WlM1Zll5QTlJRnRkTzF4dUlDQWdJSEJ5YjIxcGMyVXVYMjRnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaWhwYzFKbGFtVmpkQ0FtSmlBaGNISnZiV2x6WlM1ZmFDbHZibFZ1YUdGdVpHeGxaQ2h3Y205dGFYTmxLVHRjYmlBZ2ZTazdYRzU5TzF4dWRtRnlJRzl1Vlc1b1lXNWtiR1ZrSUQwZ1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJSFJoYzJzdVkyRnNiQ2huYkc5aVlXd3NJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnY0hKdmJXbHpaUzVmZGx4dUlDQWdJQ0FnTENCaFluSjFjSFFzSUdoaGJtUnNaWElzSUdOdmJuTnZiR1U3WEc0Z0lDQWdhV1lvYVhOVmJtaGhibVJzWldRb2NISnZiV2x6WlNrcGUxeHVJQ0FnSUNBZ1lXSnlkWEIwSUQwZ2NHVnlabTl5YlNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQnBaaWhwYzA1dlpHVXBlMXh1SUNBZ0lDQWdJQ0FnSUhCeWIyTmxjM011WlcxcGRDZ25kVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVKeXdnZG1Gc2RXVXNJSEJ5YjIxcGMyVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lvYUdGdVpHeGxjaUE5SUdkc2IySmhiQzV2Ym5WdWFHRnVaR3hsWkhKbGFtVmpkR2x2YmlsN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bGNpaDdjSEp2YldselpUb2djSEp2YldselpTd2djbVZoYzI5dU9pQjJZV3gxWlgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWW9LR052Ym5OdmJHVWdQU0JuYkc5aVlXd3VZMjl1YzI5c1pTa2dKaVlnWTI5dWMyOXNaUzVsY25KdmNpbDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25WVzVvWVc1a2JHVmtJSEJ5YjIxcGMyVWdjbVZxWldOMGFXOXVKeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUM4dklFSnliM2R6WlhKeklITm9iM1ZzWkNCdWIzUWdkSEpwWjJkbGNpQmdjbVZxWldOMGFXOXVTR0Z1Wkd4bFpHQWdaWFpsYm5RZ2FXWWdhWFFnZDJGeklHaGhibVJzWldRZ2FHVnlaU3dnVG05a1pVcFRJQzBnYzJodmRXeGtYRzRnSUNBZ0lDQndjbTl0YVhObExsOW9JRDBnYVhOT2IyUmxJSHg4SUdselZXNW9ZVzVrYkdWa0tIQnliMjFwYzJVcElEOGdNaUE2SURFN1hHNGdJQ0FnZlNCd2NtOXRhWE5sTGw5aElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1LR0ZpY25Wd2RDbDBhSEp2ZHlCaFluSjFjSFF1WlhKeWIzSTdYRzRnSUgwcE8xeHVmVHRjYm5aaGNpQnBjMVZ1YUdGdVpHeGxaQ0E5SUdaMWJtTjBhVzl1S0hCeWIyMXBjMlVwZTF4dUlDQnBaaWh3Y205dGFYTmxMbDlvSUQwOUlERXBjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J3Y205dGFYTmxMbDloSUh4OElIQnliMjFwYzJVdVgyTmNiaUFnSUNBc0lHa2dJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2NtVmhZM1JwYjI0N1hHNGdJSGRvYVd4bEtHTm9ZV2x1TG14bGJtZDBhQ0ErSUdrcGUxeHVJQ0FnSUhKbFlXTjBhVzl1SUQwZ1kyaGhhVzViYVNzclhUdGNiaUFnSUNCcFppaHlaV0ZqZEdsdmJpNW1ZV2xzSUh4OElDRnBjMVZ1YUdGdVpHeGxaQ2h5WldGamRHbHZiaTV3Y205dGFYTmxLU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDBnY21WMGRYSnVJSFJ5ZFdVN1hHNTlPMXh1ZG1GeUlHOXVTR0Z1Wkd4bFZXNW9ZVzVrYkdWa0lEMGdablZ1WTNScGIyNG9jSEp2YldselpTbDdYRzRnSUhSaGMyc3VZMkZzYkNobmJHOWlZV3dzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlHaGhibVJzWlhJN1hHNGdJQ0FnYVdZb2FYTk9iMlJsS1h0Y2JpQWdJQ0FnSUhCeWIyTmxjM011WlcxcGRDZ25jbVZxWldOMGFXOXVTR0Z1Wkd4bFpDY3NJSEJ5YjIxcGMyVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppaG9ZVzVrYkdWeUlEMGdaMnh2WW1Gc0xtOXVjbVZxWldOMGFXOXVhR0Z1Wkd4bFpDbDdYRzRnSUNBZ0lDQm9ZVzVrYkdWeUtIdHdjbTl0YVhObE9pQndjbTl0YVhObExDQnlaV0Z6YjI0NklIQnliMjFwYzJVdVgzWjlLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVHRjYm5aaGNpQWtjbVZxWldOMElEMGdablZ1WTNScGIyNG9kbUZzZFdVcGUxeHVJQ0IyWVhJZ2NISnZiV2x6WlNBOUlIUm9hWE03WEc0Z0lHbG1LSEJ5YjIxcGMyVXVYMlFwY21WMGRYSnVPMXh1SUNCd2NtOXRhWE5sTGw5a0lEMGdkSEoxWlR0Y2JpQWdjSEp2YldselpTQTlJSEJ5YjIxcGMyVXVYM2NnZkh3Z2NISnZiV2x6WlRzZ0x5OGdkVzUzY21Gd1hHNGdJSEJ5YjIxcGMyVXVYM1lnUFNCMllXeDFaVHRjYmlBZ2NISnZiV2x6WlM1ZmN5QTlJREk3WEc0Z0lHbG1LQ0Z3Y205dGFYTmxMbDloS1hCeWIyMXBjMlV1WDJFZ1BTQndjbTl0YVhObExsOWpMbk5zYVdObEtDazdYRzRnSUc1dmRHbG1lU2h3Y205dGFYTmxMQ0IwY25WbEtUdGNibjA3WEc1MllYSWdKSEpsYzI5c2RtVWdQU0JtZFc1amRHbHZiaWgyWVd4MVpTbDdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdkR2hwYzF4dUlDQWdJQ3dnZEdobGJqdGNiaUFnYVdZb2NISnZiV2x6WlM1ZlpDbHlaWFIxY200N1hHNGdJSEJ5YjIxcGMyVXVYMlFnUFNCMGNuVmxPMXh1SUNCd2NtOXRhWE5sSUQwZ2NISnZiV2x6WlM1ZmR5QjhmQ0J3Y205dGFYTmxPeUF2THlCMWJuZHlZWEJjYmlBZ2RISjVJSHRjYmlBZ0lDQnBaaWh3Y205dGFYTmxJRDA5UFNCMllXeDFaU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0pRY205dGFYTmxJR05oYmlkMElHSmxJSEpsYzI5c2RtVmtJR2wwYzJWc1psd2lLVHRjYmlBZ0lDQnBaaWgwYUdWdUlEMGdhWE5VYUdWdVlXSnNaU2gyWVd4MVpTa3BlMXh1SUNBZ0lDQWdiV2xqY205MFlYTnJLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQjNjbUZ3Y0dWeUlEMGdlMTkzT2lCd2NtOXRhWE5sTENCZlpEb2dabUZzYzJWOU95QXZMeUIzY21Gd1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaGxiaTVqWVd4c0tIWmhiSFZsTENCamRIZ29KSEpsYzI5c2RtVXNJSGR5WVhCd1pYSXNJREVwTENCamRIZ29KSEpsYW1WamRDd2dkM0poY0hCbGNpd2dNU2twTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ1J5WldwbFkzUXVZMkZzYkNoM2NtRndjR1Z5TENCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIQnliMjFwYzJVdVgzWWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lIQnliMjFwYzJVdVgzTWdQU0F4TzF4dUlDQWdJQ0FnYm05MGFXWjVLSEJ5YjIxcGMyVXNJR1poYkhObEtUdGNiaUFnSUNCOVhHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdKSEpsYW1WamRDNWpZV3hzS0h0ZmR6b2djSEp2YldselpTd2dYMlE2SUdaaGJITmxmU3dnWlNrN0lDOHZJSGR5WVhCY2JpQWdmVnh1ZlR0Y2JseHVMeThnWTI5dWMzUnlkV04wYjNJZ2NHOXNlV1pwYkd4Y2JtbG1LQ0ZWVTBWZlRrRlVTVlpGS1h0Y2JpQWdMeThnTWpVdU5DNHpMakVnVUhKdmJXbHpaU2hsZUdWamRYUnZjaWxjYmlBZ0pGQnliMjFwYzJVZ1BTQm1kVzVqZEdsdmJpQlFjbTl0YVhObEtHVjRaV04xZEc5eUtYdGNiaUFnSUNCaGJrbHVjM1JoYm1ObEtIUm9hWE1zSUNSUWNtOXRhWE5sTENCUVVrOU5TVk5GTENBblgyZ25LVHRjYmlBZ0lDQmhSblZ1WTNScGIyNG9aWGhsWTNWMGIzSXBPMXh1SUNBZ0lFbHVkR1Z5Ym1Gc0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1Y0WldOMWRHOXlLR04wZUNna2NtVnpiMngyWlN3Z2RHaHBjeXdnTVNrc0lHTjBlQ2drY21WcVpXTjBMQ0IwYUdsekxDQXhLU2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxjbklwZTF4dUlDQWdJQ0FnSkhKbGFtVmpkQzVqWVd4c0tIUm9hWE1zSUdWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dUlDQkpiblJsY201aGJDQTlJR1oxYm1OMGFXOXVJRkJ5YjIxcGMyVW9aWGhsWTNWMGIzSXBlMXh1SUNBZ0lIUm9hWE11WDJNZ1BTQmJYVHNnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnWVhkaGFYUnBibWNnY21WaFkzUnBiMjV6WEc0Z0lDQWdkR2hwY3k1ZllTQTlJSFZ1WkdWbWFXNWxaRHNnSUNBZ0lDQXZMeUE4TFNCamFHVmphMlZrSUdsdUlHbHpWVzVvWVc1a2JHVmtJSEpsWVdOMGFXOXVjMXh1SUNBZ0lIUm9hWE11WDNNZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnYzNSaGRHVmNiaUFnSUNCMGFHbHpMbDlrSUQwZ1ptRnNjMlU3SUNBZ0lDQWdJQ0FnSUM4dklEd3RJR1J2Ym1WY2JpQWdJQ0IwYUdsekxsOTJJRDBnZFc1a1pXWnBibVZrT3lBZ0lDQWdJQzh2SUR3dElIWmhiSFZsWEc0Z0lDQWdkR2hwY3k1ZmFDQTlJREE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCeVpXcGxZM1JwYjI0Z2MzUmhkR1VzSURBZ0xTQmtaV1poZFd4MExDQXhJQzBnYUdGdVpHeGxaQ3dnTWlBdElIVnVhR0Z1Wkd4bFpGeHVJQ0FnSUhSb2FYTXVYMjRnUFNCbVlXeHpaVHNnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdibTkwYVdaNVhHNGdJSDA3WEc0Z0lFbHVkR1Z5Ym1Gc0xuQnliM1J2ZEhsd1pTQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsTFdGc2JDY3BLQ1JRY205dGFYTmxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQzh2SURJMUxqUXVOUzR6SUZCeWIyMXBjMlV1Y0hKdmRHOTBlWEJsTG5Sb1pXNG9iMjVHZFd4bWFXeHNaV1FzSUc5dVVtVnFaV04wWldRcFhHNGdJQ0FnZEdobGJqb2dablZ1WTNScGIyNGdkR2hsYmlodmJrWjFiR1pwYkd4bFpDd2diMjVTWldwbFkzUmxaQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2NtVmhZM1JwYjI0Z0lDQWdQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb2RHaHBjeXdnSkZCeWIyMXBjMlVwS1R0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG05cklDQWdJQ0E5SUhSNWNHVnZaaUJ2YmtaMWJHWnBiR3hsWkNBOVBTQW5ablZ1WTNScGIyNG5JRDhnYjI1R2RXeG1hV3hzWldRZ09pQjBjblZsTzF4dUlDQWdJQ0FnY21WaFkzUnBiMjR1Wm1GcGJDQWdJRDBnZEhsd1pXOW1JRzl1VW1WcVpXTjBaV1FnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJ2YmxKbGFtVmpkR1ZrTzF4dUlDQWdJQ0FnY21WaFkzUnBiMjR1Wkc5dFlXbHVJRDBnYVhOT2IyUmxJRDhnY0hKdlkyVnpjeTVrYjIxaGFXNGdPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0IwYUdsekxsOWpMbkIxYzJnb2NtVmhZM1JwYjI0cE8xeHVJQ0FnSUNBZ2FXWW9kR2hwY3k1ZllTbDBhR2x6TGw5aExuQjFjMmdvY21WaFkzUnBiMjRwTzF4dUlDQWdJQ0FnYVdZb2RHaHBjeTVmY3lsdWIzUnBabmtvZEdocGN5d2dabUZzYzJVcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbFlXTjBhVzl1TG5CeWIyMXBjMlU3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUF5TlM0MExqVXVNU0JRY205dGFYTmxMbkJ5YjNSdmRIbHdaUzVqWVhSamFDaHZibEpsYW1WamRHVmtLVnh1SUNBZ0lDZGpZWFJqYUNjNklHWjFibU4wYVc5dUtHOXVVbVZxWldOMFpXUXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaDFibVJsWm1sdVpXUXNJRzl1VW1WcVpXTjBaV1FwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzRnSUZCeWIyMXBjMlZEWVhCaFltbHNhWFI1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMllYSWdjSEp2YldselpTQWdQU0J1WlhjZ1NXNTBaWEp1WVd3N1hHNGdJQ0FnZEdocGN5NXdjbTl0YVhObElEMGdjSEp2YldselpUdGNiaUFnSUNCMGFHbHpMbkpsYzI5c2RtVWdQU0JqZEhnb0pISmxjMjlzZG1Vc0lIQnliMjFwYzJVc0lERXBPMXh1SUNBZ0lIUm9hWE11Y21WcVpXTjBJQ0E5SUdOMGVDZ2tjbVZxWldOMExDQndjbTl0YVhObExDQXhLVHRjYmlBZ2ZUdGNibjFjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExsY2dLeUFrWlhod2IzSjBMa1lnS2lBaFZWTkZYMDVCVkVsV1JTd2dlMUJ5YjIxcGMyVTZJQ1JRY205dGFYTmxmU2s3WEc1eVpYRjFhWEpsS0NjdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BLQ1JRY205dGFYTmxMQ0JRVWs5TlNWTkZLVHRjYm5KbGNYVnBjbVVvSnk0dlgzTmxkQzF6Y0dWamFXVnpKeWtvVUZKUFRVbFRSU2s3WEc1WGNtRndjR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcFcxQlNUMDFKVTBWZE8xeHVYRzR2THlCemRHRjBhV056WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0ZWVTBWZlRrRlVTVlpGTENCUVVrOU5TVk5GTENCN1hHNGdJQzh2SURJMUxqUXVOQzQxSUZCeWIyMXBjMlV1Y21WcVpXTjBLSElwWEc0Z0lISmxhbVZqZERvZ1puVnVZM1JwYjI0Z2NtVnFaV04wS0hJcGUxeHVJQ0FnSUhaaGNpQmpZWEJoWW1sc2FYUjVJRDBnYm1WM1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrb2RHaHBjeWxjYmlBZ0lDQWdJQ3dnSkNSeVpXcGxZM1FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZxWldOME8xeHVJQ0FnSUNRa2NtVnFaV04wS0hJcE8xeHVJQ0FnSUhKbGRIVnliaUJqWVhCaFltbHNhWFI1TG5CeWIyMXBjMlU3WEc0Z0lIMWNibjBwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFvVEVsQ1VrRlNXU0I4ZkNBaFZWTkZYMDVCVkVsV1JTa3NJRkJTVDAxSlUwVXNJSHRjYmlBZ0x5OGdNalV1TkM0MExqWWdVSEp2YldselpTNXlaWE52YkhabEtIZ3BYRzRnSUhKbGMyOXNkbVU2SUdaMWJtTjBhVzl1SUhKbGMyOXNkbVVvZUNsN1hHNGdJQ0FnTHk4Z2FXNXpkR0Z1WTJWdlppQnBibk4wWldGa0lHOW1JR2x1ZEdWeWJtRnNJSE5zYjNRZ1kyaGxZMnNnWW1WallYVnpaU0IzWlNCemFHOTFiR1FnWm1sNElHbDBJSGRwZEdodmRYUWdjbVZ3YkdGalpXMWxiblFnYm1GMGFYWmxJRkJ5YjIxcGMyVWdZMjl5WlZ4dUlDQWdJR2xtS0hnZ2FXNXpkR0Z1WTJWdlppQWtVSEp2YldselpTQW1KaUJ6WVcxbFEyOXVjM1J5ZFdOMGIzSW9lQzVqYjI1emRISjFZM1J2Y2l3Z2RHaHBjeWtwY21WMGRYSnVJSGc3WEc0Z0lDQWdkbUZ5SUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2gwYUdsektWeHVJQ0FnSUNBZ0xDQWtKSEpsYzI5c2RtVWdJRDBnWTJGd1lXSnBiR2wwZVM1eVpYTnZiSFpsTzF4dUlDQWdJQ1FrY21WemIyeDJaU2g0S1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMkZ3WVdKcGJHbDBlUzV3Y205dGFYTmxPMXh1SUNCOVhHNTlLVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJU2hWVTBWZlRrRlVTVlpGSUNZbUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFpHVjBaV04wSnlrb1puVnVZM1JwYjI0b2FYUmxjaWw3WEc0Z0lDUlFjbTl0YVhObExtRnNiQ2hwZEdWeUtWc25ZMkYwWTJnblhTaGxiWEIwZVNrN1hHNTlLU2tzSUZCU1QwMUpVMFVzSUh0Y2JpQWdMeThnTWpVdU5DNDBMakVnVUhKdmJXbHpaUzVoYkd3b2FYUmxjbUZpYkdVcFhHNGdJR0ZzYkRvZ1puVnVZM1JwYjI0Z1lXeHNLR2wwWlhKaFlteGxLWHRjYmlBZ0lDQjJZWElnUXlBZ0lDQWdJQ0FnSUNBOUlIUm9hWE5jYmlBZ0lDQWdJQ3dnWTJGd1lXSnBiR2wwZVNBOUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLRU1wWEc0Z0lDQWdJQ0FzSUhKbGMyOXNkbVVnSUNBZ1BTQmpZWEJoWW1sc2FYUjVMbkpsYzI5c2RtVmNiaUFnSUNBZ0lDd2djbVZxWldOMElDQWdJQ0E5SUdOaGNHRmlhV3hwZEhrdWNtVnFaV04wTzF4dUlDQWdJSFpoY2lCaFluSjFjSFFnUFNCd1pYSm1iM0p0S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdWeklDQWdJRDBnVzExY2JpQWdJQ0FnSUNBZ0xDQnBibVJsZUNBZ0lDQWdQU0F3WEc0Z0lDQWdJQ0FnSUN3Z2NtVnRZV2x1YVc1bklEMGdNVHRjYmlBZ0lDQWdJR1p2Y2s5bUtHbDBaWEpoWW14bExDQm1ZV3h6WlN3Z1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUFrYVc1a1pYZ2dJQ0FnSUNBZ0lEMGdhVzVrWlhncksxeHVJQ0FnSUNBZ0lDQWdJQ3dnWVd4eVpXRmtlVU5oYkd4bFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZV3gxWlhNdWNIVnphQ2gxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnSUNCeVpXMWhhVzVwYm1jckt6dGNiaUFnSUNBZ0lDQWdReTV5WlhOdmJIWmxLSEJ5YjIxcGMyVXBMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lHbG1LR0ZzY21WaFpIbERZV3hzWldRcGNtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lHRnNjbVZoWkhsRFlXeHNaV1FnSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaWE5iSkdsdVpHVjRYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUMwdGNtVnRZV2x1YVc1bklIeDhJSEpsYzI5c2RtVW9kbUZzZFdWektUdGNiaUFnSUNBZ0lDQWdmU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnTFMxeVpXMWhhVzVwYm1jZ2ZId2djbVZ6YjJ4MlpTaDJZV3gxWlhNcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdsbUtHRmljblZ3ZENseVpXcGxZM1FvWVdKeWRYQjBMbVZ5Y205eUtUdGNiaUFnSUNCeVpYUjFjbTRnWTJGd1lXSnBiR2wwZVM1d2NtOXRhWE5sTzF4dUlDQjlMRnh1SUNBdkx5QXlOUzQwTGpRdU5DQlFjbTl0YVhObExuSmhZMlVvYVhSbGNtRmliR1VwWEc0Z0lISmhZMlU2SUdaMWJtTjBhVzl1SUhKaFkyVW9hWFJsY21GaWJHVXBlMXh1SUNBZ0lIWmhjaUJESUNBZ0lDQWdJQ0FnSUQwZ2RHaHBjMXh1SUNBZ0lDQWdMQ0JqWVhCaFltbHNhWFI1SUQwZ2JtVjNVSEp2YldselpVTmhjR0ZpYVd4cGRIa29ReWxjYmlBZ0lDQWdJQ3dnY21WcVpXTjBJQ0FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZxWldOME8xeHVJQ0FnSUhaaGNpQmhZbkoxY0hRZ1BTQndaWEptYjNKdEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQm1iM0pQWmlocGRHVnlZV0pzWlN3Z1ptRnNjMlVzSUdaMWJtTjBhVzl1S0hCeWIyMXBjMlVwZTF4dUlDQWdJQ0FnSUNCRExuSmxjMjlzZG1Vb2NISnZiV2x6WlNrdWRHaGxiaWhqWVhCaFltbHNhWFI1TG5KbGMyOXNkbVVzSUhKbGFtVmpkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmloaFluSjFjSFFwY21WcVpXTjBLR0ZpY25Wd2RDNWxjbkp2Y2lrN1hHNGdJQ0FnY21WMGRYSnVJR05oY0dGaWFXeHBkSGt1Y0hKdmJXbHpaVHRjYmlBZ2ZWeHVmU2s3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV3Y205dGFYTmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TURSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTkNBMUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdSVU5OUVZOamNtbHdkQ0EySUhONWJXSnZiSE1nYzJocGJWeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1JFVlRRMUpKVUZSUFVsTWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lISmxaR1ZtYVc1bElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LVnh1SUNBc0lFMUZWRUVnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVNjcExrdEZXVnh1SUNBc0lDUm1ZV2xzY3lBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUhOb1lYSmxaQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlsY2JpQWdMQ0IxYVdRZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BYRzRnSUN3Z2QydHpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1Z4dUlDQXNJSGRyYzBWNGRDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekxXVjRkQ2NwWEc0Z0lDd2dkMnR6UkdWbWFXNWxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpHVm1hVzVsSnlsY2JpQWdMQ0JyWlhsUFppQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ0bGVXOW1KeWxjYmlBZ0xDQmxiblZ0UzJWNWN5QWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdGEyVjVjeWNwWEc0Z0lDd2dhWE5CY25KaGVTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxaGNuSmhlU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UWNtbHRhWFJwZG1VZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVnh1SUNBc0lHTnlaV0YwWlVSbGMyTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcFhHNGdJQ3dnWDJOeVpXRjBaU0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWxjYmlBZ0xDQm5UMUJPUlhoMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J1TFdWNGRDY3BYRzRnSUN3Z0pFZFBVRVFnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDd2dKRVJRSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJQ1JyWlhseklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV3RsZVhNbktWeHVJQ0FzSUdkUFVFUWdJQ0FnSUNBZ0lDQWdJRDBnSkVkUFVFUXVabHh1SUNBc0lHUlFJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0pFUlFMbVpjYmlBZ0xDQm5UMUJPSUNBZ0lDQWdJQ0FnSUNBOUlHZFBVRTVGZUhRdVpseHVJQ0FzSUNSVGVXMWliMndnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMbE41YldKdmJGeHVJQ0FzSUNSS1UwOU9JQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMa3BUVDA1Y2JpQWdMQ0JmYzNSeWFXNW5hV1o1SUNBZ0lDQTlJQ1JLVTA5T0lDWW1JQ1JLVTA5T0xuTjBjbWx1WjJsbWVWeHVJQ0FzSUZCU1QxUlBWRmxRUlNBZ0lDQWdJRDBnSjNCeWIzUnZkSGx3WlNkY2JpQWdMQ0JJU1VSRVJVNGdJQ0FnSUNBZ0lDQTlJSGRyY3lnblgyaHBaR1JsYmljcFhHNGdJQ3dnVkU5ZlVGSkpUVWxVU1ZaRklDQWdQU0IzYTNNb0ozUnZVSEpwYldsMGFYWmxKeWxjYmlBZ0xDQnBjMFZ1ZFcwZ0lDQWdJQ0FnSUNBOUlIdDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsWEc0Z0lDd2dVM2x0WW05c1VtVm5hWE4wY25rZ1BTQnphR0Z5WldRb0ozTjViV0p2YkMxeVpXZHBjM1J5ZVNjcFhHNGdJQ3dnUVd4c1UzbHRZbTlzY3lBZ0lDQWdQU0J6YUdGeVpXUW9KM041YldKdmJITW5LVnh1SUNBc0lFOVFVM2x0WW05c2N5QWdJQ0FnSUQwZ2MyaGhjbVZrS0NkdmNDMXplVzFpYjJ4ekp5bGNiaUFnTENCUFltcGxZM1JRY205MGJ5QWdJQ0E5SUU5aWFtVmpkRnRRVWs5VVQxUlpVRVZkWEc0Z0lDd2dWVk5GWDA1QlZFbFdSU0FnSUNBZ1BTQjBlWEJsYjJZZ0pGTjViV0p2YkNBOVBTQW5ablZ1WTNScGIyNG5YRzRnSUN3Z1VVOWlhbVZqZENBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VVU5aWFtVmpkRHRjYmk4dklFUnZiaWQwSUhWelpTQnpaWFIwWlhKeklHbHVJRkYwSUZOamNtbHdkQ3dnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNwc2IybHliMk5yTDJOdmNtVXRhbk12YVhOemRXVnpMekUzTTF4dWRtRnlJSE5sZEhSbGNpQTlJQ0ZSVDJKcVpXTjBJSHg4SUNGUlQySnFaV04wVzFCU1QxUlBWRmxRUlYwZ2ZId2dJVkZQWW1wbFkzUmJVRkpQVkU5VVdWQkZYUzVtYVc1a1EyaHBiR1E3WEc1Y2JpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdmJHUWdRVzVrY205cFpDd2dhSFIwY0hNNkx5OWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOTJPQzlwYzNOMVpYTXZaR1YwWVdsc1AybGtQVFk0TjF4dWRtRnlJSE5sZEZONWJXSnZiRVJsYzJNZ1BTQkVSVk5EVWtsUVZFOVNVeUFtSmlBa1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlGOWpjbVZoZEdVb1pGQW9lMzBzSUNkaEp5d2dlMXh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUdSUUtIUm9hWE1zSUNkaEp5d2dlM1poYkhWbE9pQTNmU2t1WVRzZ2ZWeHVJQ0I5S1NrdVlTQWhQU0EzTzF4dWZTa2dQeUJtZFc1amRHbHZiaWhwZEN3Z2EyVjVMQ0JFS1h0Y2JpQWdkbUZ5SUhCeWIzUnZSR1Z6WXlBOUlHZFBVRVFvVDJKcVpXTjBVSEp2ZEc4c0lHdGxlU2s3WEc0Z0lHbG1LSEJ5YjNSdlJHVnpZeWxrWld4bGRHVWdUMkpxWldOMFVISnZkRzliYTJWNVhUdGNiaUFnWkZBb2FYUXNJR3RsZVN3Z1JDazdYRzRnSUdsbUtIQnliM1J2UkdWell5QW1KaUJwZENBaFBUMGdUMkpxWldOMFVISnZkRzhwWkZBb1QySnFaV04wVUhKdmRHOHNJR3RsZVN3Z2NISnZkRzlFWlhOaktUdGNibjBnT2lCa1VEdGNibHh1ZG1GeUlIZHlZWEFnUFNCbWRXNWpkR2x2YmloMFlXY3BlMXh1SUNCMllYSWdjM2x0SUQwZ1FXeHNVM2x0WW05c2MxdDBZV2RkSUQwZ1gyTnlaV0YwWlNna1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwcE8xeHVJQ0J6ZVcwdVgyc2dQU0IwWVdjN1hHNGdJSEpsZEhWeWJpQnplVzA3WEc1OU8xeHVYRzUyWVhJZ2FYTlRlVzFpYjJ3Z1BTQlZVMFZmVGtGVVNWWkZJQ1ltSUhSNWNHVnZaaUFrVTNsdFltOXNMbWwwWlhKaGRHOXlJRDA5SUNkemVXMWliMnduSUQ4Z1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR2wwSUQwOUlDZHplVzFpYjJ3bk8xeHVmU0E2SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUdsdWMzUmhibU5sYjJZZ0pGTjViV0p2YkR0Y2JuMDdYRzVjYm5aaGNpQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1TENCRUtYdGNiaUFnYVdZb2FYUWdQVDA5SUU5aWFtVmpkRkJ5YjNSdktTUmtaV1pwYm1WUWNtOXdaWEowZVNoUFVGTjViV0p2YkhNc0lHdGxlU3dnUkNrN1hHNGdJR0Z1VDJKcVpXTjBLR2wwS1R0Y2JpQWdhMlY1SUQwZ2RHOVFjbWx0YVhScGRtVW9hMlY1TENCMGNuVmxLVHRjYmlBZ1lXNVBZbXBsWTNRb1JDazdYRzRnSUdsbUtHaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BLWHRjYmlBZ0lDQnBaaWdoUkM1bGJuVnRaWEpoWW14bEtYdGNiaUFnSUNBZ0lHbG1LQ0ZvWVhNb2FYUXNJRWhKUkVSRlRpa3BaRkFvYVhRc0lFaEpSRVJGVGl3Z1kzSmxZWFJsUkdWell5Z3hMQ0I3ZlNrcE8xeHVJQ0FnSUNBZ2FYUmJTRWxFUkVWT1hWdHJaWGxkSUQwZ2RISjFaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWW9hR0Z6S0dsMExDQklTVVJFUlU0cElDWW1JR2wwVzBoSlJFUkZUbDFiYTJWNVhTbHBkRnRJU1VSRVJVNWRXMnRsZVYwZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUVRZ1BTQmZZM0psWVhSbEtFUXNJSHRsYm5WdFpYSmhZbXhsT2lCamNtVmhkR1ZFWlhOaktEQXNJR1poYkhObEtYMHBPMXh1SUNBZ0lIMGdjbVYwZFhKdUlITmxkRk41YldKdmJFUmxjMk1vYVhRc0lHdGxlU3dnUkNrN1hHNGdJSDBnY21WMGRYSnVJR1JRS0dsMExDQnJaWGtzSUVRcE8xeHVmVHRjYm5aaGNpQWtaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5QTlJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9hWFFzSUZBcGUxeHVJQ0JoYms5aWFtVmpkQ2hwZENrN1hHNGdJSFpoY2lCclpYbHpJRDBnWlc1MWJVdGxlWE1vVUNBOUlIUnZTVTlpYW1WamRDaFFLU2xjYmlBZ0lDQXNJR2tnSUNBZ1BTQXdYRzRnSUNBZ0xDQnNJRDBnYTJWNWN5NXNaVzVuZEdoY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9iQ0ErSUdrcEpHUmxabWx1WlZCeWIzQmxjblI1S0dsMExDQnJaWGtnUFNCclpYbHpXMmtySzEwc0lGQmJhMlY1WFNrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNTJZWElnSkdOeVpXRjBaU0E5SUdaMWJtTjBhVzl1SUdOeVpXRjBaU2hwZEN3Z1VDbDdYRzRnSUhKbGRIVnliaUJRSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJmWTNKbFlYUmxLR2wwS1NBNklDUmtaV1pwYm1WUWNtOXdaWEowYVdWektGOWpjbVZoZEdVb2FYUXBMQ0JRS1R0Y2JuMDdYRzUyWVhJZ0pIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxJRDBnWm5WdVkzUnBiMjRnY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb2EyVjVLWHRjYmlBZ2RtRnlJRVVnUFNCcGMwVnVkVzB1WTJGc2JDaDBhR2x6TENCclpYa2dQU0IwYjFCeWFXMXBkR2wyWlNoclpYa3NJSFJ5ZFdVcEtUdGNiaUFnYVdZb2RHaHBjeUE5UFQwZ1QySnFaV04wVUhKdmRHOGdKaVlnYUdGektFRnNiRk41YldKdmJITXNJR3RsZVNrZ0ppWWdJV2hoY3loUFVGTjViV0p2YkhNc0lHdGxlU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0J5WlhSMWNtNGdSU0I4ZkNBaGFHRnpLSFJvYVhNc0lHdGxlU2tnZkh3Z0lXaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BJSHg4SUdoaGN5aDBhR2x6TENCSVNVUkVSVTRwSUNZbUlIUm9hWE5iU0VsRVJFVk9YVnRyWlhsZElEOGdSU0E2SUhSeWRXVTdYRzU5TzF4dWRtRnlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTbDdYRzRnSUdsMElDQTlJSFJ2U1U5aWFtVmpkQ2hwZENrN1hHNGdJR3RsZVNBOUlIUnZVSEpwYldsMGFYWmxLR3RsZVN3Z2RISjFaU2s3WEc0Z0lHbG1LR2wwSUQwOVBTQlBZbXBsWTNSUWNtOTBieUFtSmlCb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQW1KaUFoYUdGektFOVFVM2x0WW05c2N5d2dhMlY1S1NseVpYUjFjbTQ3WEc0Z0lIWmhjaUJFSUQwZ1owOVFSQ2hwZEN3Z2EyVjVLVHRjYmlBZ2FXWW9SQ0FtSmlCb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQW1KaUFoS0doaGN5aHBkQ3dnU0VsRVJFVk9LU0FtSmlCcGRGdElTVVJFUlU1ZFcydGxlVjBwS1VRdVpXNTFiV1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJSEpsZEhWeWJpQkVPMXh1ZlR0Y2JuWmhjaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lBOUlHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9hWFFwZTF4dUlDQjJZWElnYm1GdFpYTWdJRDBnWjA5UVRpaDBiMGxQWW1wbFkzUW9hWFFwS1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnVzExY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbDdYRzRnSUNBZ2FXWW9JV2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTQW1KaUJyWlhrZ0lUMGdTRWxFUkVWT0lDWW1JR3RsZVNBaFBTQk5SVlJCS1hKbGMzVnNkQzV3ZFhOb0tHdGxlU2s3WEc0Z0lIMGdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMDdYRzUyWVhJZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeUE5SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aHBkQ2w3WEc0Z0lIWmhjaUJKVTE5UFVDQWdQU0JwZENBOVBUMGdUMkpxWldOMFVISnZkRzljYmlBZ0lDQXNJRzVoYldWeklDQTlJR2RQVUU0b1NWTmZUMUFnUHlCUFVGTjViV0p2YkhNZ09pQjBiMGxQWW1wbFkzUW9hWFFwS1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnVzExY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbDdYRzRnSUNBZ2FXWW9hR0Z6S0VGc2JGTjViV0p2YkhNc0lHdGxlU0E5SUc1aGJXVnpXMmtySzEwcElDWW1JQ2hKVTE5UFVDQS9JR2hoY3loUFltcGxZM1JRY205MGJ5d2dhMlY1S1NBNklIUnlkV1VwS1hKbGMzVnNkQzV3ZFhOb0tFRnNiRk41YldKdmJITmJhMlY1WFNrN1hHNGdJSDBnY21WMGRYSnVJSEpsYzNWc2REdGNibjA3WEc1Y2JpOHZJREU1TGpRdU1TNHhJRk41YldKdmJDaGJaR1Z6WTNKcGNIUnBiMjVkS1Z4dWFXWW9JVlZUUlY5T1FWUkpWa1VwZTF4dUlDQWtVM2x0WW05c0lEMGdablZ1WTNScGIyNGdVM2x0WW05c0tDbDdYRzRnSUNBZ2FXWW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlDUlRlVzFpYjJ3cGRHaHliM2NnVkhsd1pVVnljbTl5S0NkVGVXMWliMndnYVhNZ2JtOTBJR0VnWTI5dWMzUnlkV04wYjNJaEp5azdYRzRnSUNBZ2RtRnlJSFJoWnlBOUlIVnBaQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTUNBL0lHRnlaM1Z0Wlc1MGMxc3dYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZG1GeUlDUnpaWFFnUFNCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0JwWmloMGFHbHpJRDA5UFNCUFltcGxZM1JRY205MGJ5a2tjMlYwTG1OaGJHd29UMUJUZVcxaWIyeHpMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQnBaaWhvWVhNb2RHaHBjeXdnU0VsRVJFVk9LU0FtSmlCb1lYTW9kR2hwYzF0SVNVUkVSVTVkTENCMFlXY3BLWFJvYVhOYlNFbEVSRVZPWFZ0MFlXZGRJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpaWFJUZVcxaWIyeEVaWE5qS0hSb2FYTXNJSFJoWnl3Z1kzSmxZWFJsUkdWell5Z3hMQ0IyWVd4MVpTa3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9SRVZUUTFKSlVGUlBVbE1nSmlZZ2MyVjBkR1Z5S1hObGRGTjViV0p2YkVSbGMyTW9UMkpxWldOMFVISnZkRzhzSUhSaFp5d2dlMk52Ym1acFozVnlZV0pzWlRvZ2RISjFaU3dnYzJWME9pQWtjMlYwZlNrN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhBb2RHRm5LVHRjYmlBZ2ZUdGNiaUFnY21Wa1pXWnBibVVvSkZONWJXSnZiRnRRVWs5VVQxUlpVRVZkTENBbmRHOVRkSEpwYm1jbkxDQm1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlyTzF4dUlDQjlLVHRjYmx4dUlDQWtSMDlRUkM1bUlEMGdKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqdGNiaUFnSkVSUUxtWWdJQ0E5SUNSa1pXWnBibVZRY205d1pYSjBlVHRjYmlBZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzRuS1M1bUlEMGdaMDlRVGtWNGRDNW1JRDBnSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF3YVdVbktTNW1JQ0E5SUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pUdGNiaUFnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNITW5LUzVtSUQwZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenRjYmx4dUlDQnBaaWhFUlZORFVrbFFWRTlTVXlBbUppQWhjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwS1h0Y2JpQWdJQ0J5WldSbFptbHVaU2hQWW1wbFkzUlFjbTkwYnl3Z0ozQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxKeXdnSkhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExDQjBjblZsS1R0Y2JpQWdmVnh1WEc0Z0lIZHJjMFY0ZEM1bUlEMGdablZ1WTNScGIyNG9ibUZ0WlNsN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhBb2QydHpLRzVoYldVcEtUdGNiaUFnZlZ4dWZWeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1VnlBcklDUmxlSEJ2Y25RdVJpQXFJQ0ZWVTBWZlRrRlVTVlpGTENCN1UzbHRZbTlzT2lBa1UzbHRZbTlzZlNrN1hHNWNibVp2Y2loMllYSWdjM2x0WW05c2N5QTlJQ2hjYmlBZ0x5OGdNVGt1TkM0eUxqSXNJREU1TGpRdU1pNHpMQ0F4T1M0MExqSXVOQ3dnTVRrdU5DNHlMallzSURFNUxqUXVNaTQ0TENBeE9TNDBMakl1T1N3Z01Ua3VOQzR5TGpFd0xDQXhPUzQwTGpJdU1URXNJREU1TGpRdU1pNHhNaXdnTVRrdU5DNHlMakV6TENBeE9TNDBMakl1TVRSY2JpQWdKMmhoYzBsdWMzUmhibU5sTEdselEyOXVZMkYwVTNCeVpXRmtZV0pzWlN4cGRHVnlZWFJ2Y2l4dFlYUmphQ3h5WlhCc1lXTmxMSE5sWVhKamFDeHpjR1ZqYVdWekxITndiR2wwTEhSdlVISnBiV2wwYVhabExIUnZVM1J5YVc1blZHRm5MSFZ1YzJOdmNHRmliR1Z6SjF4dUtTNXpjR3hwZENnbkxDY3BMQ0JwSUQwZ01Ec2djM2x0WW05c2N5NXNaVzVuZEdnZ1BpQnBPeUFwZDJ0ektITjViV0p2YkhOYmFTc3JYU2s3WEc1Y2JtWnZjaWgyWVhJZ2MzbHRZbTlzY3lBOUlDUnJaWGx6S0hkcmN5NXpkRzl5WlNrc0lHa2dQU0F3T3lCemVXMWliMnh6TG14bGJtZDBhQ0ErSUdrN0lDbDNhM05FWldacGJtVW9jM2x0WW05c2MxdHBLeXRkS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaFZWTkZYMDVCVkVsV1JTd2dKMU41YldKdmJDY3NJSHRjYmlBZ0x5OGdNVGt1TkM0eUxqRWdVM2x0WW05c0xtWnZjaWhyWlhrcFhHNGdJQ2RtYjNJbk9pQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQm9ZWE1vVTNsdFltOXNVbVZuYVhOMGNua3NJR3RsZVNBclBTQW5KeWxjYmlBZ0lDQWdJRDhnVTNsdFltOXNVbVZuYVhOMGNubGJhMlY1WFZ4dUlDQWdJQ0FnT2lCVGVXMWliMnhTWldkcGMzUnllVnRyWlhsZElEMGdKRk41YldKdmJDaHJaWGtwTzF4dUlDQjlMRnh1SUNBdkx5QXhPUzQwTGpJdU5TQlRlVzFpYjJ3dWEyVjVSbTl5S0hONWJTbGNiaUFnYTJWNVJtOXlPaUJtZFc1amRHbHZiaUJyWlhsR2IzSW9hMlY1S1h0Y2JpQWdJQ0JwWmlocGMxTjViV0p2YkNoclpYa3BLWEpsZEhWeWJpQnJaWGxQWmloVGVXMWliMnhTWldkcGMzUnllU3dnYTJWNUtUdGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvYTJWNUlDc2dKeUJwY3lCdWIzUWdZU0J6ZVcxaWIyd2hKeWs3WEc0Z0lIMHNYRzRnSUhWelpWTmxkSFJsY2pvZ1puVnVZM1JwYjI0b0tYc2djMlYwZEdWeUlEMGdkSEoxWlRzZ2ZTeGNiaUFnZFhObFUybHRjR3hsT2lCbWRXNWpkR2x2YmlncGV5QnpaWFIwWlhJZ1BTQm1ZV3h6WlRzZ2ZWeHVmU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUM4dklERTVMakV1TWk0eUlFOWlhbVZqZEM1amNtVmhkR1VvVHlCYkxDQlFjbTl3WlhKMGFXVnpYU2xjYmlBZ1kzSmxZWFJsT2lBa1kzSmxZWFJsTEZ4dUlDQXZMeUF4T1M0eExqSXVOQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lsY2JpQWdaR1ZtYVc1bFVISnZjR1Z5ZEhrNklDUmtaV1pwYm1WUWNtOXdaWEowZVN4Y2JpQWdMeThnTVRrdU1TNHlMak1nVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9UeXdnVUhKdmNHVnlkR2xsY3lsY2JpQWdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN6b2dKR1JsWm1sdVpWQnliM0JsY25ScFpYTXNYRzRnSUM4dklERTVMakV1TWk0MklFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvVHl3Z1VDbGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlPaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlMRnh1SUNBdkx5QXhPUzR4TGpJdU55QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aFBLVnh1SUNCblpYUlBkMjVRY205d1pYSjBlVTVoYldWek9pQWtaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeXhjYmlBZ0x5OGdNVGt1TVM0eUxqZ2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeWhQS1Z4dUlDQm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE02SUNSblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITmNibjBwTzF4dVhHNHZMeUF5TkM0ekxqSWdTbE5QVGk1emRISnBibWRwWm5rb2RtRnNkV1VnV3l3Z2NtVndiR0ZqWlhJZ1d5d2djM0JoWTJWZFhTbGNiaVJLVTA5T0lDWW1JQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tDRlZVMFZmVGtGVVNWWkZJSHg4SUNSbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnVXlBOUlDUlRlVzFpYjJ3b0tUdGNiaUFnTHk4Z1RWTWdSV1JuWlNCamIyNTJaWEowY3lCemVXMWliMndnZG1Gc2RXVnpJSFJ2SUVwVFQwNGdZWE1nZTMxY2JpQWdMeThnVjJWaVMybDBJR052Ym5abGNuUnpJSE41YldKdmJDQjJZV3gxWlhNZ2RHOGdTbE5QVGlCaGN5QnVkV3hzWEc0Z0lDOHZJRlk0SUhSb2NtOTNjeUJ2YmlCaWIzaGxaQ0J6ZVcxaWIyeHpYRzRnSUhKbGRIVnliaUJmYzNSeWFXNW5hV1o1S0Z0VFhTa2dJVDBnSjF0dWRXeHNYU2NnZkh3Z1gzTjBjbWx1WjJsbWVTaDdZVG9nVTMwcElDRTlJQ2Q3ZlNjZ2ZId2dYM04wY21sdVoybG1lU2hQWW1wbFkzUW9VeWtwSUNFOUlDZDdmU2M3WEc1OUtTa3NJQ2RLVTA5T0p5d2dlMXh1SUNCemRISnBibWRwWm5rNklHWjFibU4wYVc5dUlITjBjbWx1WjJsbWVTaHBkQ2w3WEc0Z0lDQWdhV1lvYVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCcGMxTjViV0p2YkNocGRDa3BjbVYwZFhKdU95QXZMeUJKUlRnZ2NtVjBkWEp1Y3lCemRISnBibWNnYjI0Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCYmFYUmRYRzRnSUNBZ0lDQXNJR2tnSUNBZ1BTQXhYRzRnSUNBZ0lDQXNJSEpsY0d4aFkyVnlMQ0FrY21Wd2JHRmpaWEk3WEc0Z0lDQWdkMmhwYkdVb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lHa3BZWEpuY3k1d2RYTm9LR0Z5WjNWdFpXNTBjMXRwS3l0ZEtUdGNiaUFnSUNCeVpYQnNZV05sY2lBOUlHRnlaM05iTVYwN1hHNGdJQ0FnYVdZb2RIbHdaVzltSUhKbGNHeGhZMlZ5SUQwOUlDZG1kVzVqZEdsdmJpY3BKSEpsY0d4aFkyVnlJRDBnY21Wd2JHRmpaWEk3WEc0Z0lDQWdhV1lvSkhKbGNHeGhZMlZ5SUh4OElDRnBjMEZ5Y21GNUtISmxjR3hoWTJWeUtTbHlaWEJzWVdObGNpQTlJR1oxYm1OMGFXOXVLR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnYVdZb0pISmxjR3hoWTJWeUtYWmhiSFZsSUQwZ0pISmxjR3hoWTJWeUxtTmhiR3dvZEdocGN5d2dhMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0JwWmlnaGFYTlRlVzFpYjJ3b2RtRnNkV1VwS1hKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUdGeVozTmJNVjBnUFNCeVpYQnNZV05sY2p0Y2JpQWdJQ0J5WlhSMWNtNGdYM04wY21sdVoybG1lUzVoY0hCc2VTZ2tTbE5QVGl3Z1lYSm5jeWs3WEc0Z0lIMWNibjBwTzF4dVhHNHZMeUF4T1M0MExqTXVOQ0JUZVcxaWIyd3VjSEp2ZEc5MGVYQmxXMEJBZEc5UWNtbHRhWFJwZG1WZEtHaHBiblFwWEc0a1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYxYlZFOWZVRkpKVFVsVVNWWkZYU0I4ZkNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlrb0pGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZExDQlVUMTlRVWtsTlNWUkpWa1VzSUNSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFM1MllXeDFaVTltS1R0Y2JpOHZJREU1TGpRdU15NDFJRk41YldKdmJDNXdjbTkwYjNSNWNHVmJRRUIwYjFOMGNtbHVaMVJoWjExY2JuTmxkRlJ2VTNSeWFXNW5WR0ZuS0NSVGVXMWliMndzSUNkVGVXMWliMnduS1R0Y2JpOHZJREl3TGpJdU1TNDVJRTFoZEdoYlFFQjBiMU4wY21sdVoxUmhaMTFjYm5ObGRGUnZVM1J5YVc1blZHRm5LRTFoZEdnc0lDZE5ZWFJvSnl3Z2RISjFaU2s3WEc0dkx5QXlOQzR6TGpNZ1NsTlBUbHRBUUhSdlUzUnlhVzVuVkdGblhWeHVjMlYwVkc5VGRISnBibWRVWVdjb1oyeHZZbUZzTGtwVFQwNHNJQ2RLVTA5T0p5d2dkSEoxWlNrN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1emVXMWliMnd1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFd05WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p5WlhGMWFYSmxLQ2N1TDE5M2EzTXRaR1ZtYVc1bEp5a29KMkZ6ZVc1alNYUmxjbUYwYjNJbktUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1aGMzbHVZeTFwZEdWeVlYUnZjaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRBMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbkpsY1hWcGNtVW9KeTR2WDNkcmN5MWtaV1pwYm1VbktTZ25iMkp6WlhKMllXSnNaU2NwTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbTlpYzJWeWRtRmliR1V1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFd04xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNHZLaXBjYmlBcUlGTjFjSEJ2Y25RZ2JXOWtkV3hsSUhkcGRHZ2djMjl0WlNCbWRXNWpkR2x2Ym5NZ2QybHNiQ0JpWlNCMWMyVm1kV3hjYmlBcUlFQnRiMlIxYkdVZ2RYUnBiSE5jYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JR1JwZG1sa1pWVlNURnh1SUNvZ1FIUjVjR1VnVDJKcVpXTjBYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2RIbHdaU0JVYUdVZ2RIbHdaU0J2WmlCVlVreGNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCa2IyMWhhVzRnVkdobElHUnZiV0ZwYmlCdlppQlZVa3hjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQnBaR1Z1ZEdsMGVTQlVhR1VnYVdSbGJuUnBkSGtnYjJZZ1ZWSk1YRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQkVhWFpwWkdVZ1lXNGdkWEpzSUdsdUlIUjVjR1VzSUdSdmJXRnBiaUJoYm1RZ2FXUmxiblJwZEhsY2JpQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJSFZ5YkNBdElIVnliQ0JoWkdSeVpYTnpYRzRnS2lCQWNtVjBkWEp1SUh0a2FYWnBaR1ZWVWt4OUlIUm9aU0J5WlhOMWJIUWdiMllnWkdsMmFXUmxWVkpNWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmthWFpwWkdWVlVrd29kWEpzS1NCN1hHNWNiaUFnYVdZZ0tDRjFjbXdwSUhSb2NtOTNJRVZ5Y205eUtDZFZVa3dnYVhNZ2JtVmxaR1ZrSUhSdklITndiR2wwSnlrN1hHNWNibHgwWm5WdVkzUnBiMjRnY21WamRYSnpaU2gyWVd4MVpTa2dlMXh1WEhSY2RHTnZibk4wSUhKbFoyVjRJRDBnTHloYllTMTZRUzFhTFYwcUtTZzZYRnd2WEZ3dktEODZYRnd1S1Q5OE9pa29XeTFoTFhwQkxWb3dMVGxBT2lVdVgxeGNLMzRqUFYxN01pd3lOVFo5S1NoYkxXRXRla0V0V2pBdE9VQTZKUzVmWEZ3cmZpTTlYRnd2WFNvcEwyZHBPMXh1SUNBZ0lHTnZibk4wSUhOMVluTjBJRDBnSnlReExDUXpMQ1EwSnp0Y2JseDBJQ0JzWlhRZ2NHRnlkSE1nUFNCMllXeDFaUzV5WlhCc1lXTmxLSEpsWjJWNExDQnpkV0p6ZENrdWMzQnNhWFFvSnl3bktUdGNibHgwWEhSeVpYUjFjbTRnY0dGeWRITTdYRzVjZEgxY2JseHVYSFJzWlhRZ2NHRnlkSE1nUFNCeVpXTjFjbk5sS0hWeWJDazdYRzVjYmlBZ0x5OGdTV1lnZEdobElIVnliQ0JvWVhNZ2JtOGdjMk5vWlcxbFhHNGdJR2xtSUNod1lYSjBjMXN3WFNBOVBUMGdkWEpzSUNZbUlDRndZWEowYzFzd1hTNXBibU5zZFdSbGN5Z25RQ2NwS1NCN1hHNWNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdlMXh1SUNBZ0lDQWdkSGx3WlRvZ1hDSmNJaXhjYmlBZ0lDQWdJR1J2YldGcGJqb2dkWEpzTEZ4dUlDQWdJQ0FnYVdSbGJuUnBkSGs2SUZ3aVhDSmNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduVzBScGRtbGtaVlZTVEYwZ1JHbDJhV1JsVlZKTUlHUnZibHhjSjNRZ2MzVndjRzl5ZENCMWNtd2dkMmwwYUc5MWRDQnpZMmhsYldVdUlGQnNaV0Z6WlNCeVpYWnBaWGNnZVc5MWNpQjFjbXdnWVdSa2NtVnpjeWNzSUhWeWJDazdYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzVjYmx4MEx5OGdZMmhsWTJzZ2FXWWdkR2hsSUhWeWJDQm9ZWE1nZEdobElITmphR1Z0WlNCaGJtUWdhVzVqYkhWa1pYTWdZVzRnUUZ4dVhIUnBaaUFvY0dGeWRITmJNRjBnUFQwOUlIVnliQ0FtSmlCd1lYSjBjMXN3WFM1cGJtTnNkV1JsY3lnblFDY3BLU0I3WEc1Y2RGeDBiR1YwSUhOamFHVnRaU0E5SUhCaGNuUnpXekJkSUQwOVBTQjFjbXdnUHlBbmMyMTBjQ2NnT2lCd1lYSjBjMXN3WFR0Y2JseDBYSFJ3WVhKMGN5QTlJSEpsWTNWeWMyVW9jMk5vWlcxbElDc2dKem92THljZ0t5QndZWEowYzFzd1hTazdYRzVjZEgxY2JseHVYSFF2THlCcFppQjBhR1VnWkc5dFlXbHVJR2x1WTJ4MVpHVnpJR0Z1SUVBc0lHUnBkbWxrWlNCcGRDQjBieUJrYjIxaGFXNGdZVzVrSUdsa1pXNTBhWFI1SUhKbGMzQmxZM1JwZG1Wc2VWeHVYSFJwWmlBb2NHRnlkSE5iTVYwdWFXNWpiSFZrWlhNb0owQW5LU2tnZTF4dVhIUmNkSEJoY25Seld6SmRJRDBnY0dGeWRITmJNRjBnS3lBbk9pOHZKeUFySUhCaGNuUnpXekZkTzF4dVhIUmNkSEJoY25Seld6RmRJRDBnY0dGeWRITmJNVjB1YzNWaWMzUnlLSEJoY25Seld6RmRMbWx1WkdWNFQyWW9KMEFuS1NBcklERXBYRzRnSUNBZ2ZTQmNkQzhxWld4elpTQnBaaUFvY0dGeWRITmJNbDB1YVc1amJIVmtaWE1vSnk4bktTa2dlMXh1SUNBZ0lIQmhjblJ6V3pKZElEMGdjR0Z5ZEhOYk1sMHVjM1ZpYzNSeUtIQmhjblJ6V3pKZExteGhjM1JKYm1SbGVFOW1LQ2N2Snlrck1TazdYRzRnSUgwcUwxeHVYRzRnSUd4bGRDQnlaWE4xYkhRZ1BTQjdYRzRnSUNBZ2RIbHdaVG9nY0dGeWRITmJNRjBzWEc0Z0lDQWdaRzl0WVdsdU9pQndZWEowYzFzeFhTeGNiaUFnSUNCcFpHVnVkR2wwZVRvZ2NHRnlkSE5iTWwxY2JpQWdmVHRjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR2wyYVdSbFJXMWhhV3dvWlcxaGFXd3BJSHRjYmlBZ2JHVjBJR2x1WkdWNFQyWkJkQ0E5SUdWdFlXbHNMbWx1WkdWNFQyWW9KMEFuS1R0Y2JseHVJQ0JzWlhRZ2NtVnpkV3gwSUQwZ2UxeHVJQ0FnSUhWelpYSnVZVzFsT2lCbGJXRnBiQzV6ZFdKemRISnBibWNvTUN3Z2FXNWtaWGhQWmtGMEtTeGNiaUFnSUNCa2IyMWhhVzQ2SUdWdFlXbHNMbk4xWW5OMGNtbHVaeWhwYm1SbGVFOW1RWFFnS3lBeExDQmxiV0ZwYkM1c1pXNW5kR2dwWEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYXlCcFppQmhiaUJQWW1wbFkzUWdhWE1nWlcxd2RIbGNiaUFxSUVCd1lYSmhiU0FnZTA5aWFtVmpkSDBnYjJKcVpXTjBJRTlpYW1WamRDQjBieUJpWlNCamFHVmphMlZrWEc0Z0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZTQWdJQ0FnSUNCemRHRjBkWE1nYjJZZ1QySnFaV04wTENCbGJYQjBlU0J2Y2lCdWIzUWdLSFJ5ZFdWOFptRnNjMlVwTzF4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaVzF3ZEhsUFltcGxZM1FvYjJKcVpXTjBLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1YTJWNWN5aHZZbXBsWTNRcExteGxibWQwYUNBK0lEQWdQeUJtWVd4elpTQTZJSFJ5ZFdVN1hHNTlYRzVjYmk4cUtseHVJQ29nVFdGclpTQmhJRU5QVUZrZ2IyWWdkR2hsSUc5eWFXZHBibUZzSUdSaGRHRmNiaUFxSUVCd1lYSmhiU0FnZTA5aWFtVmpkSDBnSUc5aWFpQXRJRzlpYW1WamRDQjBieUJpWlNCamJHOXVaV1JjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1JsWlhCRGJHOXVaU2h2WW1vcElIdGNiaUFnTHk5VVQwUlBPaUJ6YVcxd2JHVWdZblYwSUdsdVpXWm1hV05wWlc1MElFcFRUMDRnWkdWbGNDQmpiRzl1WlM0dUxseHVJQ0JwWmlBb2IySnFLU0J5WlhSMWNtNGdTbE5QVGk1d1lYSnpaU2hLVTA5T0xuTjBjbWx1WjJsbWVTaHZZbW9wS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJQWW5SaGFXNXpJSFJvWlNCMWMyVnlJRlZTVENCMGFHRjBJR052Y25KbGMzQnZibVJ6SUhSdklHRWdaMmwyWlc0Z1pXMWhhV3hjYmlBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ2RYTmxja1Z0WVdsc0lGUm9aU0IxYzJWeUlHVnRZV2xzWEc0Z0tpQkFjbVYwZFhKdUlIdFZVa3d1VlZKTWZTQjFjMlZ5VlZKTUlGUm9aU0IxYzJWeUlGVlNURnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBWWE5sY2xWU1RFWnliMjFGYldGcGJDaDFjMlZ5UlcxaGFXd3BJSHRjYmlBZ2JHVjBJR2x1WkdWNFQyWkJkQ0E5SUhWelpYSkZiV0ZwYkM1cGJtUmxlRTltS0NkQUp5azdYRzRnSUhKbGRIVnliaUFuZFhObGNqb3ZMeWNnS3lCMWMyVnlSVzFoYVd3dWMzVmljM1J5YVc1bktHbHVaR1Y0VDJaQmRDQXJJREVzSUhWelpYSkZiV0ZwYkM1c1pXNW5kR2dwSUNzZ0p5OG5JQ3NnZFhObGNrVnRZV2xzTG5OMVluTjBjbWx1Wnlnd0xDQnBibVJsZUU5bVFYUXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFOWlkR0ZwYm5NZ2RHaGxJSFZ6WlhJZ1pXMWhhV3dnZEdoaGRDQmpiM0p5WlhOd2IyNWtjeUIwYnlCaElHZHBkbVZ1SUZWU1RGeHVJQ29nUUhCaGNtRnRJQ0I3VlZKTUxsVlNUSDBnZFhObGNsVlNUQ0JVYUdVZ2RYTmxjaUJWVWt4Y2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdkWE5sY2tWdFlXbHNJRlJvWlNCMWMyVnlJR1Z0WVdsc1hHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSVmMyVnlSVzFoYVd4R2NtOXRWVkpNS0hWelpYSlZVa3dwSUh0Y2JpQWdiR1YwSUhWeWJDQTlJR1JwZG1sa1pWVlNUQ2gxYzJWeVZWSk1LVHRjYmlBZ2NtVjBkWEp1SUhWeWJDNXBaR1Z1ZEdsMGVTNXlaWEJzWVdObEtDY3ZKeXdnSnljcElDc2dKMEFuSUNzZ2RYSnNMbVJ2YldGcGJqc2dMeThnYVdSbGJuUnBkSGtnWm1sbGJHUWdhR0Z6SUNjdlpYaGhiWEJzWlVsRUp5QnBibk4wWldGa0lHOW1JQ2RsZUdGdGNHeGxTVVFuWEc1OVhHNWNibHh1THlvcVhHNGdLaUJEYUdWamF5QnBaaUIwYUdVZ2RYTmxjaUJwWkdWdWRHbG1hV1Z5SUdseklHRnNjbVZoWkhrZ2FXNGdkR2hsSUZWU1RDQm1iM0p0WVhRc0lHbG1JRzV2ZEN3Z1kyOXVkbVZ5ZENCMGJ5QlZVa3dnWm05eWJXRjBYRzRnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUNBZ2FXUmxiblJwWm1sbGNpQWdkWE5sY2lCcFpHVnVkR2xtYVdWeVhHNGdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJQ0FnZFhObGNsVlNUQ0FnSUNCMGFHVWdkWE5sY2lCVlVreGNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOdmJuWmxjblJVYjFWelpYSlZVa3dvYVdSbGJuUnBabWxsY2lrZ2UxeHVYRzRnSUM4dklHTm9aV05ySUdsbUlIUm9aU0JwWkdWdWRHbG1hV1Z5SUdseklHRnNjbVZoWkhrZ2FXNGdkR2hsSUhWeWJDQm1iM0p0WVhSY2JpQWdhV1lnS0dsa1pXNTBhV1pwWlhJdWMzVmljM1J5YVc1bktEQXNJRGNwSUQwOVBTQW5kWE5sY2pvdkx5Y3BJSHRjYmlBZ0lDQnNaWFFnWkdsMmFXUmxaRlZTVENBOUlHUnBkbWxrWlZWU1RDaHBaR1Z1ZEdsbWFXVnlLVHRjYmx4dUlDQWdJQzh2WTJobFkyc2dhV1lnZEdobElIVnliQ0JwY3lCM1pXeHNJR1p2Y20xaGRHVmtYRzRnSUNBZ2FXWWdLR1JwZG1sa1pXUlZVa3d1Wkc5dFlXbHVJQ1ltSUdScGRtbGtaV1JWVWt3dWFXUmxiblJwZEhrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcFpHVnVkR2xtYVdWeU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QW5kWE5sY2xWU1RDQjNhWFJvSUhkeWIyNW5JR1p2Y20xaGRDYzdYRzRnSUNBZ2ZWeHVYRzRnSUM4dmFXWWdibTkwTENCamIyNTJaWEowSUhSb1pTQjFjMlZ5SUdWdFlXbHNJSFJ2SUZWU1RDQm1iM0p0WVhSY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnWjJWMFZYTmxjbFZTVEVaeWIyMUZiV0ZwYkNocFpHVnVkR2xtYVdWeUtUdGNiaUFnZlZ4dWZWeHVYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dmMzSmpMM1YwYVd4ekwzVjBhV3h6TG1weklpd2lMeThnSUNBZ0lIQnliM2g1TFc5aWMyVnlkbVVnZGpBdU1DNHhPRnh5WEc0dkx5QWdJQ0FnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUxTENBeU1ERTJJRk5wYlc5dUlGa3VJRUpzWVdOcmQyVnNiQ3dnUVc1NVYyaHBZMmhYWVhsY2NseHVMeThnSUNBZ0lFMUpWQ0JNYVdObGJuTmxJQzBnYUhSMGNEb3ZMMjl3Wlc1emIzVnlZMlV1YjNKbkwyeHBZMlZ1YzJWekwyMXBkQzFzYVdObGJuTmxMbkJvY0Z4eVhHNG9ablZ1WTNScGIyNG9LU0I3WEhKY2JseDBYQ0oxYzJVZ2MzUnlhV04wWENJN1hISmNibHgwTHk4Z1EzSmxZWFJsY3lCaGJtUWdjbVYwZFhKdWN5QmhJRkJ5YjNoNUlIZHlZWEJ3YVc1bklHRWdkR0Z5WjJWMElITnZJSFJvWVhRZ1lXeHNJR05vWVc1blpYTWdZMkZ1SUdKbElIUnlZWEJ3WldRZ1lXNWtJR1p2Y25kaGNtUmxaQ0IwYjF4eVhHNWNkQzh2SUdFZ1kyRnNiR0poWTJzdUlGUm9aU0JqWVd4c1ltRmpheUIwWVd0bGN5QmhiaUJoY25KaGVTQnZaaUJqYUdGdVoyVnpJR3AxYzNRZ2JHbHJaU0IwYUdVZ2RISmhaR2wwYVc5dVlXd2diM0pwWjJsdVlXd2dRMmh5YjIxbElFOWlhbVZqZEM1dlluTmxjblpsWEhKY2JseDBMeThnZTI5aWFtVmpkRG84YjJKcVpXTjBJR05vWVc1blpXUStMRzVoYldVNlBHWnBaV3hrSUdOb1lXNW5aV1ErTEhSNWNHVTZZV1JrZkhWd1pHRjBaWHhrWld4bGRHVjhjbVZqYjI1bWFXZDFjbVY4Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk44YzJWMFVISnZkRzkwZVhCbExHOXNaRlpoYkhWbE9qeHZiR1FnZG1Gc2RXVWdhV1lnZFhCa1lYUmxJSHdnWkdWc1pYUmxQbjFjY2x4dVhIUXZMeUJVYUdVZ1lXTmpaWEIwYkdsemRDQmpZVzRnWW1VZ1lXUmtmSFZ3WkdGMFpYeGtaV3hsZEdWOGNtVmpiMjVtYVdkMWNtVjhjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTjhjMlYwVUhKdmRHOTBlWEJsTGx4eVhHNWNkQzh2SUhZZ01DNHdMakV3SUhSdklITjFjSEJ2Y25RZ2NHRjFjMmx1WnlCaGJtUWdjbVZ6ZEdGeWRHbHVaeUJ2WW5ObGNuWmhkR2x2YmlCMGQyOGdZV1JrYVhScGIyNWhiQ0JqYjI1emRISjFZM1J2Y2lCaGNtZDFiV1Z1ZEhNZ1lYSmxJR0YyWVdsc1lXSnNaU0IwYnlCUFltcGxZM1F1YjJKelpYSjJaVHBjY2x4dVhIUXZMeUJ3WVhWellXSnNaU0F0SUdOeVpXRjBaU0IwYUdVZ1QySnpaWEoyWlhJZ2MyOGdhWFFnWTJGdUlHSmxJSEJoZFhObFpGeHlYRzVjZEM4dklIQmhkWE5sSUMwZ1kzSmxZWFJsSUc5aWMyVnlkbVZ5SUdsdUlIQmhkWE5sWkNCemRHRjBaVnh5WEc1Y2RDOHZJR2xtSUhCaGRYTmhZbXhsSUdseklIUnlkV1VnZEdobGJpQmhiaUJoWkdScGRHbHZibUZzSUcxbGRHaHZaQ0JrWld4cGRtVnlLR2xuYm05eVpWQnlaWFpwYjNWektTQnBjeUJoZG1GcGJHRmliR1VnZEc4Z2MzUmhjblFnWkdWc2FYWmxjbmxjY2x4dVhIUXZMeUIwYnlCd1lYVnpaU0JrWld4cGRtVnllU0J6WlhRZ1lTQndjbTl3WlhKMGVTQmpZV3hzWldRZ2NHRjFjMlVnYjI0Z2RHaGxJR1oxYm1OMGFXOXVJR1JsYkdsMlpYSWdkRzhnZEhKMVpWeHlYRzVjZEM4dklIQmhkWE5oWW14bElHbHpJRzl3ZEdsdmJtRnNJSFJ2SUhKbFpIVmpaU0IwYUdVZ1kyaGhibU5sSUc5bUlITm9ZV1J2ZDJsdVp5QmhJSEJ5YjNCbGNuUjVJRzl5SUcxbGRHaHZaQ0J2YmlCaGJua2daWGhwYzNScGJtY2dZMjlrWlNCallXeHNaV1FnWkdWc2FYWmxjbHh5WEc1Y2RHbG1LQ0ZQWW1wbFkzUXViMkp6WlhKMlpTQW1KaUIwZVhCbGIyWW9VSEp2ZUhrcFBUMDlYQ0ptZFc1amRHbHZibHdpS1NCN1hISmNibHgwWEhSbWRXNWpkR2x2YmlCUFluTmxjblpsY2loMFlYSm5aWFFzWTJGc2JHSmhZMnNzWVdOalpYQjBiR2x6ZEN4d1lYVnpZV0pzWlN4d1lYVnpaU3hrWld4aGVTa2dlMXh5WEc1Y2RDQWdJQ0JjZEhaaGNpQnRaU0E5SUhSb2FYTXNJSEJ5YjNoNU8xeHlYRzVjZENBZ0lDQmNkR1oxYm1OMGFXOXVJR1JsYkdsMlpYSW9hV2R1YjNKbFVISmxkbWx2ZFhNc1pHVnNZWGtwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkR1JsYkdsMlpYSXVaR1ZzWVhrZ1BTQmtaV3hoZVR0Y2NseHVYSFFnSUNBZ1hIUmNkR2xtS0NGa1pXeHBkbVZ5TG5CaGRYTmxLU0I3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkRngwYVdZb2JXVXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFENHdLU0I3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkRngwWEhScFppZ2hhV2R1YjNKbFVISmxkbWx2ZFhNcElIdGNjbHh1WEhSY2RDQWdJQ0JjZENBZ0lDQmNkRngwZG1GeUlHTm9ZVzVuWlhNZ1BTQnRaUzVqYUdGdVoyVnpaWFF1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLR05vWVc1blpTa2dleUJ5WlhSMWNtNGdJV0ZqWTJWd2RHeHBjM1FnZkh3Z1lXTmpaWEIwYkdsemRDNXBibVJsZUU5bUtHTm9ZVzVuWlM1MGVYQmxLVDQ5TURzZ2ZTazdYSEpjYmx4MFhIUWdJQ0FnSUNBZ0lGeDBYSFJjZEdsbUtHTm9ZVzVuWlhNdWJHVnVaM1JvUGpBcElIdGNjbHh1WEhSY2RDQWdJQ0FnSUNBZ1hIUmNkRngwWEhSallXeHNZbUZqYXloamFHRnVaMlZ6S1R0Y2NseHVYSFJjZENBZ0lDQWdJQ0FnWEhSY2RGeDBmVnh5WEc1Y2RDQWdJQ0FnSUNBZ1hIUmNkRngwZlZ4eVhHNWNkQ0FnSUNBZ0lDQWdYSFJjZEZ4MGJXVXVZMmhoYm1kbGMyVjBJRDBnVzEwN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEZ4MGZWeHlYRzVjZENBZ0lDQmNkRngwZlZ4eVhHNWNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJrWld4cGRtVnlMbkJoZFhObElEMGdjR0YxYzJVN1hISmNibHgwSUNBZ0lGeDBaR1ZzYVhabGNpNWtaV3hoZVNBOUlHUmxiR0Y1TzF4eVhHNWNkRngwSUNBZ0lHMWxMbWRsZENBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrcElIdGNjbHh1WEhSY2RDQWdJQ0JjZEdsbUtIQnliM0JsY25SNVBUMDlYQ0pmWDI5aWMyVnlkbVZ5WDE5Y0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFhIUnlaWFIxY200Z2JXVTdYSEpjYmx4MFhIUWdJQ0FnWEhSOVhISmNibHgwWEhRZ0lDQWdYSFJwWmlod2NtOXdaWEowZVQwOVBWd2lkVzV2WW5ObGNuWmxYQ0lwSUh0Y2NseHVYSFJjZENBZ0lDQmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwSUNBZ0lGeDBYSFJjZEU5aWFtVmpkQzUxYm05aWMyVnlkbVVvZEdGeVoyVjBLVHRjY2x4dVhIUmNkQ0FnSUNCY2RGeDBYSFJ5WlhSMWNtNGdkR0Z5WjJWME8xeHlYRzVjZEZ4MElDQWdJRngwWEhSOU8xeHlYRzVjZEZ4MElDQWdJRngwZlZ4eVhHNWNkRngwSUNBZ0lGeDBhV1lvY0hKdmNHVnlkSGs5UFQxY0ltUmxiR2wyWlhKY0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFhIUnlaWFIxY200Z1pHVnNhWFpsY2p0Y2NseHVYSFJjZENBZ0lDQmNkSDFjY2x4dVhIUmNkQ0FnSUNCY2RISmxkSFZ5YmlCMFlYSm5aWFJiY0hKdmNHVnlkSGxkTzF4eVhHNWNkRngwSUNBZ0lIMWNjbHh1WEhRZ0lDQWdYSFJ0WlM1MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEhKY2JseDBJQ0FnSUZ4MGJXVXVZMmhoYm1kbGMyVjBJRDBnVzEwN1hISmNibHgwSUNBZ0lGeDBhV1lvSVcxbExuUmhjbWRsZEM1ZlgyOWljMlZ5ZG1WeVEyRnNiR0poWTJ0elgxOHBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RDOHZJRjlmYjJKelpYSjJaWEpEWVd4c1ltRmphM05mWHlCcGN5QjFjMlZrSUdGeklHRnVJR2x1WkdWNElIUnZJR2RsZENCaGRDQjBhR1VnY0hKdmVIa2dkMmhwWTJnZ2FYTWdkR2hsSUc5aWMyVnlkbVZ5TENCemJ5QjNaU0JqWVc0Z2RXNXZZbk5sY25abFhISmNibHgwSUNBZ0lGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTEZ3aVgxOXZZbk5sY25abGNrTmhiR3hpWVdOcmMxOWZYQ0lzZTJWdWRXMWxjbUZpYkdVNlptRnNjMlVzWTI5dVptbG5kWEpoWW14bE9uUnlkV1VzZDNKcGRHRmliR1U2Wm1Gc2MyVXNkbUZzZFdVNlcxMTlLVHRjY2x4dVhIUWdJQ0FnWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNYQ0pmWDI5aWMyVnlkbVZ5YzE5ZlhDSXNlMlZ1ZFcxbGNtRmliR1U2Wm1Gc2MyVXNZMjl1Wm1sbmRYSmhZbXhsT25SeWRXVXNkM0pwZEdGaWJHVTZabUZzYzJVc2RtRnNkV1U2VzExOUtUdGNjbHh1WEhRZ0lDQWdYSFI5WEhKY2JseDBJQ0FnSUZ4MGJXVXVkR0Z5WjJWMExsOWZiMkp6WlhKMlpYSkRZV3hzWW1GamEzTmZYeTV3ZFhOb0tHTmhiR3hpWVdOcktUdGNjbHh1WEhRZ0lDQWdYSFJ0WlM1MFlYSm5aWFF1WDE5dlluTmxjblpsY25OZlh5NXdkWE5vS0hSb2FYTXBPMXh5WEc1Y2RDQWdJQ0JjZEhCeWIzaDVJRDBnYm1WM0lGQnliM2g1S0hSaGNtZGxkQ3h0WlNrN1hISmNibHgwSUNBZ0lGeDBaR1ZzYVhabGNpaG1ZV3h6WlN4a1pXeGhlU2s3WEhKY2JseDBJQ0FnSUZ4MGNtVjBkWEp1SUhCeWIzaDVPMXh5WEc1Y2RDQWdJQ0I5WEhKY2JseDBYSFJQWW5ObGNuWmxjaTV3Y205MGIzUjVjR1V1WkdWc2FYWmxjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjeTVuWlhRb2JuVnNiQ3hjSW1SbGJHbDJaWEpjSWlrN1hISmNibHgwWEhSOVhISmNibHgwSUNBZ0lFOWljMlZ5ZG1WeUxuQnliM1J2ZEhsd1pTNXpaWFFnUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFzSUhCeWIzQmxjblI1TENCMllXeDFaU2tnZXlBdkx5QXNJSEpsWTJWcGRtVnlYSEpjYmx4MElDQWdJRngwZG1GeUlHOXNaSFpoYkhWbElEMGdkR0Z5WjJWMFczQnliM0JsY25SNVhUdGNjbHh1WEhRZ0lDQWdYSFIyWVhJZ2RIbHdaU0E5SUNodmJHUjJZV3gxWlQwOVBYVnVaR1ZtYVc1bFpDQS9JRndpWVdSa1hDSWdPaUJjSW5Wd1pHRjBaVndpS1R0Y2NseHVYSFFnSUNBZ1hIUjBZWEpuWlhSYmNISnZjR1Z5ZEhsZElEMGdkbUZzZFdVN1hISmNibHgwSUNBZ0lGeDBhV1lvZEdGeVoyVjBMbDlmYjJKelpYSjJaWEp6WDE4dWFXNWtaWGhQWmloMGFHbHpLVDQ5TUNBbUppQW9JWFJvYVhNdVlXTmpaWEIwYkdsemRDQjhmQ0IwYUdsekxtRmpZMlZ3ZEd4cGMzUXVhVzVrWlhoUFppaDBlWEJsS1Q0OU1Da3BJSHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBkbUZ5SUdOb1lXNW5aU0E5SUh0dlltcGxZM1E2ZEdGeVoyVjBMRzVoYldVNmNISnZjR1Z5ZEhrc2RIbHdaVHAwZVhCbGZTeGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MFhIUnpkR0Z5ZENBOUlIUm9hWE11WTJoaGJtZGxjMlYwTG14bGJtZDBhQ0E5UFQwZ01DeGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUlEMGdkR2hwY3k1a1pXeHBkbVZ5S0NrN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEdsbUtIUjVjR1U5UFQxY0luVndaR0YwWlZ3aUtTQjdYSEpjYmx4MElDQWdJQ0FnSUNCY2RGeDBZMmhoYm1kbExtOXNaRlpoYkhWbElEMGdiMnhrZG1Gc2RXVTdYSEpjYmx4MElDQWdJQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRHaHBjeTVqYUdGdVoyVnpaWFF1Y0hWemFDaGphR0Z1WjJVcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhScFppaHpkR0Z5ZENrZ2UxeHlYRzVjZENBZ0lDQWdJQ0FnWEhSY2RHUmxiR2wyWlhJb1ptRnNjMlVzS0hSNWNHVnZaaWhrWld4cGRtVnlMbVJsYkdGNUtUMDlQVndpYm5WdFltVnlYQ0lnUHlCa1pXeHBkbVZ5TG1SbGJHRjVJRG9nTVRBcEtUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnZEhKMVpUdGNjbHh1WEhRZ0lDQWdmVHRjY2x4dVhIUWdJQ0FnVDJKelpYSjJaWEl1Y0hKdmRHOTBlWEJsTG1SbGJHVjBaVkJ5YjNCbGNuUjVJRDBnWm5WdVkzUnBiMjRvZEdGeVoyVjBMQ0J3Y205d1pYSjBlU2tnZTF4eVhHNWNkQ0FnSUNCY2RIWmhjaUJ2YkdSMllXeDFaU0E5SUhSaGNtZGxkRnR3Y205d1pYSjBlVjA3WEhKY2JseDBJQ0FnSUZ4MEx5OXBaaWgwZVhCbGIyWW9iMnhrZG1Gc2RXVXBJVDA5WENKMWJtUmxabWx1WldSY0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFpHVnNaWFJsSUhSaGNtZGxkRnR3Y205d1pYSjBlVjA3WEhKY2JseDBYSFFnSUNBZ1hIUnBaaWgwWVhKblpYUXVYMTl2WW5ObGNuWmxjbk5mWHk1cGJtUmxlRTltS0hSb2FYTXBQajB3SUNZbUlDRjBhR2x6TG1GalkyVndkR3hwYzNRZ2ZId2dkR2hwY3k1aFkyTmxjSFJzYVhOMExtbHVaR1Y0VDJZb1hDSmtaV3hsZEdWY0lpaytQVEFwSUh0Y2NseHVYSFJjZENBZ0lDQWdJQ0FnWEhSMllYSWdZMmhoYm1kbElEMGdlMjlpYW1WamREcDBZWEpuWlhRc2JtRnRaVHB3Y205d1pYSjBlU3gwZVhCbE9sd2laR1ZzWlhSbFhDSXNiMnhrVm1Gc2RXVTZiMnhrZG1Gc2RXVjlMRnh5WEc1Y2RGeDBJQ0FnSUNBZ0lDQmNkRngwYzNSaGNuUWdQU0IwYUdsekxtTm9ZVzVuWlhObGRDNXNaVzVuZEdnZ1BUMDlJREFzWEhKY2JseDBYSFFnSUNBZ0lDQWdJRngwWEhSa1pXeHBkbVZ5SUQwZ2RHaHBjeTVrWld4cGRtVnlLQ2s3WEhKY2JseDBYSFFnSUNBZ0lDQWdJRngwZEdocGN5NWphR0Z1WjJWelpYUXVjSFZ6YUNoamFHRnVaMlVwTzF4eVhHNWNkRngwSUNBZ0lDQWdJQ0JjZEdsbUtITjBZWEowS1NCN1hISmNibHgwWEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUtHWmhiSE5sTENoMGVYQmxiMllvWkdWc2FYWmxjaTVrWld4aGVTazlQVDFjSW01MWJXSmxjbHdpSUQ4Z1pHVnNhWFpsY2k1a1pXeGhlU0E2SURFd0tTazdYSEpjYmx4MFhIUWdJQ0FnSUNBZ0lGeDBmVnh5WEc1Y2RGeDBJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkQzh2ZlZ4eVhHNWNkQ0FnSUNCY2RISmxkSFZ5YmlCMGNuVmxPMXh5WEc1Y2RDQWdJQ0I5TzF4eVhHNWNkQ0FnSUNCUFluTmxjblpsY2k1d2NtOTBiM1I1Y0dVdVpHVm1hVzVsVUhKdmNHVnlkSGtnUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFzSUhCeWIzQmxjblI1TENCa1pYTmpjbWx3ZEc5eUtTQjdYSEpjYmx4MElDQWdJRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrc0lHUmxjMk55YVhCMGIzSXBPMXh5WEc1Y2RDQWdJQ0JjZEdsbUtIUmhjbWRsZEM1ZlgyOWljMlZ5ZG1WeWMxOWZMbWx1WkdWNFQyWW9kR2hwY3lrK1BUQWdKaVlnSVhSb2FYTXVZV05qWlhCMGJHbHpkQ0I4ZkNCMGFHbHpMbUZqWTJWd2RHeHBjM1F1YVc1a1pYaFBaaWhjSW5KbFkyOXVabWxuZFhKbFhDSXBQajB3S1NCN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEhaaGNpQmphR0Z1WjJVZ1BTQjdiMkpxWldOME9uUmhjbWRsZEN4dVlXMWxPbkJ5YjNCbGNuUjVMSFI1Y0dVNlhDSnlaV052Ym1acFozVnlaVndpZlN4Y2NseHVJQ0FnSUNBZ0lDQmNkRngwWEhSemRHRnlkQ0E5SUhSb2FYTXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFDQTlQVDBnTUN4Y2NseHVJQ0FnSUNBZ0lDQmNkRngwWEhSa1pXeHBkbVZ5SUQwZ2RHaHBjeTVrWld4cGRtVnlLQ2s3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkSFJvYVhNdVkyaGhibWRsYzJWMExuQjFjMmdvWTJoaGJtZGxLVHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBhV1lvYzNSaGNuUXBJSHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBYSFJrWld4cGRtVnlLR1poYkhObExDaDBlWEJsYjJZb1pHVnNhWFpsY2k1a1pXeGhlU2s5UFQxY0ltNTFiV0psY2x3aUlEOGdaR1ZzYVhabGNpNWtaV3hoZVNBNklERXdLU2s3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lGeDBjbVYwZFhKdUlIUnlkV1U3WEhKY2JseDBJQ0FnSUgwN1hISmNibHgwSUNBZ0lFOWljMlZ5ZG1WeUxuQnliM1J2ZEhsd1pTNXpaWFJRY205MGIzUjVjR1ZQWmlBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2NISnZkRzkwZVhCbEtTQjdYSEpjYmx4MElDQWdJRngwZG1GeUlHOXNaSFpoYkhWbElEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0hSaGNtZGxkQ2s3WEhKY2JseDBJQ0FnSUZ4MFQySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDd2djSEp2ZEc5MGVYQmxLVHRjY2x4dVhIUWdJQ0FnWEhScFppaDBZWEpuWlhRdVgxOXZZbk5sY25abGNuTmZYeTVwYm1SbGVFOW1LSFJvYVhNcFBqMHdJQ1ltSUNGMGFHbHpMbUZqWTJWd2RHeHBjM1FnZkh3Z2RHaHBjeTVoWTJObGNIUnNhWE4wTG1sdVpHVjRUMllvWENKelpYUlFjbTkwYjNSNWNHVmNJaWsrUFRBcElIdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRtRnlJR05vWVc1blpTQTlJSHR2WW1wbFkzUTZkR0Z5WjJWMExHNWhiV1U2WENKZlgzQnliM1J2WDE5Y0lpeDBlWEJsT2x3aWMyVjBVSEp2ZEc5MGVYQmxYQ0lzYjJ4a1ZtRnNkV1U2YjJ4a2RtRnNkV1Y5TEZ4eVhHNGdJQ0FnWEhSY2RGeDBYSFJ6ZEdGeWRDQTlJSFJvYVhNdVkyaGhibWRsYzJWMExteGxibWQwYUNBOVBUMGdNQ3hjY2x4dUlDQWdJRngwWEhSY2RGeDBaR1ZzYVhabGNpQTlJSFJvYVhNdVpHVnNhWFpsY2lncE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhSMGFHbHpMbU5vWVc1blpYTmxkQzV3ZFhOb0tHTm9ZVzVuWlNrN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEdsbUtITjBZWEowS1NCN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEZ4MFpHVnNhWFpsY2lobVlXeHpaU3dvZEhsd1pXOW1LR1JsYkdsMlpYSXVaR1ZzWVhrcFBUMDlYQ0p1ZFcxaVpYSmNJaUEvSUdSbGJHbDJaWEl1WkdWc1lYa2dPaUF4TUNrcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lGeDBmVnh5WEc1Y2RDQWdJQ0JjZEhKbGRIVnliaUIwY25WbE8xeHlYRzVjZENBZ0lDQjlPMXh5WEc1Y2RDQWdJQ0JQWW5ObGNuWmxjaTV3Y205MGIzUjVjR1V1Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk1nUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFwSUh0Y2NseHVYSFFnSUNBZ0lDQWdJRTlpYW1WamRDNXdjbVYyWlc1MFJYaDBaVzV6YVc5dWN5aDBZWEpuWlhRcE8xeHlYRzVjZENBZ0lDQmNkR2xtS0hSaGNtZGxkQzVmWDI5aWMyVnlkbVZ5YzE5ZkxtbHVaR1Y0VDJZb2RHaHBjeWsrUFRBZ0ppWWdJWFJvYVhNdVlXTmpaWEIwYkdsemRDQjhmQ0IwYUdsekxtRmpZMlZ3ZEd4cGMzUXVhVzVrWlhoUFppaGNJbkJ5WlhabGJuUkZlSFJsYm5OcGIyNXpYQ0lwUGowd0tTQjdYSEpjYmx4MElDQWdJQ0FnSUNCY2RIWmhjaUJqYUdGdVoyVWdQU0I3YjJKcVpXTjBPblJoY21kbGRDeDBlWEJsT2x3aWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5OY0luMHNYSEpjYmx4MFhIUmNkRngwWEhSemRHRnlkQ0E5SUhSb2FYTXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFDQTlQVDBnTUN4Y2NseHVYSFJjZEZ4MFhIUmNkR1JsYkdsMlpYSWdQU0IwYUdsekxtUmxiR2wyWlhJb0tUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRHaHBjeTVqYUdGdVoyVnpaWFF1Y0hWemFDaGphR0Z1WjJVcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhScFppaHpkR0Z5ZENrZ2UxeHlYRzVjZENBZ0lDQWdJQ0FnWEhSY2RHUmxiR2wyWlhJb1ptRnNjMlVzS0hSNWNHVnZaaWhrWld4cGRtVnlMbVJsYkdGNUtUMDlQVndpYm5WdFltVnlYQ0lnUHlCa1pXeHBkbVZ5TG1SbGJHRjVJRG9nTVRBcEtUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnZEhKMVpUdGNjbHh1WEhRZ0lDQWdmVHRjY2x4dVhIUWdJQ0FnVDJKcVpXTjBMbTlpYzJWeWRtVWdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNZMkZzYkdKaFkyc3NZV05qWlhCMGJHbHpkQ3h3WVhWellXSnNaU3h3WVhWelpTeGtaV3hoZVNrZ2UxeHlYRzVjZENBZ0lDQmNkSEpsZEhWeWJpQnVaWGNnVDJKelpYSjJaWElvYjJKcVpXTjBMR05oYkd4aVlXTnJMR0ZqWTJWd2RHeHBjM1FzY0dGMWMyRmliR1VzY0dGMWMyVXNaR1ZzWVhrcE8xeHlYRzVjZENBZ0lDQjlPMXh5WEc1Y2RDQWdJQ0JQWW1wbFkzUXVkVzV2WW5ObGNuWmxJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMR05oYkd4aVlXTnJLU0I3WEhKY2JseDBJQ0FnSUZ4MGFXWW9iMkpxWldOMExsOWZiMkp6WlhKMlpYSkRZV3hzWW1GamEzTmZYeWtnZTF4eVhHNWNkQ0FnSUNCY2RGeDBhV1lvSVdOaGJHeGlZV05yS1NCN1hISmNibHgwSUNBZ0lGeDBYSFJjZEc5aWFtVmpkQzVmWDI5aWMyVnlkbVZ5UTJGc2JHSmhZMnR6WDE4dWMzQnNhV05sS0RBc2IySnFaV04wTGw5ZmIySnpaWEoyWlhKRFlXeHNZbUZqYTNOZlh5NXNaVzVuZEdncE8xeHlYRzVjZENBZ0lDQmNkRngwWEhSdlltcGxZM1F1WDE5dlluTmxjblpsY25OZlh5NXpjR3hwWTJVb01DeHZZbXBsWTNRdVgxOXZZbk5sY25abGNuTmZYeTVzWlc1bmRHZ3BPMXh5WEc1Y2RDQWdJQ0JjZEZ4MFhIUnlaWFIxY200N1hISmNibHgwSUNBZ0lGeDBYSFI5WEhKY2JseDBJQ0FnSUZ4MFhIUnZZbXBsWTNRdVgxOXZZbk5sY25abGNrTmhiR3hpWVdOcmMxOWZMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9iMkp6WlhKMlpYSmpZV3hzWW1GamF5eHBLU0I3WEhKY2JseDBJQ0FnSUZ4MFhIUmNkR2xtS0dOaGJHeGlZV05yUFQwOWIySnpaWEoyWlhKallXeHNZbUZqYXlrZ2UxeHlYRzVjZENBZ0lDQmNkRngwWEhSY2RHOWlhbVZqZEM1ZlgyOWljMlZ5ZG1WeVEyRnNiR0poWTJ0elgxOHVjM0JzYVdObEtHa3NNU2s3WEhKY2JseDBJQ0FnSUZ4MFhIUmNkRngwWkdWc1pYUmxJRzlpYW1WamRDNWZYMjlpYzJWeWRtVnljMTlmVzJsZExtTmhiR3hpWVdOck8xeHlYRzVjZENBZ0lDQmNkRngwWEhSY2RHOWlhbVZqZEM1ZlgyOWljMlZ5ZG1WeWMxOWZMbk53YkdsalpTaHBMREVwTzF4eVhHNWNkQ0FnSUNCY2RGeDBYSFI5WEhKY2JseDBJQ0FnSUZ4MFhIUjlLVHRjY2x4dVhIUWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lIMDdYSEpjYmx4MElDQWdJRUZ5Y21GNUxtOWljMlZ5ZG1VZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc1kyRnNiR0poWTJzc1lXTmpaWEIwYkdsemRDeHdZWFZ6WVdKc1pTeHdZWFZ6WlN4a1pXeGhlU2tnZTF4eVhHNWNkQ0FnSUNCY2RHbG1LQ0VvYjJKcVpXTjBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BJQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLRzlpYW1WamRDa3BJSHRjY2x4dVhIUWdJQ0FnWEhSY2RIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pHYVhKemRDQmhjbWQxYldWdWRDQjBieUJCY25KaGVTNXZZbk5sY25abGNpQnBjeUJ1YjNRZ1lXNGdRWEp5WVhsY0lpazdYSEpjYmx4MElDQWdJRngwZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JjZEdGalkyVndkR3hwYzNRZ1BTQmhZMk5sY0hSc2FYTjBJSHg4SUZ0Y0ltRmtaRndpTENCY0luVndaR0YwWlZ3aUxDQmNJbVJsYkdWMFpWd2lMQ0JjSW5Od2JHbGpaVndpWFR0Y2NseHVYSFFnSUNBZ1hIUjJZWElnWVhKeVlYbHdjbTk0ZVNBOUlHNWxkeUJRY205NGVTaHZZbXBsWTNRc2UyZGxkRG9nWm5WdVkzUnBiMjRvZEdGeVoyVjBMSEJ5YjNCbGNuUjVLU0I3WEhKY2JseDBJQ0FnSUZ4MFhIUnBaaWh3Y205d1pYSjBlVDA5UFZ3aWRXNXZZbk5sY25abFhDSXBJSHRjY2x4dVhIUmNkQ0FnSUNCY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYSEpjYmx4MFhIUWdJQ0FnWEhSY2RGeDBhV1lvWTJGc2JHSmhZMnNwSUh0Y2NseHVYSFJjZENBZ0lDQmNkRngwWEhSY2RISmxkSFZ5YmlCUFltcGxZM1F1ZFc1dlluTmxjblpsS0hSaGNtZGxkQ3hqWVd4c1ltRmpheWs3WEhKY2JseDBYSFFnSUNBZ1hIUmNkRngwZlZ4eVhHNWNkRngwSUNBZ0lGeDBYSFJjZEhKbGRIVnliaUIwWVhKblpYUXVkVzV2WW5ObGNuWmxLQ2s3WEhKY2JseDBYSFFnSUNBZ1hIUmNkSDA3WEhKY2JseDBYSFFnSUNBZ1hIUjlYSEpjYmx4MElDQWdJRngwWEhScFppaHdjbTl3WlhKMGVUMDlQVndpYzNCc2FXTmxYQ0lwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLSE4wWVhKMExHVnVaQ2tnZTF4eVhHNWNkQ0FnSUNCY2RGeDBYSFJjZEdsbUtIUjVjR1Z2WmloemRHRnlkQ2toUFQxY0ltNTFiV0psY2x3aUlIeDhJSFI1Y0dWdlppaGxibVFwSVQwOVhDSnVkVzFpWlhKY0lpa2dlMXh5WEc1Y2RDQWdJQ0JjZEZ4MFhIUmNkRngwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrWnBjbk4wSUhSM2J5QmhjbWQxYldWdWRITWdkRzhnUVhKeVlYa2djM0JzYVdObElHRnlaU0J1YjNRZ2JuVnRZbVZ5TENCdWRXMWlaWEpjSWlrN1hISmNibHgwSUNBZ0lGeDBYSFJjZEZ4MGZWeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RGeDBkbUZ5SUhKbGJXOTJaV1FnUFNCMGFHbHpMbk5zYVdObEtITjBZWEowTEhOMFlYSjBLMlZ1WkNrc1hISmNibHgwSUNBZ0lGeDBJQ0FnSUZ4MFhIUmNkR0ZrWkdWa1EyOTFiblFnUFNBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE11YkdWdVozUm9MVElnT2lBd0tTeGNjbHh1WEhRZ0lDQWdYSFFnSUNBZ1hIUmNkRngwWTJoaGJtZGxJRDBnSUh0dlltcGxZM1E2YjJKcVpXTjBMSFI1Y0dVNlhDSnpjR3hwWTJWY0lpeHBibVJsZURwemRHRnlkQ3h5WlcxdmRtVmtPbkpsYlc5MlpXUXNZV1JrWldSRGIzVnVkRHBoWkdSbFpFTnZkVzUwZlR0Y2NseHVYSFFnSUNBZ1hIUWdJQ0FnWEhSY2RIUmhjbWRsZEM1emNHeHBZMlV1WVhCd2JIa29kR0Z5WjJWMExHRnlaM1Z0Wlc1MGN5azdYSEpjYmx4MElDQWdJRngwSUNBZ0lGeDBYSFJwWmloaFkyTmxjSFJzYVhOMExtbHVaR1Y0VDJZb1hDSnpjR3hwWTJWY0lpaytQVEFwSUh0Y2NseHVYSFFnSUNBZ1hIUWdJQ0FnWEhSY2RGeDBkbUZ5SUhOMFlYSjBJRDBnY0hKdmVIa3VYMTl2WW5ObGNuWmxjbDlmTG1Ob1lXNW5aWE5sZEM1c1pXNW5kR2dnUFQwOUlEQXNYSEpjYmx4MElDQWdJRngwSUNBZ0lDQWdJQ0JjZEZ4MFhIUmtaV3hwZG1WeUlEMGdjSEp2ZUhrdVgxOXZZbk5sY25abGNsOWZMbVJsYkdsMlpYSW9LVHRjY2x4dVhIUWdJQ0FnWEhRZ0lDQWdYSFJjZEZ4MGNISnZlSGt1WDE5dlluTmxjblpsY2w5ZkxtTm9ZVzVuWlhObGRDNXdkWE5vS0dOb1lXNW5aU2s3WEhKY2JseDBJQ0FnSUZ4MElDQWdJRngwWEhSY2RHbG1LSE4wWVhKMEtTQjdYSEpjYmx4MElDQWdJRngwWEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUtHWmhiSE5sTENoMGVYQmxiMllvWkdWc2FYWmxjaTVrWld4aGVTazlQVDFjSW01MWJXSmxjbHdpSUQ4Z1pHVnNhWFpsY2k1a1pXeGhlU0E2SURFd0tTazdYSEpjYmx4MElDQWdJRngwWEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RGeDBmVnh5WEc1Y2RDQWdJQ0JjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEdsbUtIQnliM0JsY25SNVBUMDlYQ0p3ZFhOb1hDSXBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RGeDBJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hISmNibHgwSUNBZ0lGeDBYSFFnSUNBZ1hIUnlaWFIxY200Z2RHaHBjeTV6Y0d4cFkyVW9kR2hwY3k1c1pXNW5kR2dzTUN4cGRHVnRLVHRjY2x4dVhIUWdJQ0FnWEhSY2RDQWdJQ0I5WEhKY2JseDBJQ0FnSUZ4MFhIUjlYSEpjYmx4MElDQWdJRngwWEhScFppaHdjbTl3WlhKMGVUMDlQVndpY0c5d1hDSXBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RGeDBJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhIUWdJQ0FnWEhSY2RDQWdJQ0JjZEhKbGRIVnliaUIwYUdsekxuTndiR2xqWlNoMGFHbHpMbXhsYm1kMGFDMHhMREVwTzF4eVhHNWNkQ0FnSUNCY2RGeDBJQ0FnSUgxY2NseHVYSFFnSUNBZ1hIUmNkSDFjY2x4dVhIUWdJQ0FnWEhSY2RHbG1LSEJ5YjNCbGNuUjVQVDA5WENKMWJuTm9hV1owWENJcElIdGNjbHh1WEhRZ0lDQWdYSFJjZEZ4MElISmxkSFZ5YmlCbWRXNWpkR2x2YmlocGRHVnRLU0I3WEhKY2JpQWdJQ0JjZEZ4MElDQWdJRngwWEhSeVpYUjFjbTRnZEdocGN5NXpjR3hwWTJVb01Dd3dMR2wwWlcwcE8xeHlYRzRnSUNBZ1hIUmNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEgxY2NseHVYSFFnSUNBZ1hIUmNkR2xtS0hCeWIzQmxjblI1UFQwOVhDSnphR2xtZEZ3aUtTQjdYSEpjYmx4MElDQWdJRngwWEhSY2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNjbHh1WEhRZ0lDQWdYSFFnSUNBZ1hIUmNkSEpsZEhWeWJpQjBhR2x6TG5Od2JHbGpaU2d3TERFcE8xeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEgxY2NseHVYSFFnSUNBZ1hIUmNkSEpsZEhWeWJpQjBZWEpuWlhSYmNISnZjR1Z5ZEhsZE8xeHlYRzVjZENBZ0lDQmNkSDE5S1R0Y2NseHVYSFFnSUNBZ1hIUjJZWElnY0hKdmVIa2dQU0JQWW1wbFkzUXViMkp6WlhKMlpTaGhjbkpoZVhCeWIzaDVMR1oxYm1OMGFXOXVLR05vWVc1blpYTmxkQ2tnZXlCY2NseHVYSFFnSUNBZ1hIUmNkSFpoY2lCamFHRnVaMlZ6SUQwZ1kyaGhibWRsYzJWMExtWnBiSFJsY2lobWRXNWpkR2x2YmloamFHRnVaMlVwSUhzZ2NtVjBkWEp1SUdOb1lXNW5aUzV1WVcxbElUMDlYQ0pzWlc1bmRHaGNJaUFtSmlCamFHRnVaMlV1Ym1GdFpTRTlQVndpWVdSa1hDSWdKaVlnS0NGaFkyTmxjSFJzYVhOMElIeDhJR0ZqWTJWd2RHeHBjM1F1YVc1a1pYaFBaaWhqYUdGdVoyVXVkSGx3WlNrK1BUQXBPeUI5S1R0Y2NseHVYSFFnSUNBZ1hIUmNkR2xtS0dOb1lXNW5aWE11YkdWdVozUm9QakFwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkRngwWTJGc2JHSmhZMnNvWTJoaGJtZGxjeWs3WEhKY2JseDBJQ0FnSUZ4MFhIUjlYSEpjYmx4MElDQWdJRngwZlN4aFkyTmxjSFJzYVhOMExIQmhkWE5oWW14bExIQmhkWE5sTEdSbGJHRjVLVHRjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnY0hKdmVIazdYSEpjYmx4MElDQWdJSDA3WEhKY2JseDBJQ0FnSUVGeWNtRjVMblZ1YjJKelpYSjJaU0E5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3hqWVd4c1ltRmpheWtnZTF4eVhHNWNkRngwSUNCeVpYUjFjbTRnYjJKcVpXTjBMblZ1YjJKelpYSjJaU2hqWVd4c1ltRmpheWs3WEhKY2JseDBJQ0FnSUgxY2NseHVYSFI5WEhKY2JseDBUMkpxWldOMExtUmxaWEJQWW5ObGNuWmxJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMR05oYkd4aVlXTnJMSEJoY25SektTQjdYSEpjYmx4eVhHNWNkRngwY0dGeWRITWdQU0FvY0dGeWRITWdQeUJ3WVhKMGN5QTZJRnRkS1R0Y2NseHVYSEpjYmx4MFhIUjJZWElnZEc5VWVYQmxUbUZ0WlNBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwWEhSeVpYUjFjbTRnS0h0OUtTNTBiMU4wY21sdVp5NWpZV3hzS0c5aWFpa3ViV0YwWTJnb0wxeGNjeWhiWVMxNlFTMWFYU3NwTHlsYk1WMHVkRzlNYjNkbGNrTmhjMlVvS1Z4eVhHNWNkRngwZlZ4eVhHNWNjbHh1WEhSY2RHWjFibU4wYVc5dUlISmxiMkp6WlhKMlpTaDJZV3gxWlN3Z2NHRnlkSE1wSUh0Y2NseHVYSFJjZEZ4MGRtRnlJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWgyWVd4MVpTazdYSEpjYmx4MFhIUmNkR3RsZVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloclpYa3BJSHRjY2x4dVhIUmNkRngwWEhScFppZ29kRzlVZVhCbFRtRnRaU2gyWVd4MVpWdHJaWGxkS1NBOVBUMGdKMjlpYW1WamRDY2dmSHdnZEc5VWVYQmxUbUZ0WlNoMllXeDFaVnRyWlhsZEtTQTlQVDBnSjJGeWNtRjVKeWtnSmlZZ0lYWmhiSFZsVzJ0bGVWMHVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oxOWZiMkp6WlhKMlpYSnpYMThuS1NrZ2UxeHlYRzVjZEZ4MFhIUmNkRngwZG1GeUlHNWxkM0JoY25SeklEMGdjR0Z5ZEhNdWMyeHBZMlVvTUNrN1hISmNibHgwWEhSY2RGeDBYSFJ1Wlhkd1lYSjBjeTV3ZFhOb0tHdGxlU2s3WEhKY2JseDBYSFJjZEZ4MFhIUjJZV3gxWlZ0clpYbGRJRDBnVDJKcVpXTjBMbVJsWlhCUFluTmxjblpsS0haaGJIVmxXMnRsZVYwc1kyRnNiR0poWTJzc2JtVjNjR0Z5ZEhNcE8xeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwZlNrN1hISmNibHgwWEhSOVhISmNibHh5WEc1Y2RGeDBjbVZ2WW5ObGNuWmxLRzlpYW1WamRDd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dVhIUmNkSFpoY2lCdlluTmxjblpsWkNBOUlFOWlhbVZqZEM1dlluTmxjblpsS0c5aWFtVmpkQ3htZFc1amRHbHZiaWhqYUdGdVoyVnpaWFFwSUh0Y2NseHVYSFJjZEZ4MGRtRnlJR05vWVc1blpYTWdQU0JiWFR0Y2NseHVYSFJjZEZ4MFpuVnVZM1JwYjI0Z2NtVmpkWEp6WlNodVlXMWxMSEp2YjNSUFltcGxZM1FzYjJ4a1QySnFaV04wTEc1bGQwOWlhbVZqZEN4d1lYUm9LU0I3WEhKY2JseDBYSFJjZEZ4MGFXWW9ibVYzVDJKcVpXTjBJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBLU0I3WEhKY2JseDBYSFJjZEZ4MFhIUjJZWElnYm1WM2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektHNWxkMDlpYW1WamRDazdYSEpjYmx4MFhIUmNkRngwWEhSdVpYZHJaWGx6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYTJWNUtTQjdYSEpjYmx4MFhIUmNkRngwWEhSY2RHbG1LQ0Z2YkdSUFltcGxZM1FnZkh3Z0tHOXNaRTlpYW1WamRGdHJaWGxkSVQwOWJtVjNUMkpxWldOMFcydGxlVjBwS1NCN1hISmNibHgwWEhSY2RGeDBYSFJjZEZ4MGRtRnlJRzlzWkhaaGJIVmxJRDBnS0c5c1pFOWlhbVZqZENBbUppQnZiR1JQWW1wbFkzUmJhMlY1WFNFOVBYVnVaR1ZtYVc1bFpDQS9JRzlzWkU5aWFtVmpkRnRyWlhsZElEb2dkVzVrWldacGJtVmtLU3hjY2x4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdOb1lXNW5aU0E5SUNodmJHUjJZV3gxWlQwOVBYVnVaR1ZtYVc1bFpDQS9JRndpWVdSa1hDSWdPaUJjSW5Wd1pHRjBaVndpS1N4Y2NseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHdGxlWEJoZEdnZ1BTQndZWFJvSUNzZ1hDSXVYQ0lnS3lCclpYazdYSEpjYmx4eVhHNWNkRngwWEhSY2RGeDBYSFJjZEdOb1lXNW5aWE11Y0hWemFDaDdibUZ0WlRwdVlXMWxMRzlpYW1WamREcHliMjkwVDJKcVpXTjBMSFI1Y0dVNlkyaGhibWRsTEc5c1pGWmhiSFZsT205c1pIWmhiSFZsTEc1bGQxWmhiSFZsT201bGQwOWlhbVZqZEZ0clpYbGRMR3RsZVhCaGRHZzZhMlY1Y0dGMGFIMHBPMXh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEpsWTNWeWMyVW9ibUZ0WlN4eWIyOTBUMkpxWldOMExHOXNaSFpoYkhWbExHNWxkMDlpYW1WamRGdHJaWGxkTEd0bGVYQmhkR2dwTzF4eVhHNWNkRngwWEhSY2RGeDBYSFI5WEhKY2JseDBYSFJjZEZ4MFhIUjlLVHRjY2x4dVhIUmNkRngwWEhSOUlHVnNjMlVnYVdZb2IyeGtUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMEtTQjdYSEpjYmx4MFhIUmNkRngwWEhSMllYSWdiMnhrYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0c5c1pFOWlhbVZqZENrN1hISmNibHgwWEhSY2RGeDBYSFJ2YkdSclpYbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hMlY1S1NCN1hISmNibHgwWEhSY2RGeDBYSFJjZEhaaGNpQmphR0Z1WjJVZ1BTQW9ibVYzVDJKcVpXTjBQVDA5Ym5Wc2JDQS9JRndpZFhCa1lYUmxYQ0lnT2lCY0ltUmxiR1YwWlZ3aUtTeGNjbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUnJaWGx3WVhSb0lEMGdjR0YwYUNBcklGd2lMbHdpSUNzZ2EyVjVPMXh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRnh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmphR0Z1WjJWekxuQjFjMmdvZTI1aGJXVTZibUZ0WlN4dlltcGxZM1E2Y205dmRFOWlhbVZqZEN4MGVYQmxPbU5vWVc1blpTeHZiR1JXWVd4MVpUcHZiR1JQWW1wbFkzUmJhMlY1WFN4dVpYZFdZV3gxWlRwdVpYZFBZbXBsWTNRc2EyVjVjR0YwYURwclpYbHdZWFJvZlNrN1hISmNibHgwWEhSY2RGeDBYSFJjZEhKbFkzVnljMlVvYm1GdFpTeHliMjkwVDJKcVpXTjBMRzlzWkU5aWFtVmpkRnRyWlhsZExIVnVaR1ZtYVc1bFpDeHJaWGx3WVhSb0tUdGNjbHh1WEhSY2RGeDBYSFJjZEgwcE8xeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwZlZ4eVhHNWNkRngwWEhSamFHRnVaMlZ6WlhRdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloamFHRnVaMlVwSUh0Y2NseHVYSFJjZEZ4MFhIUjJZWElnYTJWNWNHRjBhQ0E5SUNod1lYSjBjeTVzWlc1bmRHZytNQ0EvSUhCaGNuUnpMbXB2YVc0b1hDSXVYQ0lwSUNzZ1hDSXVYQ0lnT2lCY0lsd2lLU0FySUdOb1lXNW5aUzV1WVcxbE8xeHlYRzVjY2x4dVhIUmNkRngwWEhScFppQW9ZMmhoYm1kbExuUjVjR1VnUFQwOUlGd2lkWEJrWVhSbFhDSWdmSHdnWTJoaGJtZGxMblI1Y0dVZ1BUMDlJRndpWVdSa1hDSXBJSHNnWEhKY2JseDBYSFJjZEZ4MFhIUnlaVzlpYzJWeWRtVW9ZMmhoYm1kbExtOWlhbVZqZEN3Z2NHRnlkSE1wTzF4eVhHNWNkRngwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEZ4MFkyaGhibWRsY3k1d2RYTm9LSHR1WVcxbE9tTm9ZVzVuWlM1dVlXMWxMRzlpYW1WamREcGphR0Z1WjJVdWIySnFaV04wTEhSNWNHVTZZMmhoYm1kbExuUjVjR1VzYjJ4a1ZtRnNkV1U2WTJoaGJtZGxMbTlzWkZaaGJIVmxMRzVsZDFaaGJIVmxPbU5vWVc1blpTNXZZbXBsWTNSYlkyaGhibWRsTG01aGJXVmRMR3RsZVhCaGRHZzZhMlY1Y0dGMGFIMHBPMXh5WEc1Y2RGeDBYSFJjZEhKbFkzVnljMlVvWTJoaGJtZGxMbTVoYldVc1kyaGhibWRsTG05aWFtVmpkQ3hqYUdGdVoyVXViMnhrVm1Gc2RXVXNZMmhoYm1kbExtOWlhbVZqZEZ0amFHRnVaMlV1Ym1GdFpWMHNhMlY1Y0dGMGFDazdYSEpjYmx4MFhIUmNkSDBwTzF4eVhHNWNkRngwWEhSallXeHNZbUZqYXloamFHRnVaMlZ6S1R0Y2NseHVYSFJjZEgwcE8xeHlYRzVjZEZ4MGNtVjBkWEp1SUc5aWMyVnlkbVZrTzF4eVhHNWNkSDA3WEhKY2JuMHBLQ2s3WEhKY2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5d2NtOTRlUzF2WW5ObGNuWmxMMmx1WkdWNExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNVGhjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lEY2lMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNibWx0Y0c5eWRDQkVZWFJoVDJKcVpXTjBJR1p5YjIwZ0p5NHZSR0YwWVU5aWFtVmpkQ2M3WEc1cGJYQnZjblFnUkdGMFlVOWlhbVZqZEVOb2FXeGtJR1p5YjIwZ0p5NHZSR0YwWVU5aWFtVmpkRU5vYVd4a0p6dGNibHh1YkdWMElFWnBiSFJsY2xSNWNHVWdQU0I3UVU1Wk9pQW5ZVzU1Snl3Z1UxUkJVbFE2SUNkemRHRnlkQ2NzSUVWWVFVTlVPaUFuWlhoaFkzUW5mVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZMnhoYzNNZ2NtVjBkWEp1WldRZ1puSnZiU0IwYUdVZ1UzbHVZMmhsY2lCemRXSnpZM0pwWW1VZ1kyRnNiQzVjYmlBcUlGUnZJR0psSUhWelpXUWdZWE1nWVc0Z2IySnpaWEoyWVhScGIyNGdjRzlwYm5RZ1puSnZiU0JoSUVSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2lCamFHRnVaMlV1WEc0Z0tpOWNibU5zWVhOeklFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpQmxlSFJsYm1SeklFUmhkR0ZQWW1wbFkzUWdMeW9nYVcxd2JHVnRaVzUwY3lCVGVXNWpVM1JoZEhWeklDb3ZJSHRjYmlBZ0x5b2djSEpwZG1GMFpWeHVJQ0JmWTJoaGJtZGxUR2x6ZEdWdVpYSTZJRTF6WjB4cGMzUmxibVZ5WEc1Y2JpQWdMUzB0TFdWMlpXNTBJR2hoYm1Sc1pYSnpMUzB0TFZ4dUlDQmZabWxzZEdWeWN6b2dlenhtYVd4MFpYSStPaUI3ZEhsd1pUb2dQSE4wWVhKMExDQmxlR0ZqZEQ0c0lHTmhiR3hpWVdOck9pQThablZ1WTNScGIyNCtmU0I5WEc0Z0lDb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQnBaMjV2Y21WY2JpQWdJQ29nVTJodmRXeGtJRzV2ZENCaVpTQjFjMlZrSUdScGNtVmpkR3g1SUdKNUlFaDVjR1Z5ZEdsbGN5NGdTWFFuY3lCallXeHNaV1FnWW5rZ2RHaGxJRk41Ym1Ob1pYSXVjM1ZpYzJOeWFXSmxJRzFsZEdodlpGeHVJQ0FnS2k5Y2JseHVJQ0F2TDFSUFJFODZJRVp2Y2lCR2RYSjBhR1Z5SUZOMGRXUjVYRzRnSUdOdmJuTjBjblZqZEc5eUtITjVibU5vWlhJc0lIVnliQ3dnYzJOb1pXMWhMQ0JwYm1sMGFXRnNVM1JoZEhWekxDQnBibWwwYVdGc1JHRjBZU3dnWTJocGJHUnlaVzV6TENCcGJtbDBhV0ZzVm1WeWMybHZiaXdnYlhWMGRXRnNLU0I3WEc0Z0lDQWdjM1Z3WlhJb2MzbHVZMmhsY2l3Z2RYSnNMQ0J6WTJobGJXRXNJR2x1YVhScFlXeFRkR0YwZFhNc0lHbHVhWFJwWVd4RVlYUmhMbVJoZEdFc0lHTm9hV3hrY21WdWN5d2diWFYwZFdGc0tUdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYM1psY25OcGIyNGdQU0JwYm1sMGFXRnNWbVZ5YzJsdmJqdGNiaUFnSUNCZmRHaHBjeTVmWm1sc2RHVnljeUE5SUh0OU8xeHVYRzRnSUNBZ1gzUm9hWE11WDNONWJtTlBZbW91YjJKelpYSjJaU2dvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDl2YmtacGJIUmxjaWhsZG1WdWRDazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMM05sZEhWd0lHTm9hV3hrY21WdWN5QmtZWFJoSUdaeWIyMGdjM1ZpYzJOeWFYQjBhVzl1WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vYVc1cGRHbGhiRVJoZEdFdVkyaHBiR1J5Wlc1ektTNW1iM0pGWVdOb0tDaGphR2xzWkVsa0tTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ1kyaHBiR1JFWVhSaElEMGdhVzVwZEdsaGJFUmhkR0V1WTJocGJHUnlaVzV6VzJOb2FXeGtTV1JkTzF4dUlDQWdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUMkpxWldOMGMxdGphR2xzWkVsa1hTQTlJRzVsZHlCRVlYUmhUMkpxWldOMFEyaHBiR1FvWDNSb2FYTXNJR05vYVd4a1NXUXNJR05vYVd4a1JHRjBZU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JmZEdocGN5NWZZV3hzYjJOaGRHVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ2ZWeHVYRzRnSUY5aGJHeHZZMkYwWlV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNCemRYQmxjaTVmWVd4c2IyTmhkR1ZNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyTm9ZVzVuWlV4cGMzUmxibVZ5SUQwZ1gzUm9hWE11WDJKMWN5NWhaR1JNYVhOMFpXNWxjaWhmZEdocGN5NWZkWEpzSUNzZ0p5OWphR0Z1WjJWekp5d2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0cxelp5NTBlWEJsSUQwOVBTQW5kWEJrWVhSbEp5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJHRjBZVTlpYW1WamRFOWljMlZ5ZG1WeUxTY2dLeUJmZEdocGN5NWZkWEpzSUNzZ0p5MVNRMVk2SUNjc0lHMXpaeWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVlBZbXBsWTNRb1gzUm9hWE11WDNONWJtTlBZbW9zSUcxelp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0J6ZFhCbGNpNWZjbVZzWldGelpVeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmWTJoaGJtZGxUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1Wc1pXRnpaU0JoYm1RZ1pHVnNaWFJsSUc5aWFtVmpkQ0JrWVhSaFhHNGdJQ0FxTDF4dUlDQmtaV3hsZEdVb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5emVXNWphR1Z5TGw5dlluTmxjblpsY25OYlgzUm9hWE11WDNWeWJGMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1Wc1pXRnpaU0JoYm1RZ1pHVnNaWFJsSUc5aWFtVmpkQ0JrWVhSaFhHNGdJQ0FxTDF4dUlDQjFibk4xWW5OamNtbGlaU2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTlHVEU5WExVOVZWRG9nZEdocGN5QnRaWE56WVdkbElIZHBiR3dnWW1VZ2MyVnVkQ0IwYnlCMGFHVWdjblZ1ZEdsdFpTQnBibk4wWVc1alpTQnZaaUJUZVc1amFHVnlUV0Z1WVdkbGNpQXRQaUJmYjI1TWIyTmhiRlZ1VTNWaWMyTnlhV0psWEc0Z0lDQWdiR1YwSUhWdVUzVmljMk55YVdKbFRYTm5JRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2dKM1Z1YzNWaWMyTnlhV0psSnl3Z1puSnZiVG9nWDNSb2FYTXVYMjkzYm1WeUxDQjBiem9nWDNSb2FYTXVYM041Ym1Ob1pYSXVYM04xWWxWU1RDeGNiaUFnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklGOTBhR2x6TGw5MWNtd2dmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0hWdVUzVmljMk55YVdKbFRYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEVZWFJoVDJKcVpXTjBUMkp6WlhKMlpYSXRWVTVUVlVKVFExSkpRa1U2SUNjc0lISmxjR3g1S1R0Y2JpQWdJQ0FnSUdsbUlDaHlaWEJzZVM1aWIyUjVMbU52WkdVZ1BUMDlJREl3TUNrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNtVnNaV0Z6WlV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1gzUm9hWE11WDNONWJtTm9aWEl1WDI5aWMyVnlkbVZ5YzF0ZmRHaHBjeTVmZFhKc1hUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldkcGMzUmxjaUIwYUdVZ1kyaGhibWRsSUd4cGMzUmxibVZ5Y3lCelpXNTBJR0o1SUhSb1pTQnlaWEJ2Y25SbGNseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWm1sc2RHVnlJQzBnUm1sc2RHVnlJSFJvWVhRZ2FXUmxiblJwWm1sbGN5QjBhR1VnWm1sbGJHUWdLSE5sY0dGeVlYUmxaQ0JrYjNRZ2NHRjBhQ2t1SUVGalkyVndkSE1nS2lCaGRDQjBhR1VnWlc1a0lHWnZjaUJoSUcxdmNtVWdkVzV5WlhOMGNtbGpkR1ZrSUdacGJIUmxjbWx1Wnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZiaWhsZG1WdWREb2dUWE5uUlhabGJuUXBmU0JqWVd4c1ltRmphMXh1SUNBZ0tpOWNiaUFnYjI1RGFHRnVaMlVvWm1sc2RHVnlMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJR3hsZENCclpYa2dQU0JtYVd4MFpYSTdYRzRnSUNBZ2JHVjBJR1pwYkhSbGNrOWlhaUE5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJRVpwYkhSbGNsUjVjR1V1UlZoQlExUXNYRzRnSUNBZ0lDQmpZV3hzWW1GamF6b2dZMkZzYkdKaFkydGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2JHVjBJR2xrZUNBOUlHWnBiSFJsY2k1cGJtUmxlRTltS0NjcUp5azdYRzRnSUNBZ2FXWWdLR2xrZUNBOVBUMGdabWxzZEdWeUxteGxibWQwYUNBdElERXBJSHRjYmlBZ0lDQWdJR2xtSUNocFpIZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdabWxzZEdWeVQySnFMblI1Y0dVZ1BTQkdhV3gwWlhKVWVYQmxMa0ZPV1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdacGJIUmxjazlpYWk1MGVYQmxJRDBnUm1sc2RHVnlWSGx3WlM1VFZFRlNWRHRjYmlBZ0lDQWdJQ0FnYTJWNUlEMGdabWxzZEdWeUxuTjFZbk4wY2lnd0xDQm1hV3gwWlhJdWJHVnVaM1JvSUMwZ01TazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmWm1sc2RHVnljMXRyWlhsZElEMGdabWxzZEdWeVQySnFPMXh1SUNCOVhHNWNiaUFnWDI5dVJtbHNkR1Z5S0dWMlpXNTBLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLRjkwYUdsekxsOW1hV3gwWlhKektTNW1iM0pGWVdOb0tDaHJaWGtwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0JtYVd4MFpYSWdQU0JmZEdocGN5NWZabWxzZEdWeWMxdHJaWGxkTzF4dUlDQWdJQ0FnYVdZZ0tHWnBiSFJsY2k1MGVYQmxJRDA5UFNCR2FXeDBaWEpVZVhCbExrRk9XU2tnZTF4dUlDQWdJQ0FnSUNBdkwyMWhkR05vSUdGdWVYUm9hVzVuWEc0Z0lDQWdJQ0FnSUdacGJIUmxjaTVqWVd4c1ltRmpheWhsZG1WdWRDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1pwYkhSbGNpNTBlWEJsSUQwOVBTQkdhV3gwWlhKVWVYQmxMbE5VUVZKVUtTQjdYRzRnSUNBZ0lDQWdJQzh2YVdZZ2MzUmhjblJ6SUhkcGRHZ2dabWxzZEdWeUxpNHVYRzRnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVtYVdWc1pDNXBibVJsZUU5bUtHdGxlU2tnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCbWFXeDBaWEl1WTJGc2JHSmhZMnNvWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dacGJIUmxjaTUwZVhCbElEMDlQU0JHYVd4MFpYSlVlWEJsTGtWWVFVTlVLU0I3WEc0Z0lDQWdJQ0FnSUM4dlpYaGhZM1FnYldGMFkyaGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbVpwWld4a0lEMDlQU0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0JtYVd4MFpYSXVZMkZzYkdKaFkyc29aWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDNONWJtTm9aWEl2UkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5TG1weklpd2lMeW9xWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hHNHFYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRxWEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHFYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaW9xTDF4dVhHNXBiWEJ2Y25RZ1JHRjBZVTlpYW1WamRDQm1jbTl0SUNjdUwwUmhkR0ZQWW1wbFkzUW5PMXh1YVcxd2IzSjBJSHNnWkdWbGNFTnNiMjVsSUgwZ1puSnZiU0FuTGk0dmRYUnBiSE12ZFhScGJITXVhbk1uTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JqYkdGemN5QnlaWFIxY201bFpDQm1jbTl0SUhSb1pTQlRlVzVqYUdWeUlHTnlaV0YwWlNCallXeHNMbHh1SUNvZ1ZHOGdZbVVnZFhObFpDQmhjeUJoSUhKbGNHOXlkR1Z5SUhCdmFXNTBMQ0JqYUdGdVoyVnpJSGRwYkd3Z1ltVWdjM1ZpYldsMFpXUWdkRzhnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUdsdWMzUmhibU5sY3k1Y2JpQXFMMXh1WTJ4aGMzTWdSR0YwWVU5aWFtVmpkRkpsY0c5eWRHVnlJR1Y0ZEdWdVpITWdSR0YwWVU5aWFtVmpkQ0F2S2lCcGJYQnNaVzFsYm5SeklGTjVibU5UZEdGMGRYTWdLaThnZTF4dUlDQXZLaUJ3Y21sMllYUmxYRzRnSUY5emRXSnpZM0pwY0hScGIyNXpPaUE4YUhsd1pYSjBlVlZ5YkRvZ2V5QnpkR0YwZFhNNklITjBjbWx1WnlCOUlIMCtYRzVjYmlBZ0xTMHRMV1YyWlc1MElHaGhibVJzWlhKekxTMHRMVnh1SUNCZmIyNVRkV0p6WTNKcGNIUnBiMjVJWVc1a2JHVnlPaUFvWlhabGJuUXBJRDArSUhadmFXUmNiaUFnWDI5dVVtVnpjRzl1YzJWSVlXNWtiR1Z5T2lBb1pYWmxiblFwSUQwK0lIWnZhV1JjYmlBZ1gyOXVVbVZoWkVoaGJtUnNaWEk2SUNobGRtVnVkQ2tnUFQ0Z2RtOXBaRnh1SUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWFXZHViM0psWEc0Z0lDQXFJRk5vYjNWc1pDQnViM1FnWW1VZ2RYTmxaQ0JrYVhKbFkzUnNlU0JpZVNCSWVYQmxjblJwWlhNdUlFbDBKM01nWTJGc2JHVmtJR0o1SUhSb1pTQlRlVzVqYUdWeUxtTnlaV0YwWlNCdFpYUm9iMlJjYmlBZ0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtITjVibU5vWlhJc0lIVnliQ3dnYzJOb1pXMWhMQ0JwYm1sMGFXRnNVM1JoZEhWekxDQnBibWwwYVdGc1JHRjBZU3dnWTJocGJHUnlaVzV6S1NCN1hHNGdJQ0FnYzNWd1pYSW9jM2x1WTJobGNpd2dkWEpzTENCelkyaGxiV0VzSUdsdWFYUnBZV3hUZEdGMGRYTXNJR2x1YVhScFlXeEVZWFJoTENCamFHbHNaSEpsYm5NcE8xeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlIdDlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjVibU5QWW1vdWIySnpaWEoyWlNnb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RFWVhSaFQySnFaV04wVW1Wd2IzSjBaWEl0SnlBcklIVnliQ0FySUNjdFUwVk9SRG9nSnl3Z1pYWmxiblFwTzF4dUlDQWdJQ0FnWDNSb2FYTXVYMjl1UTJoaGJtZGxLR1YyWlc1MEtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lGOTBhR2x6TGw5aGJHeHZZMkYwWlV4cGMzUmxibVZ5Y3lncE8xeHVJQ0I5WEc1Y2JpQWdYMkZzYkc5allYUmxUR2x6ZEdWdVpYSnpLQ2tnZTF4dUlDQWdJSE4xY0dWeUxsOWhiR3h2WTJGMFpVeHBjM1JsYm1WeWN5Z3BPMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmYjJKcVpXTjBUR2x6ZEdWdVpYSWdQU0JmZEdocGN5NWZZblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOTBhR2x6TGw5MWNtd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRVlYUmhUMkpxWldOMExTY2dLeUJmZEdocGN5NWZkWEpzSUNzZ0p5MVNRMVk2SUNjc0lHMXpaeWs3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLRzF6Wnk1MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psYzNCdmJuTmxKem9nWDNSb2FYTXVYMjl1VW1WemNHOXVjMlVvYlhObktUc2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNKbFlXUW5PaUJmZEdocGN5NWZiMjVTWldGa0tHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYzNWd1pYSXVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDI5aWFtVmpkRXhwYzNSbGJtVnlMbkpsYlc5MlpTZ3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGJtUWdhVzUyYVhSaGRHbHZibk1nS0dOeVpXRjBaU0J0WlhOellXZGxjeWtnZEc4Z2FIbHdaWEowYVdWekxDQnZZbk5sY25abGNuTWdiR2x6ZEM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3U0hsd1pYSjBlVlZTVEZ0ZGZTQnZZbk5sY25abGNuTWdUR2x6ZENCdlppQkllWEJsY25SNUlGVlNUQ2R6WEc0Z0lDQXFMMXh1SUNCcGJuWnBkR1ZQWW5ObGNuWmxjbk1vYjJKelpYSjJaWEp6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2Umt4UFZ5MVBWVlE2SUhSb2FYTWdiV1Z6YzJGblpTQjNhV3hzSUdKbElITmxiblFnZEc4Z2RHaGxJSEoxYm5ScGJXVWdhVzV6ZEdGdVkyVWdiMllnVTNsdVkyaGxjazFoYm1GblpYSWdMVDRnWDI5dVEzSmxZWFJsWEc0Z0lDQWdiR1YwSUdsdWRtbDBaVTF6WnlBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkamNtVmhkR1VuTENCbWNtOXRPaUJmZEdocGN5NWZjM2x1WTJobGNpNWZiM2R1WlhJc0lIUnZPaUJmZEdocGN5NWZjM2x1WTJobGNpNWZjM1ZpVlZKTUxGeHVJQ0FnSUNBZ1ltOWtlVG9nZXlCeVpYTjFiV1U2SUdaaGJITmxMQ0J5WlhOdmRYSmpaVG9nWDNSb2FYTXVYM1Z5YkN3Z2MyTm9aVzFoT2lCZmRHaHBjeTVmYzJOb1pXMWhMQ0IyWVd4MVpUb2dYM1JvYVhNdVgzTjVibU5QWW1vdVpHRjBZU3dnWVhWMGFHOXlhWE5sT2lCdlluTmxjblpsY25NZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLR2x1ZG1sMFpVMXpaeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnNaV0Z6WlNCaGJtUWdaR1ZzWlhSbElHOWlhbVZqZENCa1lYUmhYRzRnSUNBcUwxeHVJQ0JrWld4bGRHVW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJSFJvYVhNZ2JXVnpjMkZuWlNCM2FXeHNJR0psSUhObGJuUWdkRzhnZEdobElISjFiblJwYldVZ2FXNXpkR0Z1WTJVZ2IyWWdVM2x1WTJobGNrMWhibUZuWlhJZ0xUNGdYMjl1UkdWc1pYUmxYRzRnSUNBZ2JHVjBJR1JsYkdWMFpVMXpaeUE5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJQ2RrWld4bGRHVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmIzZHVaWElzSUhSdk9pQmZkR2hwY3k1ZmMzbHVZMmhsY2k1ZmMzVmlWVkpNTEZ4dUlDQWdJQ0FnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nWDNSb2FYTXVYM1Z5YkNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9aR1ZzWlhSbFRYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSXRSRVZNUlZSRk9pQW5MQ0J5WlhCc2VTazdYRzRnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXplVzVqYUdWeUxsOXlaWEJ2Y25SbGNuTmJYM1JvYVhNdVgzVnliRjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UzVmljMk55YVhCMGFXOXVjeUJ5WlhGMVpYTjBaV1FnWVc1a0lHRmpZMlZ3ZEdWa0lIUnZJSFJvYVhNZ2NtVndiM0owWlhKY2JpQWdJQ29nUUhSNWNHVWdlMDlpYW1WamREeEllWEJsY25SNVZWSk1MQ0JUZVc1alUzVmljMk55YVhCMGFXOXVQbjFjYmlBZ0lDb3ZYRzRnSUdkbGRDQnpkV0p6WTNKcGNIUnBiMjV6S0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWN6c2dmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFIxY0NCMGFHVWdZMkZzYkdKaFkyc2dkRzhnY0hKdlkyVnpjeUJ6ZFdKelkzSnBZbVVnWVc1a0lIVnVjM1ZpYzJOeWFXSmxJRzV2ZEdsbWFXTmhkR2x2Ym5OY2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZiaWhsZG1WdWREb2dUWE5uUlhabGJuUXBmU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwYnlCeVpXTmxhWFpsSUdWMlpXNTBjMXh1SUNBZ0tpOWNiaUFnYjI1VGRXSnpZM0pwY0hScGIyNG9ZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjBhR2x6TGw5dmJsTjFZbk5qY21sd2RHbHZia2hoYm1Sc1pYSWdQU0JqWVd4c1ltRmphenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUjFjQ0IwYUdVZ1kyRnNiR0poWTJzZ2RHOGdjSEp2WTJWemN5QnlaWE53YjI1elpTQnViM1JwWm1sallYUnBiMjV6SUc5bUlIUm9aU0JqY21WaGRHVW5jMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dUtHVjJaVzUwT2lCTmMyZEZkbVZ1ZENsOUlHTmhiR3hpWVdOcklHWjFibU4wYVc5dUlIUnZJSEpsWTJWcGRtVWdaWFpsYm5SelhHNGdJQ0FxTDF4dUlDQnZibEpsYzNCdmJuTmxLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdkR2hwY3k1ZmIyNVNaWE53YjI1elpVaGhibVJzWlhJZ1BTQmpZV3hzWW1GamF6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSMWNDQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z2NISnZZMlZ6Y3lCeVpXRmtJRzV2ZEdsbWFXTmhkR2x2Ym5OY2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZiaWhsZG1WdWREb2dUWE5uUlhabGJuUXBmU0JqWVd4c1ltRmphMXh1SUNBZ0tpOWNiaUFnYjI1U1pXRmtLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdkR2hwY3k1ZmIyNVNaV0ZrU0dGdVpHeGxjaUE5SUdOaGJHeGlZV05yTzF4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnY0dGeVpXNTBJRk41Ym1Ob1pYSWdMVDRnWDI5dVJtOXlkMkZ5WkZ4dUlDQmZiMjVHYjNKM1lYSmtLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUxWSkRWam9nSnl3Z2JYTm5LVHRjYmlBZ0lDQnpkMmwwWTJnZ0tHMXpaeTVpYjJSNUxuUjVjR1VwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKM04xWW5OamNtbGlaU2M2SUY5MGFHbHpMbDl2YmxOMVluTmpjbWxpWlNodGMyY3BPeUJpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjNWdWMzVmljMk55YVdKbEp6b2dYM1JvYVhNdVgyOXVWVzVUZFdKelkzSnBZbVVvYlhObktUc2dZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnZEdocGN5QXRQaUJmYjI1R2IzSjNZWEprT2lCbGJXbDBkR1ZrSUdKNUlHRWdjbVZ0YjNSbElGTjVibU5vWlhJZ0xUNGdjM1ZpYzJOeWFXSmxYRzRnSUY5dmJsTjFZbk5qY21saVpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JvZVhCbGNuUjVWWEpzSUQwZ2JYTm5MbUp2WkhrdVpuSnZiVHRjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzBSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2k1ZmIyNVRkV0p6WTNKcFltVmRKeXdnYlhObktUdGNibHh1SUNBZ0lHeGxkQ0JsZG1WdWRDQTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklHMXpaeTVpYjJSNUxuUjVjR1VzWEc0Z0lDQWdJQ0IxY213NklHaDVjR1Z5ZEhsVmNtd3NYRzVjYmlBZ0lDQWdJR2xrWlc1MGFYUjVPaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlU3hjYmx4dUlDQWdJQ0FnWVdOalpYQjBPaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQzh2WTNKbFlYUmxJRzVsZHlCemRXSnpZM0pwY0hScGIyNWNiaUFnSUNBZ0lDQWdiR1YwSUhOMVlpQTlJSHNnZFhKc09pQm9lWEJsY25SNVZYSnNMQ0J6ZEdGMGRYTTZJQ2R2YmljZ2ZUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iYUhsd1pYSjBlVlZ5YkYwZ1BTQnpkV0k3WEc1Y2JpQWdJQ0FnSUNBZ0x5OXdjbTlqWlhOeklHRnVaQ0J6Wlc1a0lHTm9hV3hrY21WdWN5QmtZWFJoWEc0Z0lDQWdJQ0FnSUd4bGRDQmphR2xzWkhKbGJsWmhiSFZsY3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loZmRHaHBjeTVmWTJocGJHUnlaVzVQWW1wbFkzUnpLUzVtYjNKRllXTm9LQ2hqYUdsc1pFbGtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdOb2FXeGtSR0YwWVNBOUlGOTBhR2x6TGw5amFHbHNaSEpsYms5aWFtVmpkSE5iWTJocGJHUkpaRjB1WkdGMFlUdGNiaUFnSUNBZ0lDQWdJQ0JqYUdsc1pISmxibFpoYkhWbGMxdGphR2xzWkVsa1hTQTlJR1JsWlhCRGJHOXVaU2hqYUdsc1pFUmhkR0VwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2MyVnVaRTF6WnlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCbWNtOXRPaUJ0YzJjdWRHOHNJSFJ2T2lCdGMyY3Vabkp2YlN4Y2JpQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURJd01Dd2djMk5vWlcxaE9pQmZkR2hwY3k1ZmMyTm9aVzFoTENCMlpYSnphVzl1T2lCZmRHaHBjeTVmZG1WeWMybHZiaXdnZG1Gc2RXVTZJSHNnWkdGMFlUb2daR1ZsY0VOc2IyNWxLRjkwYUdsekxtUmhkR0VwTENCamFHbHNaSEpsYm5NNklHTm9hV3hrY21WdVZtRnNkV1Z6SUgwZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUM4dlZFOUVUem9nUm05eUlFWjFjblJvWlhJZ1UzUjFaSGxjYmlBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtaGhjMDkzYmxCeWIzQmxjblI1S0NkdGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpY3BJQ1ltSUNGdGMyY3VZbTlrZVM1dGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhObGJtUk5jMmN1WW05a2VTNXRkWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiaUE5SUhSb2FYTXVYMjExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlEMGdiWE5uTG1KdlpIa3ViWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMM05sYm1RZ2Iyc2djbVZ6Y0c5dWMyVWdiV1Z6YzJGblpWeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0hObGJtUk5jMmNwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRXSTdYRzRnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0J5WldwbFkzUTZJQ2h5WldGemIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OXpaVzVrSUhKbGFtVmpkQ0J5WlhOd2IyNXpaU0J0WlhOellXZGxYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUcxelp5NW1jbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTkRBekxDQmtaWE5qT2lCeVpXRnpiMjRnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLRjkwYUdsekxsOXZibE4xWW5OamNtbHdkR2x2YmtoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFRWVUpUUTFKSlVGUkpUMDR0UlZaRlRsUTZJQ2NzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJRjkwYUdsekxsOXZibE4xWW5OamNtbHdkR2x2YmtoaGJtUnNaWElvWlhabGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIUm9hWE1nTFQ0Z1gyOXVSbTl5ZDJGeVpEb2daVzFwZEhSbFpDQmllU0JoSUhKbGJXOTBaU0JFWVhSaFQySnFaV04wVDJKelpYSjJaWElnTFQ0Z2RXNXpkV0p6WTNKcFltVmNiaUFnWDI5dVZXNVRkV0p6WTNKcFltVW9iWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnYUhsd1pYSjBlVlZ5YkNBOUlHMXpaeTVpYjJSNUxtWnliMjA3WEc1Y2JpQWdJQ0JzWlhRZ2MzVmlJRDBnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmFIbHdaWEowZVZWeWJGMDdYRzRnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcyaDVjR1Z5ZEhsVmNteGRPMXh1WEc0Z0lDQWdiR1YwSUdWMlpXNTBJRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2diWE5uTG1KdlpIa3VkSGx3WlN4Y2JpQWdJQ0FnSUhWeWJEb2dhSGx3WlhKMGVWVnliQ3hjYmlBZ0lDQWdJRzlpYW1WamREb2djM1ZpWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNoZmRHaHBjeTVmYjI1VGRXSnpZM0pwY0hScGIyNUlZVzVrYkdWeUtTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVlU0dFUxVkNVME5TU1ZCVVNVOU9MVVZXUlU1VU9pQW5MQ0JsZG1WdWRDazdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmIyNVRkV0p6WTNKcGNIUnBiMjVJWVc1a2JHVnlLR1YyWlc1MEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMMFpNVDFjdFNVNDZJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdabkp2YlNCU1pYQnZjblJsY2xWU1RDQmhaR1J5WlhOek9pQmxiV2wwWldRZ1lua2dZU0J5WlcxdmRHVWdVM2x1WTJobGNpQXRQaUJmYjI1U1pXMXZkR1ZEY21WaGRHVWdMVDRnWlhabGJuUXVZV05yWEc0Z0lGOXZibEpsYzNCdmJuTmxLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ1pYWmxiblFnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUJ0YzJjdWRIbHdaU3hjYmlBZ0lDQWdJSFZ5YkRvZ2JYTm5MbVp5YjIwc1hHNGdJQ0FnSUNCamIyUmxPaUJ0YzJjdVltOWtlUzVqYjJSbFhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZmIyNVNaWE53YjI1elpVaGhibVJzWlhJcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RTUlZOUVQwNVRSUzFGVmtWT1ZEb2dKeXdnWlhabGJuUXBPMXh1SUNBZ0lDQWdYM1JvYVhNdVgyOXVVbVZ6Y0c5dWMyVklZVzVrYkdWeUtHVjJaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkwwWk1UMWN0U1U0NklHMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0JTWlhCdmNuUmxjbFZTVENCaFpHUnlaWE56T2lCbGJXbDBaV1FnWW5rZ1lTQnlaVzF2ZEdVZ1UzbHVZMmhsY2lBdFBpQnlaV0ZrWEc0Z0lGOXZibEpsWVdRb2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0JsZG1WdWRDQTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklHMXpaeTUwZVhCbExGeHVJQ0FnSUNBZ2RYSnNPaUJ0YzJjdVpuSnZiU3hjYmx4dUlDQWdJQ0FnWVdOalpYQjBPaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUcxelp5NW1jbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTWpBd0xDQjJZV3gxWlRvZ1pHVmxjRU5zYjI1bEtGOTBhR2x6TG1SaGRHRXBJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQnlaV3BsWTNRNklDaHlaV0Z6YjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJQ0FnYVdRNklHMXpaeTVwWkN3Z2RIbHdaVG9nSjNKbGMzQnZibk5sSnl3Z1puSnZiVG9nYlhObkxuUnZMQ0IwYnpvZ2JYTm5MbVp5YjIwc1hHNGdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBME1ERXNJR1JsYzJNNklISmxZWE52YmlCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnBaaUFvWDNSb2FYTXVYMjl1VW1WaFpFaGhibVJzWlhJcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RTUlVGRUxVVldSVTVVT2lBbkxDQmxkbVZ1ZENrN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYjI1U1pXRmtTR0Z1Wkd4bGNpaGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeU8xeHVYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dmMzSmpMM041Ym1Ob1pYSXZSR0YwWVU5aWFtVmpkRkpsY0c5eWRHVnlMbXB6SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1WEc1cGJYQnZjblFnVTNsdVkwOWlhbVZqZEN3Z2UwTm9ZVzVuWlZSNWNHVXNJRTlpYW1WamRGUjVjR1Y5SUdaeWIyMGdKeTR2VUhKdmVIbFBZbXBsWTNRbk8xeHVhVzF3YjNKMElFUmhkR0ZQWW1wbFkzUkRhR2xzWkNCbWNtOXRJQ2N1TDBSaGRHRlBZbXBsWTNSRGFHbHNaQ2M3WEc1cGJYQnZjblFnZTJSbFpYQkRiRzl1WlgwZ1puSnZiU0FuTGk0dmRYUnBiSE12ZFhScGJITXVhbk1uTzF4dVhHNHZLaXBjYmlBcUlFMWhhVzRnWlhoMFpXNXphVzl1SUdOc1lYTnpJR1p2Y2lCdlluTmxjblpsY25NZ1lXNWtJSEpsY0c5eWRHVnljeXdnZDJsMGFDQmpiMjF0YjI0Z2NISnZjR1Z5ZEdsbGN5QmhibVFnYldWMGFHOWtjeTVjYmlBcUlFTm9hV3hrY21WdUlHMWhibUZuWlcxbGJuUWdhWE1nWTI5dGJXOXVJR1p2Y2lCdlluTmxjblpsY25NZ1lXNWtJSEpsY0c5eWRHVnljeTVjYmlBcUwxeHVZMnhoYzNNZ1JHRjBZVTlpYW1WamRDQjdYRzRnSUM4cUlIQnlhWFpoZEdWY2JpQWdYM1psY25OcGIyNDZJRzUxYldKbGNseHVYRzRnSUY5dmQyNWxjam9nU0hsd1pYSjBlVlZTVEZ4dUlDQmZkWEpzT2lCUFltcGxZM1JWVWt4Y2JpQWdYM05qYUdWdFlUb2dVMk5vWlcxaFhHNGdJRjlpZFhNNklFMXBibWxDZFhOY2JpQWdYM04wWVhSMWN6b2diMjRnZkNCd1lYVnpaV1JjYmlBZ1gzTjVibU5QWW1vNklGTjVibU5FWVhSaFhHNWNiaUFnWDJOb2FXeGtjbVZ1T2lCN0lHbGtPaUJFWVhSaFQySnFaV04wUTJocGJHUWdmVnh1SUNCZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NNklGdE5jMmRNYVhOMFpXNWxjbDFjYmx4dUlDQXRMUzB0WlhabGJuUWdhR0Z1Wkd4bGNuTXRMUzB0WEc0Z0lGOXZia0ZrWkVOb2FXeGtTR0Z1Wkd4bGNqb2dLR1YyWlc1MEtTQTlQaUIyYjJsa1hHNGdJQ292WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJwWjI1dmNtVmNiaUFnSUNvZ1UyaHZkV3hrSUc1dmRDQmlaU0IxYzJWa0lHUnBjbVZqZEd4NUlHSjVJRWg1Y0dWeWRHbGxjeTRnU1hRbmN5QmpZV3hzWldRZ1lua2dkR2hsSUZONWJtTm9aWElnWTNKbFlYUmxJRzl5SUhOMVluTmpjbWxpWlNCdFpYUm9iMlFuYzF4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jM2x1WTJobGNpd2dkWEpzTENCelkyaGxiV0VzSUdsdWFYUnBZV3hUZEdGMGRYTXNJR2x1YVhScFlXeEVZWFJoTENCamFHbHNaSEpsYm5Nc0lHMTFkSFZoYkNBOUlIUnlkV1VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjVibU5vWlhJZ1BTQnplVzVqYUdWeU8xeHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQjFjbXc3WEc0Z0lDQWdYM1JvYVhNdVgzTmphR1Z0WVNBOUlITmphR1Z0WVR0Y2JpQWdJQ0JmZEdocGN5NWZjM1JoZEhWeklEMGdhVzVwZEdsaGJGTjBZWFIxY3p0Y2JpQWdJQ0JmZEdocGN5NWZjM2x1WTA5aWFpQTlJRzVsZHlCVGVXNWpUMkpxWldOMEtHbHVhWFJwWVd4RVlYUmhLVHRjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1eklEMGdZMmhwYkdSeVpXNXpPMXh1WEc0Z0lDQWdMeTlVVDBSUE9pQkdiM0lnUm5WeWRHaGxjaUJUZEhWa2VWeHVJQ0FnSUY5MGFHbHpMbDl0ZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2YmlBOUlHMTFkSFZoYkR0Y2JseHVJQ0FnSUY5MGFHbHpMbDkyWlhKemFXOXVJRDBnTUR0Y2JpQWdJQ0JmZEdocGN5NWZZMmhwYkdSSlpDQTlJREE3WEc0Z0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVQySnFaV04wY3lBOUlIdDlPMXh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3lBOUlGdGRPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyOTNibVZ5SUQwZ2MzbHVZMmhsY2k1ZmIzZHVaWEk3WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUhONWJtTm9aWEl1WDJKMWN6dGNiaUFnZlZ4dVhHNGdJRjloYkd4dlkyRjBaVXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdOb2FXeGtRbUZ6WlZWU1RDQTlJRjkwYUdsekxsOTFjbXdnS3lBbkwyTm9hV3hrY21WdUx5YzdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRFWVhSaElFOWlhbVZqZENBdElFRnNiRzlqWVhSbFRHbHpkR1Z1WlhKelhTQXRJQ2NzSUY5MGFHbHpMbDlqYUdsc1pISmxibk1wTzF4dUlDQWdJR2xtSUNoZmRHaHBjeTVmWTJocGJHUnlaVzV6S1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzV6TG1admNrVmhZMmdvS0dOb2FXeGtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqYUdsc1pGVlNUQ0E5SUdOb2FXeGtRbUZ6WlZWU1RDQXJJR05vYVd4a08xeHVJQ0FnSUNBZ0lDQnNaWFFnYkdsemRHVnVaWElnUFNCZmRHaHBjeTVmWW5WekxtRmtaRXhwYzNSbGJtVnlLR05vYVd4a1ZWSk1MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXBaMjV2Y21VZ2JYTm5JSE5sYm5RZ1lua2dhR2x0YzJWc1pseHVJQ0FnSUNBZ0lDQWdJR2xtSUNodGMyY3Vabkp2YlNBaFBUMGdkR2hwY3k1ZmIzZHVaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRVlYUmhUMkpxWldOMExVTm9hV3hrY21WdUxWSkRWam9nSnl3Z2JYTm5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2JYTm5MblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWTNKbFlYUmxKem9nWDNSb2FYTXVYMjl1UTJocGJHUkRjbVZoZEdVb2JYTm5LVHNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJSbGJHVjBaU2M2SUdOdmJuTnZiR1V1Ykc5bktHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQmZkR2hwY3k1ZlkyaGhibWRsUTJocGJHUnlaVzRvYlhObktUc2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzVNYVhOMFpXNWxjbk11Y0hWemFDaHNhWE4wWlc1bGNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVRHbHpkR1Z1WlhKekxtWnZja1ZoWTJnb0tHeHBjM1JsYm1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0JzYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJRTlpYW1WamRDNXJaWGx6S0Y5MGFHbHpMbDlqYUdsc1pISmxiazlpYW1WamRITXBMbVp2Y2tWaFkyZ29LR3RsZVNrZ1BUNGdlMXh1SUNBZ0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVQySnFaV04wYzF0clpYbGRMbDl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1QySnFaV04wSUZWU1RDQnZaaUJ5WlhCdmNuUmxjaUJ2Y2lCdlluTmxjblpsY2x4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMFZWSk1mVnh1SUNBZ0tpOWNiaUFnWjJWMElIVnliQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM1Z5YkRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCUFltcGxZM1FnYzJOb1pXMWhJRlZTVENBb2RHaHBjeUJtYVdWc1pDQnBjeUJ1YjNRZ2VXVjBJSE4wWVdKc1pTd2dZVzVrSUdseklITjFZbk5xWldOMElIUnZJR05vWVc1blpTbGNiaUFnSUNvZ1FIUjVjR1VnZTFOamFHVnRZVlZTVEgxY2JpQWdJQ292WEc0Z0lHZGxkQ0J6WTJobGJXRW9LU0I3SUhKbGRIVnliaUIwYUdsekxsOXpZMmhsYldFN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UzUmhkSFZ6SUc5bUlIUm9aU0J5WlhCdmNuUmxjaUJ2Y2lCdlluTmxjblpsY2lCamIyNXVaV04wYVc5dUlDaDBhR2x6SUdacFpXeGtJR2x6SUc1dmRDQjVaWFFnYzNSaFlteGxMQ0JoYm1RZ2FYTWdjM1ZpYzJwbFkzUWdkRzhnWTJoaGJtZGxLVnh1SUNBZ0tpQkFkSGx3WlNCN1UzUmhkSFZ6ZlNBdElFVnVkVzBnYjJZNklHOXVJSHdnY0dGMWMyVmtYRzRnSUNBcUwxeHVJQ0JuWlhRZ2MzUmhkSFZ6S0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmYzNSaGRIVnpPeUI5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJoZEdFZ2MzUnlkV04wZFhKbElIUnZJR0psSUhONWJtTm9jbTl1YVhwbFpDNWNiaUFnSUNvZ1FIUjVjR1VnZTBwVFQwNTlJQzBnU2xOUFRpQnpkSEoxWTNSMWNtVWdkR2hoZENCemFHOTFiR1FnWm05c2JHOTNJSFJvWlNCa1pXWnBibVZrSUhOamFHVnRZU3dnYVdZZ1lXNTVMbHh1SUNBZ0tpOWNiaUFnWjJWMElHUmhkR0VvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDl6ZVc1alQySnFMbVJoZEdFN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXeHNJR055WldGMFpXUWdZMmhwYkdSeVpXNG5jeUJ6YVc1alpTQjBhR1VnYzNWaWMyTnlhWEIwYVc5dUxDQmtiMlZ6YmlkMElHTnZiblJoYVc0Z1lXeHNJR05vYVd4a2NtVnVKM01nYzJsdVkyVWdjbVZ3YjNKMFpYSWdZM0psWVhScGIyNHVYRzRnSUNBcUlFQjBlWEJsSUh0UFltcGxZM1E4UTJocGJHUkpaQ3dnUkdGMFlVOWlhbVZqZEVOb2FXeGtQbjFjYmlBZ0lDb3ZYRzRnSUdkbGRDQmphR2xzWkhKbGJuTW9LU0I3SUhKbGRIVnliaUIwYUdsekxsOWphR2xzWkhKbGJrOWlhbVZqZEhNN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbG5ibTl5WlZ4dUlDQWdLaTljYmlBZ2NHRjFjMlVvS1NCN1hHNGdJQ0FnTHk5VVQwUlBPaUIwYUdseklHWmxZWFIxY21VZ2JtVmxaSE1nYlc5eVpTQmhibUZzYVhObFhHNGdJQ0FnZEdoeWIzY2dKMDV2ZENCcGJYQnNaVzFsYm5SbFpDYzdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUdsbmJtOXlaVnh1SUNBZ0tpOWNiaUFnY21WemRXMWxLQ2tnZTF4dUlDQWdJQzh2VkU5RVR6b2dkR2hwY3lCbVpXRjBkWEpsSUc1bFpXUnpJRzF2Y21VZ1lXNWhiR2x6WlZ4dUlDQWdJSFJvY205M0lDZE9iM1FnYVcxd2JHVnRaVzUwWldRbk8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJwWjI1dmNtVmNiaUFnSUNvdlhHNGdJSE4wYjNBb0tTQjdYRzRnSUNBZ0x5OVVUMFJQT2lCemFHOTFiR1FnY21WdGIzWmxJSFJvWlNCemRXSnpZM0pwY0hScGIyNGdZVzVrSUhObGJtUWdiV1Z6YzJGblpTQjFibk4xWW5OamNtbGlaVDljYmlBZ0lDQjBhSEp2ZHlBblRtOTBJR2x0Y0d4bGJXVnVkR1ZrSnp0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNWtJR0ZrWkNCaElFUmhkR0ZQWW1wbFkzUkRhR2xzWkNCMGJ5QmhJR05vYVd4a2NtVnVJR052Ykd4bFkzUnBiMjR1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmphR2xzWkhKbGJpQXRJRU5vYVd4a2NtVnVJRzVoYldVZ2QyaGxjbVVnZEdobElHTm9hV3hrSUdseklHRmtaR1ZrTGx4dUlDQWdLaUJBY0dGeVlXMGdlMHBUVDA1OUlHbHVhWFJwWVd4RVlYUmhJQzBnU1c1cGRHbGhiQ0JrWVhSaElHOW1JSFJvWlNCamFHbHNaRnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbFFtOWtlVWxrWlc1MGFYUjVmU0JwWkdWdWRHbDBlU0F0SUNodmNIUnBiMjVoYkNrZ2FXUmxiblJwZEhrZ1pHRjBZU0IwYnlCaVpTQmhaR1JsWkNCMGJ5QnBaR1Z1ZEdsMGVTQjBhR1VnZFhObGNpQnlaWEJ2Y25SbGNpNGdWRzhnWW1VZ2RYTmxaQ0JtYjNJZ2JHVm5ZV041SUdsa1pXNTBhWFJwWlhNdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlU4UkdGMFlVOWlhbVZqZEVOb2FXeGtQbjBnTFNCU1pYUjFjbTRnVUhKdmJXbHpaU0IwYnlCaElHNWxkeUJFWVhSaFQySnFaV04wUTJocGJHUXVYRzRnSUNBcUwxeHVJQ0JoWkdSRGFHbHNaQ2hqYUdsc1pISmxiaXdnYVc1cGRHbGhiRVJoZEdFc0lHbGtaVzUwYVhSNUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dlkzSmxZWFJsSUc1bGR5QmphR2xzWkNCMWJtbHhkV1VnU1VRc0lHSmhjMlZrSUc5dUlHaDVjR1Z5ZEhsVlVreGNiaUFnSUNCZmRHaHBjeTVmWTJocGJHUkpaQ3NyTzF4dUlDQWdJR3hsZENCdGMyZERhR2xzWkVsa0lEMGdYM1JvYVhNdVgyOTNibVZ5SUNzZ0p5TW5JQ3NnWDNSb2FYTXVYMk5vYVd4a1NXUTdYRzRnSUNBZ2JHVjBJRzF6WjBOb2FXeGtVR0YwYUNBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDJOb2FXeGtjbVZ1THljZ0t5QmphR2xzWkhKbGJqdGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJSFJvYVhNZ2JXVnpjMkZuWlNCM2FXeHNJR0psSUhObGJuUWdaR2x5WldOMGJIa2dkRzhnWVNCeVpYTnZkWEpqWlNCamFHbHNaQ0JoWkdSeVpYTnpPaUJOWlhOellXZGxRblZ6WEc0Z0lDQWdiR1YwSUhKbGNYVmxjM1JOYzJjZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lBblkzSmxZWFJsSnl3Z1puSnZiVG9nWDNSb2FYTXVYMjkzYm1WeUxDQjBiem9nYlhOblEyaHBiR1JRWVhSb0xGeHVJQ0FnSUNBZ1ltOWtlVG9nZXlCeVpYTnZkWEpqWlRvZ2JYTm5RMmhwYkdSSlpDd2dkbUZzZFdVNklHbHVhWFJwWVd4RVlYUmhJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0dsa1pXNTBhWFI1S1NBZ0lDQWdJSHNnY21WeGRXVnpkRTF6Wnk1aWIyUjVMbWxrWlc1MGFYUjVJRDBnYVdSbGJuUnBkSGs3SUgxY2JseHVJQ0FnSUM4dlZFOUVUem9nUm05eUlFWjFjblJvWlhJZ1UzUjFaSGxjYmlBZ0lDQnBaaUFvSVY5MGFHbHpMbDl0ZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2YmlrZ2NtVnhkV1Z6ZEUxelp5NWliMlI1TG0xMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlEMGdYM1JvYVhNdVgyMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVPMXh1WEc0Z0lDQWdMeTl5WlhSMWNtNXpJSEJ5YjIxcGMyVXNJR2x1SUhSb1pTQm1kWFIxY21Vc0lIUm9aU0JCVUVrZ2JXRjVJR05vWVc1blpTQjBieUJoYzNsdVkyaHliMjV2ZFhNZ1kyRnNiRnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElHMXpaMGxrSUQwZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h5WlhGMVpYTjBUWE5uS1R0Y2JseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55WldGMFpTMXlaWEJ2Y25SbGNpMWphR2xzWkNnZ0p5QXJJRjkwYUdsekxsOXZkMjVsY2lBcklDY2dLVG9nSnl3Z2NtVnhkV1Z6ZEUxelp5azdYRzRnSUNBZ0lDQnNaWFFnYm1WM1EyaHBiR1FnUFNCdVpYY2dSR0YwWVU5aWFtVmpkRU5vYVd4a0tGOTBhR2x6TENCdGMyZERhR2xzWkVsa0xDQnBibWwwYVdGc1JHRjBZU3dnWDNSb2FYTXVYMjkzYm1WeUxDQnRjMmRKWkNrN1hHNGdJQ0FnSUNCdVpYZERhR2xzWkM1dmJrTm9ZVzVuWlNnb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgyOXVRMmhoYm1kbEtHVjJaVzUwTENCN0lIQmhkR2c2SUcxelowTm9hV3hrVUdGMGFDd2dZMmhwYkdSSlpEb2diWE5uUTJocGJHUkpaQ0I5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1UFltcGxZM1J6VzIxelowTm9hV3hrU1dSZElEMGdibVYzUTJocGJHUTdYRzVjYmlBZ0lDQWdJSEpsYzI5c2RtVW9ibVYzUTJocGJHUXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRIVndJSFJvWlNCallXeHNZbUZqYXlCMGJ5QndjbTlqWlhOeklHTnlaV0YwWlNCaGJtUWdaR1ZzWlhSbElHOW1JR05vYVd4a2NtVnVjeTVjYmlBZ0lDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJpaGxkbVZ1ZERvZ1RYTm5SWFpsYm5RcGZTQmpZV3hzWW1GamExeHVJQ0FnS2k5Y2JpQWdiMjVCWkdSRGFHbHNaQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJSFJvYVhNdVgyOXVRV1JrUTJocGJHUnlaVzVJWVc1a2JHVnlJRDBnWTJGc2JHSmhZMnM3WEc0Z0lIMWNibHh1SUNBdkwwWk1UMWN0U1U0NklHMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0JoSUhKbGJXOTBaU0JFWVhSaFQySnFaV04wSUMwK0lHRmtaRU5vYVd4a1hHNGdJRjl2YmtOb2FXeGtRM0psWVhSbEtHMXpaeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJRzF6WjBOb2FXeGtTV1FnUFNCdGMyY3VZbTlrZVM1eVpYTnZkWEpqWlR0Y2JseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGpjbVZoZEdVdGIySnpaWEoyWlhJdFkyaHBiR1FvSUNjZ0t5QmZkR2hwY3k1ZmIzZHVaWElnS3lBbklDazZJQ2NzSUcxelp5azdYRzRnSUNBZ2JHVjBJRzVsZDBOb2FXeGtJRDBnYm1WM0lFUmhkR0ZQWW1wbFkzUkRhR2xzWkNoZmRHaHBjeXdnYlhOblEyaHBiR1JKWkN3Z2JYTm5MbUp2WkhrdWRtRnNkV1VwTzF4dUlDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJrOWlhbVZqZEhOYmJYTm5RMmhwYkdSSlpGMGdQU0J1WlhkRGFHbHNaRHRjYmx4dUlDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nZDJsc2JDQm1iRzkzSUhSdklFUmhkR0ZQWW1wbFkzUkRhR2xzWkNBdFBpQmZiMjVTWlhOd2IyNXpaVnh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hHNGdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzF6Wnk1bWNtOXRMRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklESXdNQ3dnYzI5MWNtTmxPaUJmZEdocGN5NWZiM2R1WlhJZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQnNaWFFnWlhabGJuUWdQU0I3WEc0Z0lDQWdJQ0IwZVhCbE9pQnRjMmN1ZEhsd1pTeGNiaUFnSUNBZ0lHWnliMjA2SUcxelp5NW1jbTl0TEZ4dUlDQWdJQ0FnZFhKc09pQnRjMmN1ZEc4c1hHNGdJQ0FnSUNCMllXeDFaVG9nYlhObkxtSnZaSGt1ZG1Gc2RXVXNYRzRnSUNBZ0lDQmphR2xzWkVsa09pQnRjMmREYUdsc1pFbGtMRnh1SUNBZ0lDQWdhV1JsYm5ScGRIazZJRzF6Wnk1aWIyUjVMbWxrWlc1MGFYUjVYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2hmZEdocGN5NWZiMjVCWkdSRGFHbHNaSEpsYmtoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEJSRVF0UTBoSlRFUlNSVTR0UlZaRlRsUTZJQ2NzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJRjkwYUdsekxsOXZia0ZrWkVOb2FXeGtjbVZ1U0dGdVpHeGxjaWhsZG1WdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeTl6Wlc1a0lHUmxiSFJoSUcxbGMzTmhaMlZ6SUhSdklITjFZbk5qY21sd2RHbHZibk5jYmlBZ1gyOXVRMmhoYm1kbEtHVjJaVzUwTENCamFHbHNaRWx1Wm04cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYM1psY25OcGIyNHJLenRjYmx4dUlDQWdJR2xtSUNoZmRHaHBjeTVmYzNSaGRIVnpJRDA5UFNBbmIyNG5LU0I3WEc0Z0lDQWdJQ0F2TDBaTVQxY3RUMVZVT2lCMGFHbHpJRzFsYzNOaFoyVWdkMmxzYkNCaVpTQnpaVzUwSUdScGNtVmpkR3g1SUhSdklHRWdjbVZ6YjNWeVkyVWdZMmhoYm1kbGN5QmhaR1J5WlhOek9pQk5aWE56WVdkbFFuVnpYRzRnSUNBZ0lDQnNaWFFnWTJoaGJtZGxUWE5uSUQwZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbmRYQmtZWFJsSnl3Z1puSnZiVG9nWDNSb2FYTXVYM1Z5YkN3Z2RHODZJRjkwYUdsekxsOTFjbXdnS3lBbkwyTm9ZVzVuWlhNbkxGeHVJQ0FnSUNBZ0lDQmliMlI1T2lCN0lIWmxjbk5wYjI0NklGOTBhR2x6TGw5MlpYSnphVzl1TENCemIzVnlZMlU2SUY5MGFHbHpMbDl2ZDI1bGNpd2dZWFIwY21saWRYUmxPaUJsZG1WdWRDNW1hV1ZzWkNCOVhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzBSaGRHRlBZbXBsWTNRZ0xTQmZiMjVEYUdGdVoyVmRJQzBnSnl3Z1pYWmxiblFzSUdOb2FXeGtTVzVtYnl3Z1kyaGhibWRsVFhObktUdGNibHh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBMbTlVZVhCbElEMDlQU0JQWW1wbFkzUlVlWEJsTGs5Q1NrVkRWQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdVkxUjVjR1VnSVQwOUlFTm9ZVzVuWlZSNWNHVXVVa1ZOVDFaRktTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJoaGJtZGxUWE5uTG1KdlpIa3VkbUZzZFdVZ1BTQmxkbVZ1ZEM1a1lYUmhPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqYUdGdVoyVk5jMmN1WW05a2VTNWhkSFJ5YVdKMWRHVlVlWEJsSUQwZ1pYWmxiblF1YjFSNWNHVTdYRzRnSUNBZ0lDQWdJR05vWVc1blpVMXpaeTVpYjJSNUxuWmhiSFZsSUQwZ1pYWmxiblF1WkdGMFlUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbU5VZVhCbElDRTlQU0JEYUdGdVoyVlVlWEJsTGxWUVJFRlVSU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9ZVzVuWlUxelp5NWliMlI1TG05d1pYSmhkR2x2YmlBOUlHVjJaVzUwTG1OVWVYQmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dlkyaHBiR1JKYm1adklHMTFjM1FnYUdGMlpTQW9jR0YwYUN3Z1kyaHBiR1JKWkNsY2JpQWdJQ0FnSUdsbUlDaGphR2xzWkVsdVptOHBJSHRjYmlBZ0lDQWdJQ0FnWTJoaGJtZGxUWE5uTG5SdklEMGdZMmhwYkdSSmJtWnZMbkJoZEdnN1hHNGdJQ0FnSUNBZ0lHTm9ZVzVuWlUxelp5NWliMlI1TG5KbGMyOTFjbU5sSUQwZ1kyaHBiR1JKYm1adkxtTm9hV3hrU1dRN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZWRTlFVHpvZ1JtOXlJRVoxY25Sb1pYSWdVM1IxWkhsY2JpQWdJQ0FnSUdsbUlDZ2hYM1JvYVhNdVgyMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVLU0JqYUdGdVoyVk5jMmN1WW05a2VTNXRkWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiaUE5SUY5MGFHbHpMbDl0ZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2Ymp0Y2JseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2hqYUdGdVoyVk5jMmNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ1pHVnNkR0VnYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElHRWdjbVZ0YjNSbElFUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNpQnZjaUJFWVhSaFQySnFaV04wUTJocGJHUWdkMmhsYmlCamFHRnVaMmx1WnlCa1lYUmhYRzRnSUY5amFHRnVaMlZQWW1wbFkzUW9jM2x1WTA5aWFpd2diWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2VkU5RVR6b2dkWEJrWVhSbElIWmxjbk5wYjI0Z1AxeHVJQ0FnSUM4dmFHOTNJSFJ2SUdoaGJtUnNaU0JoYmlCcGJtTnZjbkpsWTNRZ2RtVnljMmx2YmlBL0lFVjRZVzF3YkdVNklISmxZMlZwZG1VZ1lTQjJaWEp6YVc5dUlETWdkMmhsYmlCMGFHVWdiMkp6WlhKMlpYSWdhWE1nYVc0Z2RtVnljMmx2YmlBeExDQjNhR1Z5WlNCcGN5QjBhR1VnZG1WeWMybHZiaUF5SUQ5Y2JpQWdJQ0F2TDNkcGJHd2dkMlVnYm1WbFpDQjBieUJqYjI1bWFYSnRJSFJvWlNCeVpXTmxjSFJwYjI0Z1AxeHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZmRtVnljMmx2YmlBcklERWdQVDA5SUcxelp5NWliMlI1TG5abGNuTnBiMjRwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDkyWlhKemFXOXVLeXM3WEc0Z0lDQWdJQ0JzWlhRZ2NHRjBhQ0E5SUcxelp5NWliMlI1TG1GMGRISnBZblYwWlR0Y2JpQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlHUmxaWEJEYkc5dVpTaHRjMmN1WW05a2VTNTJZV3gxWlNrN1hHNGdJQ0FnSUNCc1pYUWdabWx1WkZKbGMzVnNkQ0E5SUhONWJtTlBZbW91Wm1sdVpFSmxabTl5WlNod1lYUm9LVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtRjBkSEpwWW5WMFpWUjVjR1VnUFQwOUlFOWlhbVZqZEZSNWNHVXVRVkpTUVZrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxelp5NWliMlI1TG05d1pYSmhkR2x2YmlBOVBUMGdRMmhoYm1kbFZIbHdaUzVCUkVRcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1lYSnlJRDBnWm1sdVpGSmxjM1ZzZEM1dlltbzdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ1ptbHVaRkpsYzNWc2RDNXNZWE4wTzF4dUlDQWdJQ0FnSUNBZ0lFRnljbUY1TG5CeWIzUnZkSGx3WlM1emNHeHBZMlV1WVhCd2JIa29ZWEp5TENCYmFXNWtaWGdzSURCZExtTnZibU5oZENoMllXeDFaU2twTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMXpaeTVpYjJSNUxtOXdaWEpoZEdsdmJpQTlQVDBnUTJoaGJtZGxWSGx3WlM1U1JVMVBWa1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWVhKeUlEMGdabWx1WkZKbGMzVnNkQzV2WW1vN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdsdVpHVjRJRDBnWm1sdVpGSmxjM1ZzZEM1c1lYTjBPMXh1SUNBZ0lDQWdJQ0FnSUdGeWNpNXpjR3hwWTJVb2FXNWtaWGdzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCbWFXNWtVbVZ6ZFd4MExtOWlhbHRtYVc1a1VtVnpkV3gwTG14aGMzUmRJRDBnZG1Gc2RXVTdJQzh2SUZWUVJFRlVSVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JYTm5MbUp2WkhrdWRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm1hVzVrVW1WemRXeDBMbTlpYWx0bWFXNWtVbVZ6ZFd4MExteGhjM1JkSUQwZ2RtRnNkV1U3SUM4dklGVlFSRUZVUlNCdmNpQkJSRVJjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWm1sdVpGSmxjM1ZzZEM1dlltcGJabWx1WkZKbGMzVnNkQzVzWVhOMFhUc2dMeThnVWtWTlQxWkZYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OVVUMFJQT2lCb2IzY2dkRzhnYUdGdVpHeGxJSFZ1YzNsdVkyaHliMjVwZW1Wa0lIWmxjbk5wYjI1elAxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMVZPVTFsT1EwaFNUMDVKV2tWRUlGWkZVbE5KVDA0NklDaGtZWFJoSUQwK0lDY2dLeUJmZEdocGN5NWZkbVZ5YzJsdmJpQXJJQ2NzSUcxelp5QTlQaUFuSUNzZ2JYTm5MbUp2WkhrdWRtVnljMmx2YmlBcklDY3BKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk5R1RFOVhMVWxPT2lCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdZU0J5WlcxdmRHVWdSR0YwWVU5aWFtVmpkRU5vYVd4a0lIZG9aVzRnWTJoaGJtZHBibWNnWkdGMFlWeHVJQ0JmWTJoaGJtZGxRMmhwYkdSeVpXNG9iWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduUTJoaGJtZGxJR05vYVd4a2NtVnVPaUFuTENCZmRHaHBjeTVmYjNkdVpYSXNJRzF6WnlrN1hHNWNiaUFnSUNCc1pYUWdZMmhwYkdSSlpDQTlJRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxPMXh1SUNBZ0lHeGxkQ0JqYUdsc1pISmxiaUE5SUY5MGFHbHpMbDlqYUdsc1pISmxiazlpYW1WamRITmJZMmhwYkdSSlpGMDdYRzVjYmlBZ0lDQnBaaUFvWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVlBZbXBsWTNRb1kyaHBiR1J5Wlc0dVgzTjVibU5QWW1vc0lHMXpaeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RPYnlCamFHbHNaSEpsYmlCbWIzVnVaQ0JtYjNJNklDY3NJR05vYVd4a1NXUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJoZEdGUFltcGxZM1E3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdmMzbHVZMmhsY2k5RVlYUmhUMkpxWldOMExtcHpJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVYRzVwYlhCdmNuUWdVM2x1WTA5aWFtVmpkQ0JtY205dElDY3VMMUJ5YjNoNVQySnFaV04wSnp0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWTJ4aGMzTWdjbVYwZFhKdVpXUWdabkp2YlNCMGFHVWdSR0YwWVU5aWFtVmpkQ0JoWkdSRGFHbHNaSEpsYmlCallXeHNJRzl5SUdaeWIyMGdiMjVCWkdSRGFHbHNaSEpsYmlCcFppQnlaVzF2ZEdWc2VTQmpjbVZoZEdWa0xseHVJQ29nUTJocGJHUnlaVzRnYjJKcVpXTjBJSE41Ym1Ob2NtOXVhWHBoZEdsdmJpQnBjeUJoSUdFZ1ptRnpkQ0JtYjNKM1lYSmtJRzFsWTJoaGJtbHpiU3dnYm04Z2JtVmxaQ0JtYjNJZ1pHbHlaV04wSUhOMVluTmpjbWx3ZEdsdmJuTXNJR2wwSUhWelpYTWdkR2hsSUdGc2NtVmhaSGtnWVhWMGFHOXlhWHBsWkNCemRXSnpZM0pwY0hScGIyNGdabkp2YlNCMGFHVWdjR0Z5Wlc1MElFUmhkR0ZQWW1wbFkzUXVYRzRnS2k5Y2JtTnNZWE56SUVSaGRHRlBZbXBsWTNSRGFHbHNaQ0F2S2lCcGJYQnNaVzFsYm5SeklGTjVibU5UZEdGMGRYTWdLaThnZTF4dUlDQXZLaUJ3Y21sMllYUmxYRzVjYmlBZ0xTMHRMV1YyWlc1MElHaGhibVJzWlhKekxTMHRMVnh1SUNCZmIyNVNaWE53YjI1elpVaGhibVJzWlhJNklDaGxkbVZ1ZENrZ1BUNGdkbTlwWkZ4dUlDQXFMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFhV2R1YjNKbFhHNGdJQ0FxSUZOb2IzVnNaQ0J1YjNRZ1ltVWdkWE5sWkNCa2FYSmxZM1JzZVNCaWVTQkllWEJsY25ScFpYTXVJRWwwSjNNZ1kyRnNiR1ZrSUdKNUlIUm9aU0JFWVhSaFQySnFaV04wTG1Ga1pFTm9hV3hrY21WdVhHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3WVhKbGJuUXNJR05vYVd4a1NXUXNJR2x1YVhScFlXeEVZWFJoTENCdmQyNWxjaXdnYlhOblNXUXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDNCaGNtVnVkQ0E5SUhCaGNtVnVkRHRjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1JKWkNBOUlHTm9hV3hrU1dRN1hHNGdJQ0FnWDNSb2FYTXVYMjkzYm1WeUlEMGdiM2R1WlhJN1hHNGdJQ0FnWDNSb2FYTXVYMjF6WjBsa0lEMGdiWE5uU1dRN1hHNWNiaUFnSUNCZmRHaHBjeTVmYzNsdVkwOWlhaUE5SUc1bGR5QlRlVzVqVDJKcVpXTjBLR2x1YVhScFlXeEVZWFJoS1R0Y2JseHVJQ0FnSUY5MGFHbHpMbDlpZFhNZ1BTQndZWEpsYm5RdVgySjFjenRjYmlBZ0lDQmZkR2hwY3k1ZllXeHNiMk5oZEdWTWFYTjBaVzVsY25Nb0tUdGNiaUFnZlZ4dVhHNGdJRjloYkd4dlkyRjBaVXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTkwYUdseklHbHpJRzl1YkhrZ2JtVmxaR1ZrSUdadmNpQmphR2xzWkhKbGJpQnlaWEJ2Y25SbGNuTmNiaUFnSUNCcFppQW9YM1JvYVhNdVgyOTNibVZ5S1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYkdsemRHVnVaWElnUFNCZmRHaHBjeTVmWW5WekxtRmtaRXhwYzNSbGJtVnlLRjkwYUdsekxsOXZkMjVsY2l3Z0tHMXpaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYlhObkxuUjVjR1VnUFQwOUlDZHlaWE53YjI1elpTY2dKaVlnYlhObkxtbGtJRDA5UFNCZmRHaHBjeTVmYlhOblNXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25SR0YwWVU5aWFtVmpkRU5vYVd4a0xtOXVVbVZ6Y0c5dWMyVTZKeXdnYlhObktUdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiMjVTWlhOd2IyNXpaU2h0YzJjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdhV1lnS0Y5MGFHbHpMbDlzYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMnhwYzNSbGJtVnlMbkpsYlc5MlpTZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWld4bFlYTmxJR0Z1WkNCa1pXeGxkR1VnYjJKcVpXTjBJR1JoZEdGY2JpQWdJQ292WEc0Z0lHUmxiR1YwWlNncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXdZWEpsYm5RdVgyTm9hV3hrY21WdVcxOTBhR2x6TGw5amFHbHNaRWxrWFR0Y2JseHVJQ0FnSUY5MGFHbHpMbDl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2s3WEc1Y2JpQWdJQ0F2TDFSUFJFODZJSE5sYm1RZ1pHVnNaWFJsSUcxbGMzTmhaMlVnUDF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9hV3hrY21WdUlFbEVJR2RsYm1WeVlYUmxaQ0J2YmlCaFpHUkRhR2xzWkhKbGJpNGdWVzVwY1hWbElHbGtaVzUwYVdacFpYSmNiaUFnSUNvZ1FIUjVjR1VnZTFWU1RIMGdMU0JWVWt3Z2IyWWdkR2hsSUdadmNtMWhkQ0E4U0hsd1pYSjBlVlZTVEQ0alBHNTFiV1Z5YVdNdGMyVnhkV1Z1WTJVK1hHNGdJQ0FxTDF4dUlDQm5aWFFnWTJocGJHUkpaQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYMk5vYVd4a1NXUTdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR0YwWVNCVGRISjFZM1IxY21VZ2RHOGdZbVVnYzNsdVkyaHliMjVwZW1Wa0xseHVJQ0FnS2lCQWRIbHdaU0I3U2xOUFRuMGdMU0JLVTA5T0lITjBjblZqZEhWeVpTQjBhR0YwSUhOb2IzVnNaQ0JtYjJ4c2IzY2dkR2hsSUdSbFptbHVaV1FnYzJOb1pXMWhMQ0JwWmlCaGJua3VYRzRnSUNBcUwxeHVJQ0JuWlhRZ1pHRjBZU2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM041Ym1OUFltb3VaR0YwWVRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXZHBjM1JsY2lCMGFHVWdZMmhoYm1kbElHeHBjM1JsYm1WeWN5QnpaVzUwSUdKNUlIUm9aU0J5WlhCdmNuUmxjaUJqYUdsc1pGeHVJQ0FnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1S0dWMlpXNTBPaUJOYzJkRmRtVnVkQ2w5SUdOaGJHeGlZV05yWEc0Z0lDQXFMMXh1SUNCdmJrTm9ZVzVuWlNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVYM041Ym1OUFltb3ViMkp6WlhKMlpTZ29aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLR1YyWlc1MEtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSMWNDQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z2NISnZZMlZ6Y3lCeVpYTndiMjV6WlNCdWIzUnBabWxqWVhScGIyNXpJRzltSUhSb1pTQmpjbVZoZEdWelhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjRvWlhabGJuUTZJRTF6WjBWMlpXNTBLWDBnWTJGc2JHSmhZMnRjYmlBZ0lDb3ZYRzRnSUc5dVVtVnpjRzl1YzJVb1kyRnNiR0poWTJzcElIdGNiaUFnSUNCMGFHbHpMbDl2YmxKbGMzQnZibk5sU0dGdVpHeGxjaUE5SUdOaGJHeGlZV05yTzF4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnWVNCeVpXMXZkR1VnUkdGMFlVOWlhbVZqZENBdFBpQmZiMjVEYUdsc1pFTnlaV0YwWlZ4dUlDQmZiMjVTWlhOd2IyNXpaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHVjJaVzUwSUQwZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nYlhObkxuUjVjR1VzWEc0Z0lDQWdJQ0IxY213NklHMXpaeTVpYjJSNUxuTnZkWEpqWlN4Y2JpQWdJQ0FnSUdOdlpHVTZJRzF6Wnk1aWIyUjVMbU52WkdWY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tGOTBhR2x6TGw5dmJsSmxjM0J2Ym5ObFNHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDI5dVVtVnpjRzl1YzJWSVlXNWtiR1Z5S0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JFWVhSaFQySnFaV04wUTJocGJHUTdYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpOXpjbU12YzNsdVkyaGxjaTlFWVhSaFQySnFaV04wUTJocGJHUXVhbk1pTENKcGJYQnZjblFnSjNCeWIzaDVMVzlpYzJWeWRtVW5PMXh1WEc1amIyNXpkQ0J2WW1wbFkzUlVlWEJsSUQwZ2UwRlNVa0ZaT2lBblcyOWlhbVZqZENCQmNuSmhlVjBuTENCUFFrcEZRMVE2SUNkYmIySnFaV04wSUU5aWFtVmpkRjBuSUgwN1hHNWNiaThxS2x4dUlDb2dRR0ZqWTJWemN5QndjbWwyWVhSbFhHNGdLaUJOWVdsdUlHTnNZWE56SUhSb1lYUWdiV0ZwYm5SaGFXNXpJR0VnU2xOUFRpQnZZbXBsWTNRc0lHRnVaQ0J2WW5ObGNuWmxjeUJqYUdGdVoyVnpJR2x1SUhSb2FYTWdiMkpxWldOMExDQnlaV04xY25OcGRtVnNlUzVjYmlBcUlFbHVkR1Z5Ym1Gc0lHOWlhbVZqZEhNZ1lXNWtJR0Z5Y21GNWN5QmhjbVVnWVd4emJ5QnZZbk5sY25abFpDNWNiaUFxTDF4dVkyeGhjM01nVTNsdVkwOWlhbVZqZENCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXNXBkR2xoYkVSaGRHRXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDI5aWMyVnlkbVZ5Y3lBOUlGdGRPMXh1SUNBZ0lGOTBhR2x6TGw5bWFXeDBaWEp6SUQwZ2UzMDdYRzVjYmlBZ0lDQjBhR2x6TGw5a1lYUmhJRDBnYVc1cGRHbGhiRVJoZEdFZ2ZId2dlMzA3WEc1Y2JpQWdJQ0IwYUdsekxsOXBiblJsY201aGJFOWljMlZ5ZG1Vb2RHaHBjeTVmWkdGMFlTazdYRzRnSUgxY2JseHVJQ0JuWlhRZ1pHRjBZU2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYMlJoZEdFN0lIMWNibHh1SUNCdlluTmxjblpsS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZEdocGN5NWZiMkp6WlhKMlpYSnpMbkIxYzJnb1kyRnNiR0poWTJzcE8xeHVJQ0I5WEc1Y2JpQWdabWx1WkNod1lYUm9LU0I3WEc0Z0lDQWdiR1YwSUd4cGMzUWdQU0J3WVhSb0xuTndiR2wwS0NjdUp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWm1sdVpGZHBkR2hUY0d4cGRDaHNhWE4wS1R0Y2JpQWdmVnh1WEc0Z0lHWnBibVJDWldadmNtVW9jR0YwYUNrZ2UxeHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ0lDQnNaWFFnYkdsemRDQTlJSEJoZEdndWMzQnNhWFFvSnk0bktUdGNiaUFnSUNCeVpYTjFiSFF1YkdGemRDQTlJR3hwYzNRdWNHOXdLQ2s3WEc0Z0lDQWdjbVZ6ZFd4MExtOWlhaUE5SUhSb2FYTXVYMlpwYm1SWGFYUm9VM0JzYVhRb2JHbHpkQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1Y2JpQWdYMlpwYm1SWGFYUm9VM0JzYVhRb2JHbHpkQ2tnZTF4dUlDQWdJR3hsZENCdlltb2dQU0IwYUdsekxsOWtZWFJoTzF4dUlDQWdJR3hwYzNRdVptOXlSV0ZqYUNnb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lHOWlhaUE5SUc5aWFsdDJZV3gxWlYwN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYjJKcU8xeHVJQ0I5WEc1Y2JpQWdYMmx1ZEdWeWJtRnNUMkp6WlhKMlpTaHZZbXBsWTNRcElIdGNibHh1SUNBZ0lHeGxkQ0JvWVc1a2JHVnlJRDBnS0dOb1lXNW5aWE5sZENrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0JqYUdGdVoyVnpaWFF1WlhabGNua29LR05vWVc1blpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2YmtOb1lXNW5aWE1vWTJoaGJtZGxLVHRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhSb2FYTXVYMlJoZEdFZ1BTQlBZbXBsWTNRdVpHVmxjRTlpYzJWeWRtVW9iMkpxWldOMExDQm9ZVzVrYkdWeUtUdGNibHh1SUNCOVhHNWNiaUFnWDJacGNtVkZkbVZ1ZENobGRtVnVkQ2tnZTF4dUlDQWdJSFJvYVhNdVgyOWljMlZ5ZG1WeWN5NW1iM0pGWVdOb0tDaGpZV3hzWW1GamF5a2dQVDRnZTF4dUlDQWdJQ0FnWTJGc2JHSmhZMnNvWlhabGJuUXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDI5dVEyaGhibWRsY3loamFHRnVaMlVwSUh0Y2JseHVJQ0FnSUd4bGRDQnZZbW9nUFNCamFHRnVaMlV1YjJKcVpXTjBPMXh1SUNBZ0lHeGxkQ0J2WW1wVWVYQmxPMXh1WEc0Z0lDQWdhV1lnS0c5aWFpNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1QySnFaV04wS1NCN1hHNGdJQ0FnSUNCdlltcFVlWEJsSUQwZ1QySnFaV04wVkhsd1pTNVBRa3BGUTFRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBOVBUMGdRWEp5WVhrcElIdGNiaUFnSUNBZ0lHOWlhbFI1Y0dVZ1BTQlBZbXBsWTNSVWVYQmxMa0ZTVWtGWk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQm1hV1ZzWkZOMGNtbHVaeUE5SUdOb1lXNW5aUzVyWlhsd1lYUm9PMXh1WEc0Z0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb0owWnBaV3hrT2ljc0lHWnBaV3hrVTNSeWFXNW5LVHRjYmlBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnlnbmRIbHdaVG9uTENCamFHRnVaMlV1ZEhsd1pTazdYRzVjYmlBZ0lDQXZMMnhsZENCdmJHUldZV3gxWlNBOUlHTm9ZVzVuWlM1dmJHUldZV3gxWlR0Y2JpQWdJQ0JzWlhRZ2JtVjNWbUZzZFdVZ1BTQnZZbXBiWTJoaGJtZGxMbTVoYldWZE8xeHVYRzRnSUNBZ0x5OGdZMjl1YzI5c1pTNXBibVp2S0dOb1lXNW5aUzUwZVhCbElDc2dKeUI4SUVacFpXeGtPaUFuSUNzZ1ptbGxiR1JUZEhKcGJtY2dLeUFuSUh3Z1RtVjNJRlpoYkhWbE9pY3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtHNWxkMVpoYkhWbEtTd2dabWxsYkdSVGRISnBibWN1YVc1amJIVmtaWE1vSjJ4bGJtZDBhQ2NwS1R0Y2JseHVJQ0FnSUdsbUlDaGphR0Z1WjJVdWRIbHdaU0E5UFQwZ0ozVndaR0YwWlNjZ0ppWWdJV1pwWld4a1UzUnlhVzVuTG1sdVkyeDFaR1Z6S0NjdWJHVnVaM1JvSnlrcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJacGNtVkZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lHTlVlWEJsT2lCRGFHRnVaMlZVZVhCbExsVlFSRUZVUlN4Y2JpQWdJQ0FnSUNBZ2IxUjVjR1U2SUc5aWFsUjVjR1VzWEc0Z0lDQWdJQ0FnSUdacFpXeGtPaUJtYVdWc1pGTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1pHRjBZVG9nYm1WM1ZtRnNkV1ZjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoamFHRnVaMlV1ZEhsd1pTQTlQVDBnSjJGa1pDY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyWnBjbVZGZG1WdWRDaDdYRzRnSUNBZ0lDQWdJR05VZVhCbE9pQkRhR0Z1WjJWVWVYQmxMa0ZFUkN4Y2JpQWdJQ0FnSUNBZ2IxUjVjR1U2SUc5aWFsUjVjR1VzWEc0Z0lDQWdJQ0FnSUdacFpXeGtPaUJtYVdWc1pGTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1pHRjBZVG9nYm1WM1ZtRnNkV1ZjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoamFHRnVaMlV1ZEhsd1pTQTlQVDBnSjJSbGJHVjBaU2NwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMlpwY21WRmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUdOVWVYQmxPaUJEYUdGdVoyVlVlWEJsTGxKRlRVOVdSU3hjYmlBZ0lDQWdJQ0FnYjFSNWNHVTZJRzlpYWxSNWNHVXNYRzRnSUNBZ0lDQWdJR1pwWld4a09pQm1hV1ZzWkZOMGNtbHVaMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNibjFjYmx4dVpYaHdiM0owSUd4bGRDQkRhR0Z1WjJWVWVYQmxJRDBnZTFWUVJFRlVSVG9nSjNWd1pHRjBaU2NzSUVGRVJEb2dKMkZrWkNjc0lGSkZUVTlXUlRvZ0ozSmxiVzkyWlNkOU8xeHVaWGh3YjNKMElHeGxkQ0JQWW1wbFkzUlVlWEJsSUQwZ2UwOUNTa1ZEVkRvZ0oyOWlhbVZqZENjc0lFRlNVa0ZaT2lBbllYSnlZWGtuZlR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZONWJtTlBZbXBsWTNRN1hHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5emNtTXZjM2x1WTJobGNpOVFjbTk0ZVU5aWFtVmpkQzVxY3lJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNWxlSEJ2Y25SekxsOWZaWE5OYjJSMWJHVWdQU0IwY25WbE8xeHVYRzUyWVhJZ1gyZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lpazdYRzVjYm5aaGNpQmZaMlYwVUhKdmRHOTBlWEJsVDJZeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZloyVjBVSEp2ZEc5MGVYQmxUMllwTzF4dVhHNTJZWElnWDJkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUE5SUhKbGNYVnBjbVVvWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNKY0lpazdYRzVjYm5aaGNpQmZaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lrN1hHNWNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3SUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN0lHUmxabUYxYkhRNklHOWlhaUI5T3lCOVhHNWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1oxYm1OMGFXOXVJR2RsZENodlltcGxZM1FzSUhCeWIzQmxjblI1TENCeVpXTmxhWFpsY2lrZ2UxeHVJQ0JwWmlBb2IySnFaV04wSUQwOVBTQnVkV3hzS1NCdlltcGxZM1FnUFNCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVN1hHNGdJSFpoY2lCa1pYTmpJRDBnS0RBc0lGOW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJeUxtUmxabUYxYkhRcEtHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcE8xeHVYRzRnSUdsbUlDaGtaWE5qSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQjJZWElnY0dGeVpXNTBJRDBnS0RBc0lGOW5aWFJRY205MGIzUjVjR1ZQWmpJdVpHVm1ZWFZzZENrb2IySnFaV04wS1R0Y2JseHVJQ0FnSUdsbUlDaHdZWEpsYm5RZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm5aWFFvY0dGeVpXNTBMQ0J3Y205d1pYSjBlU3dnY21WalpXbDJaWElwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaGNJblpoYkhWbFhDSWdhVzRnWkdWell5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCa1pYTmpMblpoYkhWbE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJuWlhSMFpYSWdQU0JrWlhOakxtZGxkRHRjYmx4dUlDQWdJR2xtSUNoblpYUjBaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWjJWMGRHVnlMbU5oYkd3b2NtVmpaV2wyWlhJcE8xeHVJQ0I5WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZaMlYwTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1qVmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1WEc1cGJYQnZjblFnUkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5SUdaeWIyMGdKeTR2UkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5Snp0Y2JtbHRjRzl5ZENCRVlYUmhUMkpxWldOMFQySnpaWEoyWlhJZ1puSnZiU0FuTGk5RVlYUmhUMkpxWldOMFQySnpaWEoyWlhJbk8xeHVhVzF3YjNKMElFUmhkR0ZRY205MmFYTnBiMjVoYkNCbWNtOXRJQ2N1TDBSaGRHRlFjbTkyYVhOcGIyNWhiQ2M3WEc1Y2JpOHFLbHh1S2lCVWFHVWdiV0ZwYmlCamJHRnpjeUJtYjNJZ2RHaGxJSE41Ym1Ob1pYSWdjR0ZqYTJGblpTNWNiaW9nVkdobElGTjVibU5vWlhJZ2FYTWdZU0J6YVc1bmJHVjBiMjRnWTJ4aGMzTWdjR1Z5SUVoNWNHVnlkSGt2VlZKTUlHRnVaQ0JwZENCcGN5QjBhR1VnYjNkdVpYSWdiMllnWVd4c0lHTnlaV0YwWldRZ1JHRjBZU0JUZVc1aklFOWlhbVZqZEhNZ1lXTmpiM0prYVc1bklIUnZJSFJvWlNCU1pYQnZjblJsY2lBdElFOWljMlZ5ZG1WeUlIQmhkSFJsY200dVhHNHFJRTFoYVc0Z1puVnVZM1JwYjI1aGJHbDBlU0JwY3lCMGJ5QmpjbVZoZEdVZ2NtVndiM0owWlhKeklHRnVaQ0IwYnlCemRXSnpZM0pwWW1VZ2RHOGdaWGhwYzNScGJtY2diMjVsY3k1Y2Jpb3ZYRzVqYkdGemN5QlRlVzVqYUdWeUlIdGNiaUFnTHlvZ2NISnBkbUYwWlZ4dUlDQmZiM2R1WlhJNklGVlNURnh1SUNCZlluVnpPaUJOYVc1cFFuVnpYRzVjYmlBZ1gzTjFZbFZTVERvZ1ZWSk1YRzVjYmlBZ1gzSmxjRzl5ZEdWeWN6b2dQSFZ5YkRvZ1JHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeVBseHVJQ0JmYjJKelpYSjJaWEp6T2lBOGRYSnNPaUJFWVhSaFQySnFaV04wVDJKelpYSjJaWEkrWEc0Z0lGOXdjbTkyYVhOcGIyNWhiSE02SUR4MWNtdzZJRVJoZEdGUWNtOTJhWE5wYjI1aGJENWNibHh1SUNBdExTMHRaWFpsYm5RZ2FHRnVaR3hsY25NdExTMHRYRzRnSUY5dmJrNXZkR2xtYVdOaGRHbHZia2hoYm1Sc1pYSTZJQ2hsZG1WdWRDa2dQVDRnZG05cFpGeHVJQ0JmYjI1U1pYTjFiV1U2SUNobGRtVnVkQ2tnUFQ0Z2RtOXBaRnh1SUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FxSUVOdmJuTjBjblZqZEc5eUlIUm9ZWFFnYzJodmRXeGtJR0psSUhWelpXUWdZbmtnZEdobElFaDVjR1Z5ZEhrZ2IzZHVaWEpjYmlBZ0tpQkFjR0Z5WVcwZ2UwaDVjR1Z5ZEhsVlVreDlJRzkzYm1WeUlDMGdTSGx3WlhKMGVTQlZVa3dnYjNkdVpYSXVJRUZ1SUZWU1RDQmhiR3h2WTJGMFpXUWdZbmtnZEdobElISjFiblJwYldVZ2RHaGhkQ0IxYm1seGRXVnNlU0JwWkdWdWRHbG1hV1Z6SUhSb1pTQkllWEJsY25SNUxseHVJQ0FxSUVCd1lYSmhiU0I3VFdsdWFVSjFjMzBnWW5WeklDMGdRVzRnYVc1emRHRnVZMlVnYjJZZ2RHaGxJRTFwYm1sQ2RYTWdjSEp2ZG1sa1pXUWdhVzRnZEdobElITmhibVJpYjNndUlGZG9aVzRnWVc0Z2IySnFaV04wSUNoU1pYQnZjblJsY2lCdmNpQlBZbk5sY25abFpDa2dhWE1nWTNKbFlYUmxaQ3dnZEdobElGTjVibU5vWlhKTllXNWhaMlZ5SUhkcGJHd2dZV1JrSUdFZ2JHbHpkR1Z1WlhJZ2FXNGdkR2hsSUUxcGJtbENkWE1nZEc4Z2NtVmpaV2wyWlM5elpXNWtJRTFsYzNOaFoyVnpJRzltSUhSb1lYUWdiMkpxWldOMExseHVJQ0FxSUVCd1lYSmhiU0I3U2xOUFRuMGdZMjl1Wm1sbklDMGdRMjl1Wm1sbmRYSmhkR2x2YmlCa1lYUmhMaUJVYUdVZ2IyNXNlU0J5WlhGMWFYSmxaQ0JtYVdWc1pDQm1iM0lnYm05M0lHbHpJSFJvWlNCeWRXNTBhVzFsVlZKTUxseHVJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2ZDI1bGNpd2dZblZ6TENCamIyNW1hV2NwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyOTNibVZ5SUQwZ2IzZHVaWEk3WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUdKMWN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5emRXSlZVa3dnUFNCamIyNW1hV2N1Y25WdWRHbHRaVlZTVENBcklDY3ZjMjBuTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psY0c5eWRHVnljeUE5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk1nUFNCN2ZUdGNiaUFnSUNCZmRHaHBjeTVmY0hKdmRtbHphVzl1WVd4eklEMGdlMzA3WEc1Y2JpQWdJQ0JpZFhNdVlXUmtUR2x6ZEdWdVpYSW9iM2R1WlhJc0lDaHRjMmNwSUQwK0lIdGNiaUFnSUNBZ0lDOHZhV2R1YjNKbElHMXpaeUJ6Wlc1MElHSjVJR2hwYlhObGJHWmNiaUFnSUNBZ0lHbG1JQ2h0YzJjdVpuSnZiU0FoUFQwZ2IzZHVaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RiVTNsdVkyaGxjbDBnVTNsdVkyaGxjaTFTUTFZNklDY3NJRzF6WnlrN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2JYTm5MblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZG1iM0ozWVhKa0p6b2dYM1JvYVhNdVgyOXVSbTl5ZDJGeVpDaHRjMmNwT3lCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2RqY21WaGRHVW5PaUJmZEdocGN5NWZiMjVTWlcxdmRHVkRjbVZoZEdVb2JYTm5LVHNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5aR1ZzWlhSbEp6b2dYM1JvYVhNdVgyOXVVbVZ0YjNSbFJHVnNaWFJsS0cxelp5azdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJVYUdVZ2IzZHVaWElnYjJZZ2RHaGxJRk41Ym1Ob1pYSWdZVzVrSUdGc2JDQmpjbVZoZEdWa0lISmxjRzl5ZEdWeWN5NWNiaUFnS2lCQWRIbHdaU0I3U0hsd1pYSjBlVlZTVEgxY2JpQWdLaTljYmlBZ1oyVjBJRzkzYm1WeUtDa2dleUJ5WlhSMWNtNGdkR2hwY3k1ZmIzZHVaWEk3SUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJCYkd3Z2IzZHVaV1FnY21Wd2IzSjBaWEp6TENCMGFHVWdiMjVsY3lCMGFHRjBJSGRsY21VZ1kzSmxZWFJsWkNCaWVTQmhJR055WldGMFpWeHVJQ0FxSUVCMGVYQmxJSHRQWW1wbFkzUThWVkpNTENCRVlYUmhUMkpxWldOMFVtVndiM0owWlhJK2ZWeHVJQ0FxTDF4dUlDQm5aWFFnY21Wd2IzSjBaWEp6S0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmY21Wd2IzSjBaWEp6T3lCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUVd4c0lHOTNibVZrSUc5aWMyVnlkbVZ5Y3l3Z2RHaGxJRzl1WlhNZ2RHaGhkQ0IzWlhKbElHTnlaV0YwWldRZ1lua2dZU0JzYjJOaGJDQnpkV0p6WTNKcGNIUnBiMjVjYmlBZ0tpQkFkSGx3WlNCN1QySnFaV04wUEZWU1RDd2dSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlQbjFjYmlBZ0tpOWNiaUFnWjJWMElHOWljMlZ5ZG1WeWN5Z3BJSHNnY21WMGRYSnVJSFJvYVhNdVgyOWljMlZ5ZG1WeWN6c2dmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGSmxjWFZsYzNRZ1lTQkVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSWdZM0psWVhScGIyNHVJRlJvWlNCVlVrd2dkMmxzYkNCaVpTQmlaU0J5WlhGMVpYTjBaV1FnWW5rZ2RHaGxJR0ZzYkc5allYUnBiMjRnYldWamFHRnVhWE50TGx4dUlDQXFJRUJ3WVhKaGJTQWdlMU5qYUdWdFlWVlNUSDBnYzJOb1pXMWhJQzBnU0hsd1pYSjBlU0JEWVhSaGJHOW5kV1VnVlZKTUlHRmtaSEpsYzNNZ2RHaGhkQ0JqWVc0Z1ltVWdkWE5sWkNCMGJ5QnlaWFJ5YVdWMlpTQjBhR1VnU2xOUFRpMVRZMmhsYldFZ1pHVnpZM0pwWW1sdVp5QjBhR1VnUkdGMFlTQlBZbXBsWTNRZ2MyTm9aVzFoWEc0Z0lDb2dRSEJoY21GdElDQjdTSGx3WlhKMGVWVlNURnRkZlNCdlluTmxjblpsY25NZ0xTQk1hWE4wSUc5bUlHaDVjR1Z5ZEdsbGN5QjBhR0YwSUdGeVpTQndjbVV0WVhWMGFHOXlhWHBsWkNCbWIzSWdjM1ZpYzJOeWFYQjBhVzl1WEc0Z0lDb2dRSEJoY21GdElDQjdTbE5QVG4wZ2FXNXBkR2xoYkVSaGRHRWdMU0JKYm1sMGFXRnNJR1JoZEdFZ2IyWWdkR2hsSUhKbGNHOXlkR1Z5WEc0Z0lDb2dRSEJoY21GdElDQjdZbTl2YkdWaGJuMGdjM1J2Y21VZ0xTQW9UM0IwYVc5dVlXd3BJR2xtSUhSeWRXVXNJRzlpYW1WamRDQjNhV3hzSUdKbElITjBiM0psWkNCaWVTQjBhR1VnY25WdWRHbHRaVnh1SUNBcUlFQndZWEpoYlNBZ2UySnZiMnhsWVc1OUlIQXljQ0F0SUNoUGNIUnBiMjVoYkNrZ2FXWWdkSEoxWlN3Z1pHRjBZU0J6ZVc1amFISnZibWx6WVhScGIyNGdjM1J5WldGdElIZHBiR3dnZFhObElIQXljQ0JqYjI1dVpXTjBhVzl1SUdGeklHMTFZMmdnWVhNZ2NHOXpjMmxpYkdWY2JpQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxRbTlrZVVsa1pXNTBhWFI1ZlNCcFpHVnVkR2wwZVNBdElDaHZjSFJwYjI1aGJDa2dhV1JsYm5ScGRIa2daR0YwWVNCMGJ5QmlaU0JoWkdSbFpDQjBieUJwWkdWdWRHbDBlU0IwYUdVZ2RYTmxjaUJ5WlhCdmNuUmxjaTRnVkc4Z1ltVWdkWE5sWkNCbWIzSWdiR1ZuWVdONUlHbGtaVzUwYVhScFpYTXVYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlR4RVlYUmhUMkpxWldOMFVtVndiM0owWlhJK2ZTQlNaWFIxY200Z1VISnZiV2x6WlNCMGJ5QmhJRzVsZHlCU1pYQnZjblJsY2k0Z1ZHaGxJSEpsY0c5eWRHVnlJR05oYmlCaVpTQmhZMk5sY0hSbFpDQnZjaUJ5WldwbFkzUmxaQ0JpZVNCMGFHVWdVRVZRWEc0Z0lDb3ZYRzRnSUdOeVpXRjBaU2h6WTJobGJXRXNJRzlpYzJWeWRtVnljeXdnYVc1cGRHbGhiRVJoZEdFc0lITjBiM0psSUQwZ1ptRnNjMlVzSUhBeWNDQTlJR1poYkhObExDQnBaR1Z1ZEdsMGVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHTnlhWFJsY21saElEMGdlMzA3WEc1Y2JpQWdJQ0JqY21sMFpYSnBZUzV3TW5BZ1BTQndNbkE3WEc0Z0lDQWdZM0pwZEdWeWFXRXVjM1J2Y21VZ1BTQnpkRzl5WlR0Y2JpQWdJQ0JqY21sMFpYSnBZUzV6WTJobGJXRWdQU0J6WTJobGJXRTdYRzRnSUNBZ1kzSnBkR1Z5YVdFdWIySnpaWEoyWlhKeklEMGdiMkp6WlhKMlpYSnpPMXh1SUNBZ0lHTnlhWFJsY21saExtbHVhWFJwWVd4RVlYUmhJRDBnYVc1cGRHbGhiRVJoZEdFN1hHNWNiaUFnSUNCcFppQW9hV1JsYm5ScGRIa3BJQ0FnSUNBZ2V5QmpjbWwwWlhKcFlTNXBaR1Z1ZEdsMGVTQTlJR2xrWlc1MGFYUjVPeUI5WEc1Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblczTjVibU5vWlhJZ0xTQmpjbVZoZEdWZElDMGdZM0psWVhSbElGSmxjRzl5ZEdWeUlDMGdZM0pwZEdWeWFXRTZJQ2NzSUdOeWFYUmxjbWxoS1R0Y2JseHVJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9ZM0pwZEdWeWFXRXNJSHR5WlhOMWJXVTZJR1poYkhObGZTazdYRzVjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDJOeVpXRjBaU2hqY21sMFpYSnBZU2s3WEc0Z0lIMWNibHh1SUNCeVpYTjFiV1ZTWlhCdmNuUmxjbk1vWTNKcGRHVnlhV0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiYzNsdVkyaGxjaUF0SUdOeVpXRjBaVjBnTFNCeVpYTjFiV1VnVW1Wd2IzSjBaWElnTFNCamNtbDBaWEpwWVRvZ0p5d2dZM0pwZEdWeWFXRXBPMXh1WEc0Z0lDQWdUMkpxWldOMExtRnpjMmxuYmloamNtbDBaWEpwWVN3Z2UzSmxjM1Z0WlRvZ2RISjFaWDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRjkwYUdsekxsOWpjbVZoZEdVb1kzSnBkR1Z5YVdFcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVbVZ4ZFdWemRDQmhJSE4xWW5OamNtbHdkR2x2YmlCMGJ5QmhiaUJsZUdsemRHVnVkQ0J5WlhCdmNuUmxjaUJ2WW1wbFkzUXVYRzRnSUNvZ1FIQmhjbUZ0SUh0VFkyaGxiV0ZWVWt4OUlITmphR1Z0WVNBdElFaDVjR1Z5ZEhrZ1EyRjBZV3h2WjNWbElGVlNUQ0JoWkdSeVpYTnpJSFJvWVhRZ1kyRnVJR0psSUhWelpXUWdkRzhnY21WMGNtbGxkbVVnZEdobElFcFRUMDR0VTJOb1pXMWhJR1JsYzJOeWFXSnBibWNnZEdobElFUmhkR0VnVDJKcVpXTjBJSE5qYUdWdFlWeHVJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBWVkpNZlNCdlltcFZVa3dnTFNCQlpHUnlaWE56SUc5bUlIUm9aU0JsZUdsemRHVnVkQ0J5WlhCdmNuUmxjaUJ2WW1wbFkzUWdkRzhnWW1VZ2IySnpaWEoyWldSY2JpQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJRnR6ZEc5eVpUMW1ZV3h6WlYwZ0xTQlRZWFpsSUhSb1pTQnpkV0p6WTNKcGNIUnBiMjRnYjI0Z2RHaGxJRk41Ym1Ob1pYSWdUV0Z1WVdkbGNpQm1iM0lnWm5WeWRHaGxjaUJ5WlhOMWJXVWdLRVJsWm1GMWJIUWdhWE1nWm1Gc2MyVXBYRzRnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCYmNESndQV1poYkhObFhTQXRJRWx1Wm04Z1lXSnZkWFFnYVdZZ2MyaHZkV3hrSUhWelpTQndNbkFnWTI5dWJtVmpkR2x2YmlBb1JHVm1ZWFZzZENCcGN5Qm1ZV3h6WlNsY2JpQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJRnR0ZFhSMVlXdzlkSEoxWlYwZ0xTQkpibVp2SUdGaWIzVjBJR2xtSUcxbGMzTmhaMlZ6SUc5bUlIUm9hWE1nYjJKcVpXTjBJSE5vYjNWc1pDQmlaU0JsYm1OeWVYQjBaV1FnS0VSbFptRjFiSFFnYVhNZ2RISjFaU2xjYmlBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbFFtOWtlVWxrWlc1MGFYUjVmU0JwWkdWdWRHbDBlU0F0SUNodmNIUnBiMjVoYkNrZ2FXUmxiblJwZEhrZ1pHRjBZU0IwYnlCaVpTQmhaR1JsWkNCMGJ5QnBaR1Z1ZEdsMGVTQjBhR1VnZFhObGNpQnlaWEJ2Y25SbGNpNGdWRzhnWW1VZ2RYTmxaQ0JtYjNJZ2JHVm5ZV041SUdsa1pXNTBhWFJwWlhNdVhHNGdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaVHhFWVhSaFQySnFaV04wVDJKelpYSjJaWEkrZlNCU1pYUjFjbTRnVUhKdmJXbHpaU0IwYnlCaElHNWxkeUJ2WW5ObGNuWmxjaTRnU1hRbmN5QmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJSEpsY0c5eWRHVnlMbHh1SUNBcUwxeHVJQ0J6ZFdKelkzSnBZbVVvYzJOb1pXMWhMQ0J2WW1wVlVrd3NJSE4wYjNKbElEMGdabUZzYzJVc0lIQXljQ0E5SUdaaGJITmxMQ0J0ZFhSMVlXd2dQU0IwY25WbExDQnBaR1Z1ZEdsMGVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHTnlhWFJsY21saElEMGdlMzA3WEc1Y2JpQWdJQ0JqY21sMFpYSnBZUzV3TW5BZ1BTQndNbkE3WEc0Z0lDQWdZM0pwZEdWeWFXRXVjM1J2Y21VZ1BTQnpkRzl5WlR0Y2JpQWdJQ0JqY21sMFpYSnBZUzV6WTJobGJXRWdQU0J6WTJobGJXRTdYRzVjYmlBZ0lDQmpjbWwwWlhKcFlTNXlaWE52ZFhKalpTQTlJRzlpYWxWU1REdGNiaUFnSUNCcFppQW9hV1JsYm5ScGRIa3BJQ0FnSUNBZ2V5QmpjbWwwWlhKcFlTNXBaR1Z1ZEdsMGVTQTlJR2xrWlc1MGFYUjVPeUI5WEc1Y2JpQWdJQ0F2TDFSUFJFODZJRVp2Y2lCR2RYSjBhR1Z5SUZOMGRXUjVYRzRnSUNBZ1kzSnBkR1Z5YVdFdWJYVjBkV0ZzSUQwZ2JYVjBkV0ZzTzF4dVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdHplVzVqYUdWeUlDMGdjM1ZpYzJOeWFXSmxYU0F0SUhOMVluTmpjbWxpWlNCamNtbDBaWEpwWVRvZ0p5d2dZM0pwZEdWeWFXRXBPMXh1WEc0Z0lDQWdUMkpxWldOMExtRnpjMmxuYmloamNtbDBaWEpwWVN3Z2UzSmxjM1Z0WlRvZ1ptRnNjMlY5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZjM1ZpYzJOeWFXSmxLR055YVhSbGNtbGhLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZKbGNYVmxjM1FnWVNCemRXSnpZM0pwY0hScGIyNGdkRzhnWVc0Z1pYaHBjM1JsYm5RZ2NtVndiM0owWlhJZ2IySnFaV04wTGx4dUlDQXFJRUJ3WVhKaGJTQjdZM0pwZEdWeWFXRjlJR055YVhSbGNtbGhJQzBnU1c1bWIzSnRZWFJwYjI0Z2RHOGdaR2x6WTI5MlpYSjVJSFJvWlNCdlluTmxjblpsY2lCdlltcGxZM1JjYmlBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObFBFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNqNTlJRkpsZEhWeWJpQlFjbTl0YVhObElIUnZJR0VnYm1WM0lHOWljMlZ5ZG1WeUxpQkpkQ2R6SUdGemMyOWphV0YwWldRZ2QybDBhQ0IwYUdVZ2NtVndiM0owWlhJdVhHNGdJQ292WEc0Z0lISmxjM1Z0WlU5aWMyVnlkbVZ5Y3loamNtbDBaWEpwWVNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUY5amNtbDBaWEpwWVNBOUlHTnlhWFJsY21saElIeDhJSHQ5TzF4dVhHNGdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaGZZM0pwZEdWeWFXRXNJSHR5WlhOMWJXVTZJSFJ5ZFdWOUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmYzNWaWMyTnlhV0psS0Y5amNtbDBaWEpwWVNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlNaWEYxWlhOMElHRWdjbVZoWkNCaFkzUnBiMjRnYjI0Z2RHaGxJSEpsY0c5eWRHVnlJRzlpYW1WamRGeHVJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBWVkpNZlNCdlltcFZVa3dnTFNCVlVrd2diMllnZEdobElISmxjRzl5ZEdWeUlHOWlhbVZqZENCMGJ5QmlaU0J5WldGa1hHNGdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaVHhQWW1wbFkzUStmU0JTWlhSMWNtNGdVSEp2YldselpTQjBieUJzWVhOMElHRjJZV2xzWVdKc1pTQmtZWFJoSUc5bUlIUm9aU0J5WlhCdmNuUmxjbHh1SUNBcUwxeHVJQ0J5WldGa0tHOWlhbFZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCMGFHbHpJRzFsYzNOaFoyVWdkMmxzYkNCaVpTQnpaVzUwSUdScGNtVmpkR3g1SUhSdklISmxjRzl5ZEdWeUlHOWlhbVZqZENBb2JXRjVZbVVnZEdobGNtVWdhWE1nYm04Z2JHbHpkR1Z1WlhJZ1lYWmhhV3hoWW14bExDQnpieUJwZENCM2FXeHNJR0psSUhKbGMyOXNkbVZrSUhkcGRHZ2dUV1Z6YzJGblpVSjFjeUF0UGlCeVpYTnZiSFpsS1Z4dUlDQWdJQzh2ZDJsc2JDQnlaV0ZqYUNCMGFHVWdjbVZ0YjNSbElHOWlhbVZqZENCcGJpQkVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSWdMVDRnWDI5dVVtVmhaRnh1SUNBZ0lHeGxkQ0J5WldGa1RYTm5JRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2dKM0psWVdRbkxDQm1jbTl0T2lCZmRHaHBjeTVmYjNkdVpYSXNJSFJ2T2lCdlltcFZVa3hjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9jbVZoWkUxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaV0ZrTFhKbGMzQnZibk5sT2lBbkxDQnlaWEJzZVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhCc2VTNWliMlI1TG1OdlpHVWdQVDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21Wd2JIa3VZbTlrZVM1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbGNHeDVMbUp2WkhrdVpHVnpZeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVMlYwZFhBZ2RHaGxJR05oYkd4aVlXTnJJSFJ2SUhCeWIyTmxjM01nWTNKbFlYUmxJR0Z1WkNCa1pXeGxkR1VnWlhabGJuUnpJRzltSUhKbGJXOTJaU0JTWlhCdmNuUmxjaUJ2WW1wbFkzUnpMbHh1SUNBcUlGUm9hWE1nYVhNZ2NtVnNaV0YwWldRZ2RHOGdkR2hsSUcxbGMzTmhaMlZ1Y3lCelpXNTBJR0o1SUdOeVpXRjBaU0IwYnlCMGFHVWdiMkp6WlhKMlpYSnpJRWg1Y0dWeWRIa2dZWEp5WVhrdVhHNGdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZiaWhsZG1WdWREb2dUWE5uUlhabGJuUXBmU0JqWVd4c1ltRmphMXh1SUNBcUwxeHVJQ0J2Yms1dmRHbG1hV05oZEdsdmJpaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lIUm9hWE11WDI5dVRtOTBhV1pwWTJGMGFXOXVTR0Z1Wkd4bGNpQTlJR05oYkd4aVlXTnJPMXh1SUNCOVhHNWNiaUFnWDJOeVpXRjBaU2hqY21sMFpYSnBZU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElISmxjM1Z0WlNBOUlHTnlhWFJsY21saExuSmxjM1Z0WlR0Y2JpQWdJQ0FnSUd4bGRDQnBibWwwYVdGc1JHRjBZU0E5SUdOeWFYUmxjbWxoTG1sdWFYUnBZV3hFWVhSaElIeDhJSHQ5TzF4dUlDQWdJQ0FnYkdWMElITmphR1Z0WVR0Y2JseHVJQ0FnSUNBZ0x5OUdURTlYTFU5VlZEb2dkR2hwY3lCdFpYTnpZV2RsSUhkcGJHd2dZbVVnYzJWdWRDQjBieUIwYUdVZ2NuVnVkR2x0WlNCcGJuTjBZVzVqWlNCdlppQlRlVzVqYUdWeVRXRnVZV2RsY2lBdFBpQmZiMjVEY21WaGRHVmNiaUFnSUNBZ0lHeGxkQ0J5WlhGMVpYTjBUWE5uSUQwZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBblkzSmxZWFJsSnl3Z1puSnZiVG9nWDNSb2FYTXVYMjkzYm1WeUxDQjBiem9nWDNSb2FYTXVYM04xWWxWU1RDeGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QnlaWE4xYldVNklISmxjM1Z0WlNCOVhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzNONWJtTm9aWElnTFNCamNtVmhkR1ZkT2lBbkxDQmpjbWwwWlhKcFlTd2djbVZ4ZFdWemRFMXpaeWs3WEc1Y2JpQWdJQ0FnSUhKbGNYVmxjM1JOYzJjdVltOWtlUzUyWVd4MVpTQTlJR2x1YVhScFlXeEVZWFJoTzF4dUlDQWdJQ0FnY21WeGRXVnpkRTF6Wnk1aWIyUjVMblpoYkhWbExuSmxjRzl5ZEdWeUlEMGdYM1JvYVhNdVgyOTNibVZ5TzF4dVhHNGdJQ0FnSUNCcFppQW9ZM0pwZEdWeWFXRXVjMk5vWlcxaEtTQjdYRzRnSUNBZ0lDQWdJSE5qYUdWdFlTQTlJR055YVhSbGNtbGhMbk5qYUdWdFlUdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRFMXpaeTVpYjJSNUxuTmphR1Z0WVNBOUlHTnlhWFJsY21saExuTmphR1Z0WVR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR055YVhSbGNtbGhMbkF5Y0NrZ2NtVnhkV1Z6ZEUxelp5NWliMlI1TG5BeWNDQTlJR055YVhSbGNtbGhMbkF5Y0R0Y2JpQWdJQ0FnSUdsbUlDaGpjbWwwWlhKcFlTNXpkRzl5WlNrZ2NtVnhkV1Z6ZEUxelp5NWliMlI1TG5OMGIzSmxJRDBnWTNKcGRHVnlhV0V1YzNSdmNtVTdYRzRnSUNBZ0lDQnBaaUFvWTNKcGRHVnlhV0V1YjJKelpYSjJaWEp6S1NCeVpYRjFaWE4wVFhObkxtSnZaSGt1WVhWMGFHOXlhWE5sSUQwZ1kzSnBkR1Z5YVdFdWIySnpaWEoyWlhKek8xeHVJQ0FnSUNBZ2FXWWdLR055YVhSbGNtbGhMbWxrWlc1MGFYUjVLU0J5WlhGMVpYTjBUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa2dQU0JqY21sMFpYSnBZUzVwWkdWdWRHbDBlVHRjYmx4dUlDQWdJQ0FnYVdZZ0tISmxjM1Z0WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzNONWJtTm9aWElnTFNCamNtVmhkR1ZkSUMwZ2NtVnpkVzFsSUcxbGMzTmhaMlU2SUNjc0lISmxjWFZsYzNSTmMyY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0emVXNWphR1Z5SUMwZ1kzSmxZWFJsWFNBdElHTnlaV0YwWlNCdFpYTnpZV2RsT2lBbkxDQnlaWEYxWlhOMFRYTm5LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk5eVpYRjFaWE4wSUdOeVpXRjBaU0IwYnlCMGFHVWdZV3hzYjJOaGRHbHZiaUJ6ZVhOMFpXMHVJRU5oYmlCaVpTQnlaV3BsWTNSbFpDQmllU0IwYUdVZ1VHOXNhV041Ulc1bmFXNWxMbHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoeVpYRjFaWE4wVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdHplVzVqYUdWeUlDMGdZM0psWVhSbFhTQXRJR055WldGMFpTMXlaWE53YjI1elpUb2dKeXdnY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMM0psY0c5eWRHVnlJR055WldGMGFXOXVJR0ZqWTJWd2RHVmtYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHOWlhbFZTVENBOUlISmxjR3g1TG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6ZFcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0VnUFNCeVpYQnNlUzVpYjJSNUxuTmphR1Z0WVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXeEVZWFJoSUQwZ2NtVndiSGt1WW05a2VTNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdibVYzVDJKcUlEMGdibVYzSUVSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2loZmRHaHBjeXdnYjJKcVZWSk1MQ0J6WTJobGJXRXNJQ2R2Ymljc0lHbHVhWFJwWVd4RVlYUmhMQ0J5WlhCc2VTNWliMlI1TG1Ob2FXeGtjbVZ1VW1WemIzVnlZMlZ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNtVndiM0owWlhKelcyOWlhbFZTVEYwZ1BTQnVaWGRQWW1vN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzVsZDA5aWFpazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYQnZjblJsY2lCamNtVmhkR2x2YmlCeVpXcGxZM1JsWkZ4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpYQnNlUzVpYjJSNUxtUmxjMk1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnWDNOMVluTmpjbWxpWlNoamNtbDBaWEpwWVNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQXZMMFpNVDFjdFQxVlVPaUIwYUdseklHMWxjM05oWjJVZ2QybHNiQ0JpWlNCelpXNTBJSFJ2SUhSb1pTQnlkVzUwYVcxbElHbHVjM1JoYm1ObElHOW1JRk41Ym1Ob1pYSk5ZVzVoWjJWeUlDMCtJRjl2Ymt4dlkyRnNVM1ZpYzJOeWFXSmxYRzRnSUNBZ0lDQnNaWFFnYzNWaWMyTnlhV0psVFhObklEMGdlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5jM1ZpYzJOeWFXSmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgyOTNibVZ5TENCMGJ6b2dYM1JvYVhNdVgzTjFZbFZTVEN4Y2JpQWdJQ0FnSUNBZ1ltOWtlVG9nZTMxY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDOHZJRWg1Y0dWeWRIa2djbVZ4ZFdWemRDQjBieUJpWlNCaGJpQlBZbk5sY25abGNseHVJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOXpjR1ZqY3k5aWJHOWlMMjFoYzNSbGNpOXRaWE56WVdkbGN5OWtZWFJoTFhONWJtTXRiV1Z6YzJGblpYTXViV1FqYUhsd1pYSjBlUzF5WlhGMVpYTjBMWFJ2TFdKbExXRnVMVzlpYzJWeWRtVnlYRzVjYmlBZ0lDQWdJQzh2SUZKbGMzVnRaU0JUZFdKelkzSnBjSFJwYjI1eklHWnZjaUIwYUdVZ2MyRnRaU0JJZVhCbGNuUjVJRlZTVEZ4dUlDQWdJQ0FnTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5emNHVmpjeTlpYkc5aUwyMWhjM1JsY2k5dFpYTnpZV2RsY3k5a1lYUmhMWE41Ym1NdGJXVnpjMkZuWlhNdWJXUWpjbVZ6ZFcxbExYTjFZbk5qY21sd2RHbHZibk10Wm05eUxYUm9aUzF6WVcxbExXaDVjR1Z5ZEhrdGRYSnNYRzVjYmlBZ0lDQWdJQzh2SUZKbGMzVnRaU0JUZFdKelkzSnBjSFJwYjI1eklHWnZjaUJoSUdObGNuUmhhVzRnZFhObGNpQmhibVFnWkdGMFlTQnpZMmhsYldFZ2FXNWtaWEJsYm1SbGJuUnNlU0J2WmlCMGFHVWdTSGx3WlhKMGVTQlZVa3d1WEc0Z0lDQWdJQ0F2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDNOd1pXTnpMMkpzYjJJdmJXRnpkR1Z5TDIxbGMzTmhaMlZ6TDJSaGRHRXRjM2x1WXkxdFpYTnpZV2RsY3k1dFpDTnlaWE4xYldVdGMzVmljMk55YVhCMGFXOXVjeTFtYjNJdFlTMWpaWEowWVdsdUxYVnpaWEl0WVc1a0xXUmhkR0V0YzJOb1pXMWhMV2x1WkdWd1pXNWtaVzUwYkhrdGIyWXRkR2hsTFdoNWNHVnlkSGt0ZFhKc1hHNGdJQ0FnSUNCcFppQW9ZM0pwZEdWeWFXRXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnlhWFJsY21saExtaGhjMDkzYmxCeWIzQmxjblI1S0Nkd01uQW5LU2tnYzNWaWMyTnlhV0psVFhObkxtSnZaSGt1Y0RKd0lEMGdZM0pwZEdWeWFXRXVjREp3TzF4dUlDQWdJQ0FnSUNCcFppQW9ZM0pwZEdWeWFXRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0ozTjBiM0psSnlrcElITjFZbk5qY21saVpVMXpaeTVpYjJSNUxuTjBiM0psSUQwZ1kzSnBkR1Z5YVdFdWMzUnZjbVU3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpjbWwwWlhKcFlTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmMyTm9aVzFoSnlrcElITjFZbk5qY21saVpVMXpaeTVpYjJSNUxuTmphR1Z0WVNBOUlHTnlhWFJsY21saExuTmphR1Z0WVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR055YVhSbGNtbGhMbWhoYzA5M2JsQnliM0JsY25SNUtDZHBaR1Z1ZEdsMGVTY3BLU0J6ZFdKelkzSnBZbVZOYzJjdVltOWtlUzVwWkdWdWRHbDBlU0E5SUdOeWFYUmxjbWxoTG1sa1pXNTBhWFI1TzF4dUlDQWdJQ0FnSUNCcFppQW9ZM0pwZEdWeWFXRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0ozSmxjMjkxY21ObEp5a3BJSE4xWW5OamNtbGlaVTF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxJRDBnWTNKcGRHVnlhV0V1Y21WemIzVnlZMlU3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpjbWwwWlhKcFlTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmFXUmxiblJwZEhrbktTa2djM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa2dQU0JqY21sMFpYSnBZUzVwWkdWdWRHbDBlVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYzNWaWMyTnlhV0psVFhObkxtSnZaSGt1Y21WemRXMWxJRDBnWTNKcGRHVnlhV0V1Y21WemRXMWxPMXh1WEc0Z0lDQWdJQ0F2TDFSUFJFODZJRVp2Y2lCR2RYSjBhR1Z5SUZOMGRXUjVYRzRnSUNBZ0lDQnNaWFFnYlhWMGRXRnNRWFYwYUdWdWRHbGpZWFJwYjI0Z1BTQmpjbWwwWlhKcFlTNXRkWFIxWVd3N1hHNGdJQ0FnSUNCcFppQW9ZM0pwZEdWeWFXRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oyMTFkSFZoYkNjcEtTQnpkV0p6WTNKcFltVk5jMmN1WW05a2VTNXRkWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiaUE5SUcxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dU8xeHVYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzNONWJtTm9aWEpkSUMwZ2MzVmljMk55YVdKbElHMWxjM05oWjJVNklDY3NJR055YVhSbGNtbGhMQ0J6ZFdKelkzSnBZbVZOYzJjcE8xeHVYRzRnSUNBZ0lDQXZMM0psY1hWbGMzUWdjM1ZpYzJOeWFYQjBhVzl1WEc0Z0lDQWdJQ0F2TDFCeWIzWnBjMmx2Ym1Gc0lHUmhkR0VnYVhNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUdGbWRHVnlJR052Ym1acGNtMWhkR2x2Ymk0Z1QzSWdaR2x6WTJGeVpHVmtJR2xtSUhSb1pYSmxJR2x6SUc1dklHTnZibVpwY20xaGRHbHZiaTVjYmlBZ0lDQWdJQzh2Wm05eUlHMXZjbVVnYVc1bWJ5QnpaV1VnZEdobElFUmhkR0ZRY205MmFYTnBiMjVoYkNCamJHRnpjeUJrYjJOMWJXVnVkR0YwYVc5dUxseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h6ZFdKelkzSnBZbVZOYzJjc0lDaHlaWEJzZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblczTjVibU5vWlhKZElDMGdjM1ZpYzJOeWFXSmxMWEpsYzNCdmJuTmxPaUFuTENCeVpYQnNlU2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5qYUdWdFlTQTlJSEpsY0d4NUxtSnZaSGt1YzJOb1pXMWhPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2IySnFWVkpNSUQwZ2NtVndiSGt1WW05a2VTNXlaWE52ZFhKalpUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2JtVjNVSEp2ZG1semFXOXVZV3dnUFNCZmRHaHBjeTVmY0hKdmRtbHphVzl1WVd4elcyOWlhbFZTVEYwN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmY0hKdmRtbHphVzl1WVd4elcyOWlhbFZTVEYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1WlhkUWNtOTJhWE5wYjI1aGJDa2dibVYzVUhKdmRtbHphVzl1WVd3dVgzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUR3Z01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXR6ZVc1amFHVnlYU0F0SUc1bGR5QkVZWFJoVUhKdmRtbHphVzl1WVd3NklDY3NJSEpsY0d4NUxtSnZaSGt1WTJocGJHUnlaVzVTWlhOdmRYSmpaWE1zSUc5aWFsVlNUQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjNVSEp2ZG1semFXOXVZV3dnUFNCdVpYY2dSR0YwWVZCeWIzWnBjMmx2Ym1Gc0tGOTBhR2x6TGw5dmQyNWxjaXdnYjJKcVZWSk1MQ0JmZEdocGN5NWZZblZ6TENCeVpYQnNlUzVpYjJSNUxtTm9hV3hrY21WdVVtVnpiM1Z5WTJWektUdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZjSEp2ZG1semFXOXVZV3h6VzI5aWFsVlNURjBnUFNCdVpYZFFjbTkyYVhOcGIyNWhiRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiYzNsdVkyaGxjbDBnTFNCdVpYY2dSR0YwWVNCUFltcGxZM1FnVDJKelpYSjJaWEk2SUNjc0lISmxjR3g1TENCZmRHaHBjeTVmY0hKdmRtbHphVzl1WVd4ektUdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnBibWwwYVdGc1JHRjBZU0E5SUhKbGNHeDVMbUp2WkhrdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYm1sMGFXRnNSR0YwWVM1b1lYTlBkMjVRY205d1pYSjBlU2duWTJocGJHUnlaVzV6SnlrcElIc2dhVzVwZEdsaGJFUmhkR0V1WTJocGJHUnlaVzV6SUQwZ2UzMDdJSDFjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV2x1YVhScFlXeEVZWFJoTG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RrWVhSaEp5a3BJSHNnYVc1cGRHbGhiRVJoZEdFdVpHRjBZU0E5SUh0OU95QjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkwxUlBSRTg2SUcxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlFWnZjaUJHZFhKMGFHVnlJRk4wZFdSNVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQwOWlhaUE5SUc1bGR5QkVZWFJoVDJKcVpXTjBUMkp6WlhKMlpYSW9YM1JvYVhNc0lHOWlhbFZTVEN3Z2MyTm9aVzFoTENBbmIyNG5MQ0JwYm1sMGFXRnNSR0YwWVN3Z2JtVjNVSEp2ZG1semFXOXVZV3d1WTJocGJHUnlaVzRzSUhKbGNHeDVMbUp2WkhrdWRtVnljMmx2Yml3Z2JYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk5iYjJKcVZWSk1YU0E5SUc1bGQwOWlhanRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JtVjNUMkpxS1R0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGRRY205MmFYTnBiMjVoYkM1aGNIQnNlU2h1WlhkUFltb3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WlhCc2VTNWliMlI1TG1SbGMyTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdMeTlHVEU5WExVbE9PaUJ0WlhOellXZGxJSEpsWTJWcGRtVmtJR1p5YjIwZ1lTQnNiMk5oYkNCeWRXNTBhVzFsSUZKbGNHOXlkR1Z5VDJKcVpXTjBJQzArSUY5dmJsSmxiVzkwWlZOMVluTmpjbWxpWlZ4dUlDQmZiMjVHYjNKM1lYSmtLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2NtVndiM0owWlhJZ1BTQmZkR2hwY3k1ZmNtVndiM0owWlhKelcyMXpaeTVpYjJSNUxuUnZYVHRjYmlBZ0lDQnlaWEJ2Y25SbGNpNWZiMjVHYjNKM1lYSmtLRzF6WnlrN1hHNGdJSDFjYmx4dUlDQXZMMFpNVDFjdFNVNDZJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdabkp2YlNCaElISmxiVzkwWlNCVGVXNWphR1Z5SUMwK0lHTnlaV0YwWlNBb2RHaHBjeUJwY3lCaFkzUjFZV3hzZVNCaGJpQnBiblpwZEdGMGFXOXVJSFJ2SUhOMVluTmpjbWxpWlNsY2JpQWdYMjl1VW1WdGIzUmxRM0psWVhSbEtHMXpaeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDOHZjbVZ0YjNabElGd2lMM04xWW5OamNtbHdkR2x2Ymx3aUlHWnliMjBnZEdobElGVlNURnh1SUNBZ0lHeGxkQ0J5WlhOdmRYSmpaU0E5SUcxelp5NW1jbTl0TG5Oc2FXTmxLREFzSUMweE15azdYRzVjYmlBZ0lDQnNaWFFnWlhabGJuUWdQU0I3WEc0Z0lDQWdJQ0IwZVhCbE9pQnRjMmN1ZEhsd1pTeGNiaUFnSUNBZ0lHWnliMjA2SUcxelp5NWliMlI1TG5OdmRYSmpaU3hjYmlBZ0lDQWdJSFZ5YkRvZ2NtVnpiM1Z5WTJVc1hHNGdJQ0FnSUNCelkyaGxiV0U2SUcxelp5NWliMlI1TG5OamFHVnRZU3hjYmlBZ0lDQWdJSFpoYkhWbE9pQnRjMmN1WW05a2VTNTJZV3gxWlN4Y2JpQWdJQ0FnSUdsa1pXNTBhWFI1T2lCdGMyY3VZbTlrZVM1cFpHVnVkR2wwZVN4Y2JseHVJQ0FnSUNBZ1lXTnJPaUFvZEhsd1pTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCc1pYUWdiRlI1Y0dVZ1BTQXlNREE3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiRlI1Y0dVZ1BTQjBlWEJsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQXZMM05sYm1RZ1lXTnJJSEpsYzNCdmJuTmxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hHNGdJQ0FnSUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYlhObkxtWnliMjBzWEc0Z0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZXlCamIyUmxPaUJzVkhsd1pTQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JwWmlBb1gzUm9hWE11WDI5dVRtOTBhV1pwWTJGMGFXOXVTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlUzbHVZMmhsY2wwZ1RrOVVTVVpKUTBGVVNVOU9MVVZXUlU1VU9pQW5MQ0JsZG1WdWRDazdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmIyNU9iM1JwWm1sallYUnBiMjVJWVc1a2JHVnlLR1YyWlc1MEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMMFpNVDFjdFNVNDZJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdabkp2YlNCaElISmxiVzkwWlNCRVlYUmhUMkpxWldOMFVtVndiM0owWlhJZ0xUNGdaR1ZzWlhSbFhHNGdJRjl2YmxKbGJXOTBaVVJsYkdWMFpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQXZMM0psYlc5MlpTQmNJaTl6ZFdKelkzSnBjSFJwYjI1Y0lpQm1jbTl0SUhSb1pTQlZVa3hjYmlBZ0lDQnNaWFFnY21WemIzVnlZMlVnUFNCdGMyY3VZbTlrZVM1eVpYTnZkWEpqWlR0Y2JseHVJQ0FnSUd4bGRDQnZZbXBsWTNRZ1BTQmZkR2hwY3k1ZmIySnpaWEoyWlhKelczSmxjMjkxY21ObFhUdGNiaUFnSUNCcFppQW9iMkpxWldOMEtTQjdYRzRnSUNBZ0lDQnNaWFFnWlhabGJuUWdQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJRzF6Wnk1MGVYQmxMRnh1SUNBZ0lDQWdJQ0IxY213NklISmxjMjkxY21ObExGeHVJQ0FnSUNBZ0lDQnBaR1Z1ZEdsMGVUb2diWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NYRzVjYmlBZ0lDQWdJQ0FnWVdOck9pQW9kSGx3WlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnNWSGx3WlNBOUlESXdNRHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkZSNWNHVWdQU0IwZVhCbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0x5OVVUMFJQT2lCaGJua2diM1JvWlhJZ1pHbG1abVZ5Wlc1MElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCeVpXeGxZWE5sSUhCeWIyTmxjM01zSUd4cGEyVWdZV05qWlhCMElHSjFkQ0J1YjNJZ2NtVnNaV0Z6WlNCc2IyTmhiRDljYmlBZ0lDQWdJQ0FnSUNCcFppQW9iRlI1Y0dVZ1BUMDlJREl3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBMbVJsYkdWMFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQzh2YzJWdVpDQmhZMnNnY21WemNHOXVjMlVnYldWemMyRm5aVnh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdOdlpHVTZJR3hVZVhCbExDQnpiM1Z5WTJVNklGOTBhR2x6TGw5dmQyNWxjaUI5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1ZmIyNU9iM1JwWm1sallYUnBiMjVJWVc1a2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZE9UMVJKUmtsRFFWUkpUMDR0UlZaRlRsUTZJQ2NzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMjl1VG05MGFXWnBZMkYwYVc5dVNHRnVaR3hsY2lobGRtVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNCcFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQm1jbTl0T2lCdGMyY3VkRzhzSUhSdk9pQnRjMmN1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBME1EUXNJSE52ZFhKalpUb2dYM1JvYVhNdVgyOTNibVZ5SUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTjVibU5vWlhJN1hHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk5emNtTXZjM2x1WTJobGNpOVRlVzVqYUdWeUxtcHpJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVYRzR2S2lwY2JpQXFJRUJoWTJObGMzTWdjSEpwZG1GMFpWeHVJQ29nVkdocGN5QmpiR0Z6Y3lCcGN5QnlaWE53YjI1emFXSnNaU0JtYjNJZ1kyOXNiR1ZqZEdsdVp5QmtaV3gwWVNCamFHRnVaMlZ6SUdsdUlISmxiVzkwWlNCdlltcGxZM1J6TENCaVpXWnZjbVVnZEdobElISmxjM0J2Ym5ObElHOW1JSE4xWW5OamNtbHdkR2x2YmlCeVpXRmphQ0IwYUdVZ2IySnpaWEoyWlhJdVhHNGdLaUJKZENkeklIVnpaV1FnYVc0Z1UzbHVZMmhsY2lBdFBpQnpkV0p6WTNKcFltVXVJRlJvWlNCbWJHOTNJR2x6SUdSbFptbHVaV1FnWVhNNlhHNGdLaUF4TGlBb2IySnpaWEoyWlhJcElDMHRjM1ZpYzJOeWFXSmxMUzArSUNoeVpYQnZjblJsY2lsY2JpQXFJREl1SUNodlluTmxjblpsY2lrZ1BDMHRaR1ZzZEdFZ2RYQmtZWFJsY3kwdElDaHlaWEJ2Y25SbGNpbGNiaUFxSURNdUlDaHZZbk5sY25abGNpa2dQQzB0YzNWaWMyTnlhV0psSUhKbGMzQnZibk5sTFMwZ0tISmxjRzl5ZEdWeUtWeHVJQ29nVkdocGN5QnRaV0Z1Y3lCMGFHRjBJSFJvWlhKbElHTnZkV3hrSUdKbElHUmxiSFJoSUhWd1pHRjBaWE1nZEhKaGJuTm1aWEp5WldRZ1ltVm1iM0psSUhSb1pTQnpkV0p6WTNKcGNIUnBiMjRnWTI5dVptbHliV0YwYVc5dUxseHVJQ29nVTJsdVkyVWdkR2hsY21VZ2FYTWdibThnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUdKbFptOXlaU0IwYUdVZ2RXSnpZM0pwY0hScGIyNGdZMjl1Wm1seWJXRjBhVzl1TENCMGFHVnlaU0J6YUc5MWJHUWdZbVVnYzI5dFpTQnZkR2hsY2lCdlltcGxZM1FnWTI5c2JHVmpkR2x1WnlCMGFHVWdkWEJrWVhSbGN5NWNiaUFxSUZCeWIzWnBjMmx2Ym1Gc0lHUmhkR0VnYVhNZ1lYQndiR2xsWkNCMGJ5QjBhR1VnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUdGbWRHVnlJR052Ym1acGNtMWhkR2x2Ymk0Z1QzSWdaR2x6WTJGeVpHVmtJR2xtSUhSb1pYSmxJR2x6SUc1dklHTnZibVpwY20xaGRHbHZiaTVjYmlBcUwxeHVZMnhoYzNNZ1JHRjBZVkJ5YjNacGMybHZibUZzSUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNCZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NNklGdE5jMmRNYVhOMFpXNWxjbDFjYmlBZ1gyeHBjM1JsYm1WeU9pQk5jMmRNYVhOMFpXNWxjbHh1WEc0Z0lGOWphR0Z1WjJWek9pQmJYVnh1SUNBcUwxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHOTNibVZ5TENCMWNtd3NJR0oxY3l3Z1kyaHBiR1J5Wlc0cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMjkzYm1WeUlEMGdiM2R1WlhJN1hHNGdJQ0FnWDNSb2FYTXVYM1Z5YkNBOUlIVnliRHRjYmlBZ0lDQmZkR2hwY3k1ZlluVnpJRDBnWW5Wek8xeHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxiaUE5SUdOb2FXeGtjbVZ1TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMk5vWVc1blpYTWdQU0JiWFR0Y2JpQWdJQ0JmZEdocGN5NWZZV3hzYjJOaGRHVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ2ZWeHVYRzRnSUY5aGJHeHZZMkYwWlV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMnhwYzNSbGJtVnlJRDBnWDNSb2FYTXVYMkoxY3k1aFpHUk1hWE4wWlc1bGNpaGZkR2hwY3k1ZmRYSnNMQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJHRjBZVkJ5YjNacGMybHZibUZzTFNjZ0t5QmZkR2hwY3k1ZmRYSnNJQ3NnSnkxU1ExWTZJQ2NzSUcxelp5azdYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaGhibWRsY3k1d2RYTm9LRzF6WnlrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdktseHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeUE5SUZ0ZE8xeHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZlkyaHBiR1J5Wlc0cElIdGNiaUFnSUNBZ0lHeGxkQ0JqYUdsc1pFSmhjMlZWVWt3Z1BTQjFjbXdnS3lBbkwyTm9hV3hrY21WdUx5YzdYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc0dVptOXlSV0ZqYUNnb1kyaHBiR1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUdOb2FXeGtWVkpNSUQwZ1kyaHBiR1JDWVhObFZWSk1JQ3NnWTJocGJHUTdYRzRnSUNBZ0lDQWdJR3hsZENCc2FYTjBaVzVsY2lBOUlGOTBhR2x6TGw5aWRYTXVZV1JrVEdsemRHVnVaWElvWTJocGJHUlZVa3dzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMMmxuYm05eVpTQnRjMmNnYzJWdWRDQmllU0JvYVcxelpXeG1YRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTVtY205dElDRTlQU0J2ZDI1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29iWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1d2RYTm9LR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBxTDF4dUlDQjlYRzVjYmlBZ1gzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDlzYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjYmx4dUlDQWdJQzhxWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpMbVp2Y2tWaFkyZ29LR3hwYzNSbGJtVnlLU0E5UGlCN1hHNGdJQ0FnSUNCc2FYTjBaVzVsY2k1eVpXMXZkbVVvS1R0Y2JpQWdJQ0I5S1RzcUwxeHVJQ0I5WEc1Y2JpQWdaMlYwSUdOb2FXeGtjbVZ1S0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmWTJocGJHUnlaVzQ3SUgxY2JseHVJQ0JoY0hCc2VTaHZZbk5sY25abGNpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnWDNSb2FYTXVYMk5vWVc1blpYTXVabTl5UldGamFDZ29ZMmhoYm1kbEtTQTlQaUI3WEc0Z0lDQWdJQ0J2WW5ObGNuWmxjaTVmWTJoaGJtZGxUMkpxWldOMEtHOWljMlZ5ZG1WeUxsOXplVzVqVDJKcUxDQmphR0Z1WjJVcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFUmhkR0ZRY205MmFYTnBiMjVoYkR0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDNOeVl5OXplVzVqYUdWeUwwUmhkR0ZRY205MmFYTnBiMjVoYkM1cWN5SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdllYTnphV2R1WENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZZWE56YVdkdUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOREJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNKY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzluWlhRdGIzZHVMWEJ5YjNCbGNuUjVMV1JsYzJOeWFYQjBiM0l1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFME1seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFpTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WVhOemFXZHVKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdVlYTnphV2R1TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMkZ6YzJsbmJpNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVFEzWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSW5LVHRjYm5aaGNpQWtUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGs5aWFtVmpkRHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLR2wwTENCclpYa3BlMXh1SUNCeVpYUjFjbTRnSkU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTazdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRRNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0lzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SURFNUxqRXVNaTR4SUU5aWFtVmpkQzVoYzNOcFoyNG9kR0Z5WjJWMExDQnpiM1Z5WTJVc0lDNHVMaWxjYm5aaGNpQm5aWFJMWlhseklDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5bGNiaUFnTENCblQxQlRJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J6SnlsY2JpQWdMQ0J3U1VVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxd2FXVW5LVnh1SUNBc0lIUnZUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGIySnFaV04wSnlsY2JpQWdMQ0JKVDJKcVpXTjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHZZbXBsWTNRbktWeHVJQ0FzSUNSaGMzTnBaMjRnSUQwZ1QySnFaV04wTG1GemMybG5ianRjYmx4dUx5OGdjMmh2ZFd4a0lIZHZjbXNnZDJsMGFDQnplVzFpYjJ4eklHRnVaQ0J6YUc5MWJHUWdhR0YyWlNCa1pYUmxjbTFwYm1semRHbGpJSEJ5YjNCbGNuUjVJRzl5WkdWeUlDaFdPQ0JpZFdjcFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDRWtZWE56YVdkdUlIeDhJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUVFZ1BTQjdmVnh1SUNBZ0lDd2dRaUE5SUh0OVhHNGdJQ0FnTENCVElEMGdVM2x0WW05c0tDbGNiaUFnSUNBc0lFc2dQU0FuWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNRbk8xeHVJQ0JCVzFOZElEMGdOenRjYmlBZ1N5NXpjR3hwZENnbkp5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaHJLWHNnUWx0clhTQTlJR3M3SUgwcE8xeHVJQ0J5WlhSMWNtNGdKR0Z6YzJsbmJpaDdmU3dnUVNsYlUxMGdJVDBnTnlCOGZDQlBZbXBsWTNRdWEyVjVjeWdrWVhOemFXZHVLSHQ5TENCQ0tTa3VhbTlwYmlnbkp5a2dJVDBnU3p0Y2JuMHBJRDhnWm5WdVkzUnBiMjRnWVhOemFXZHVLSFJoY21kbGRDd2djMjkxY21ObEtYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNCMllYSWdWQ0FnSUNBZ1BTQjBiMDlpYW1WamRDaDBZWEpuWlhRcFhHNGdJQ0FnTENCaFRHVnVJQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2x1WkdWNElEMGdNVnh1SUNBZ0lDd2daMlYwVTNsdFltOXNjeUE5SUdkUFVGTXVabHh1SUNBZ0lDd2dhWE5GYm5WdElDQWdJQ0E5SUhCSlJTNW1PMXh1SUNCM2FHbHNaU2hoVEdWdUlENGdhVzVrWlhncGUxeHVJQ0FnSUhaaGNpQlRJQ0FnSUNBZ1BTQkpUMkpxWldOMEtHRnlaM1Z0Wlc1MGMxdHBibVJsZUNzclhTbGNiaUFnSUNBZ0lDd2dhMlY1Y3lBZ0lEMGdaMlYwVTNsdFltOXNjeUEvSUdkbGRFdGxlWE1vVXlrdVkyOXVZMkYwS0dkbGRGTjViV0p2YkhNb1V5a3BJRG9nWjJWMFMyVjVjeWhUS1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCclpYbHpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnFJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR3RsZVR0Y2JpQWdJQ0IzYUdsc1pTaHNaVzVuZEdnZ1BpQnFLV2xtS0dselJXNTFiUzVqWVd4c0tGTXNJR3RsZVNBOUlHdGxlWE5iYWlzclhTa3BWRnRyWlhsZElEMGdVMXRyWlhsZE8xeHVJQ0I5SUhKbGRIVnliaUJVTzF4dWZTQTZJQ1JoYzNOcFoyNDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WVhOemFXZHVMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TlRCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJaXdpTHk4Z01Ua3VNUzR6TGpFZ1QySnFaV04wTG1GemMybG5iaWgwWVhKblpYUXNJSE52ZFhKalpTbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0xDQW5UMkpxWldOMEp5d2dlMkZ6YzJsbmJqb2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV0Z6YzJsbmJpY3BmU2s3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZWE56YVdkdUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVE5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lpd2lMeThnTVRrdU1TNHlMallnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaFBMQ0JRS1Z4dWRtRnlJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENBa1oyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjR1FuS1M1bU8xeHVYRzV5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YzJGd0p5a29KMmRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpY3NJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvYVhRc0lHdGxlU2w3WEc0Z0lDQWdjbVYwZFhKdUlDUm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RHOUpUMkpxWldOMEtHbDBLU3dnYTJWNUtUdGNiaUFnZlR0Y2JuMHBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVFUxWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DSXNJbWx0Y0c5eWRDQlRlVzVqYUdWeUlHWnliMjBnSnk0dmMzbHVZMmhsY2k5VGVXNWphR1Z5Snp0Y2JtbHRjRzl5ZENCRVlYUmhUMkpxWldOMFVtVndiM0owWlhJZ1puSnZiU0FuTGk5emVXNWphR1Z5TDBSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2ljN1hHNXBiWEJ2Y25RZ1JHRjBZVTlpYW1WamRFOWljMlZ5ZG1WeUlHWnliMjBnSnk0dmMzbHVZMmhsY2k5RVlYUmhUMkpxWldOMFQySnpaWEoyWlhJbk8xeHVYRzVsZUhCdmNuUWdlMU41Ym1Ob1pYSXNJRVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaXdnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5ZlR0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDNOeVl5OVRlVzVqYUdWeUxtcHpJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvU3luY2hlci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiBqc2hpbnQgdW5kZWY6IHRydWUgKi9cblxuaW1wb3J0IHtTeW5jaGVyfSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXInO1xuaW1wb3J0IHtkaXZpZGVVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBoZWxsbyBmcm9tICcuL2hlbGxvJztcblxuLyoqXG4qIEh5cGVydHkgQ29ubmVjdG9yO1xuKiBAYXV0aG9yIFBhdWxvIENoYWluaG8gW3BhdWxvLWctY2hhaW5ob0B0ZWxlY29tLnB0XVxuKiBAdmVyc2lvbiAwLjEuMFxuKi9cbmNsYXNzIEhlbGxvV29ybGRSZXBvcnRlciB7XG5cbiAgLyoqXG4gICogQ3JlYXRlIGEgbmV3IEhlbGxvV29ybGRSZXBvcnRlclxuICAqIEBwYXJhbSAge1N5bmNoZXJ9IHN5bmNoZXIgLSBTeW5jaGVyIHByb3ZpZGVkIGZyb20gdGhlIHJ1bnRpbWUgY29yZVxuICAqL1xuICBjb25zdHJ1Y3RvcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24pIHtcblxuICAgIGlmICghaHlwZXJ0eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgaHlwZXJ0eVVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdUaGUgTWluaUJ1cyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7XG5cblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKGh5cGVydHlVUkwpLmRvbWFpbjtcbiAgICBfdGhpcy5fZG9tYWluID0gZG9tYWluO1xuICAgIF90aGlzLl9vYmplY3REZXNjVVJMID0gJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicgKyBkb21haW4gKyAnLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvSGVsbG9Xb3JsZERhdGFTY2hlbWEnO1xuXG4gICAgbGV0IHN5bmNoZXIgPSBuZXcgU3luY2hlcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgX3RoaXMuX3N5bmNoZXIgPSBzeW5jaGVyO1xuXG4gICAgX3RoaXMuX3N5bmNoZXIucmVzdW1lUmVwb3J0ZXJzKHt9KS50aGVuKChyZXN1bWVSZXBvcnRlcnMpID0+IHtcblxuICAgICAgaWYgKCFyZXN1bWVSZXBvcnRlcnMpIHJldHVybjtcblxuICAgICAgLy8gbGV0cyBub3cgb2JzZXJ2ZSBhbnkgY2hhbmdlcyBkb25lIGluIEhlbGxvIFdvcmxkIE9iamVjdFxuICAgICAgY29uc29sZS5sb2coJ1toeXBlcnR5IHN5bmNoZXIgcmVzdW1lXSAtIGRhdGFPYmplY3QnLCByZXN1bWVSZXBvcnRlcnMpO1xuXG4gICAgICBPYmplY3QudmFsdWVzKHJlc3VtZVJlcG9ydGVycykuZm9yRWFjaCgoaGVsbG9PYmp0UmVwb3J0ZXIpID0+IHtcbiAgICAgICAgX3RoaXMuaGVsbG9PYmp0UmVwb3J0ZXIgPSBoZWxsb09ianRSZXBvcnRlcjtcblxuICAgICAgICB0aGlzLnByZXBhcmVEYXRhT2JqZWN0UmVwb3J0ZXIoaGVsbG9PYmp0UmVwb3J0ZXIpO1xuXG4gICAgICAgIGhlbGxvT2JqdFJlcG9ydGVyLmRhdGEuaGVsbG8gPSAnUkVQT1JURVIgUkVTVU1FRCc7XG5cbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fb25SZXBvcnRlclJlc3VtZSk7XG4gICAgICAgIGlmICh0aGlzLl9vblJlcG9ydGVyUmVzdW1lKSB0aGlzLl9vblJlcG9ydGVyUmVzdW1lKGhlbGxvT2JqdFJlcG9ydGVyKTtcbiAgICAgIH0pXG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlIEhlbGxvV29ybGQgRGF0YSBPYmplY3RcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSBIeXBlcnR5VVJMIC0gSW52aXRlZFxuICAqL1xuXG4gIGhlbGxvKGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBzeW5jaGVyID0gX3RoaXMuX3N5bmNoZXI7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIHN5bmNoZXIuY3JlYXRlKF90aGlzLl9vYmplY3REZXNjVVJMLCBbaHlwZXJ0eVVSTF0sIGhlbGxvLCBmYWxzZSwgZmFsc2UsICdoZWxsbycpLnRoZW4oZnVuY3Rpb24oaGVsbG9PYmp0UmVwb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBSZXR1cm4gQ3JlYXRlZCBIZWxsbyBXb3JsZCBEYXRhIE9iamVjdCBSZXBvcnRlcicsIGhlbGxvT2JqdFJlcG9ydGVyKTtcblxuICAgICAgICBfdGhpcy5oZWxsb09ianRSZXBvcnRlciA9IGhlbGxvT2JqdFJlcG9ydGVyO1xuXG4gICAgICAgIF90aGlzLnByZXBhcmVEYXRhT2JqZWN0UmVwb3J0ZXIoaGVsbG9PYmp0UmVwb3J0ZXIpO1xuXG4gICAgICAgIHJlc29sdmUoaGVsbG9PYmp0UmVwb3J0ZXIpO1xuXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIHByZXBhcmVEYXRhT2JqZWN0UmVwb3J0ZXIoaGVsbG9PYmp0UmVwb3J0ZXIpIHtcblxuICAgIGhlbGxvT2JqdFJlcG9ydGVyLm9uU3Vic2NyaXB0aW9uKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tIEhlbGxvIFdvcmxkIFJlcG9ydGVyIHJlY2VpdmVkIHN1YnNjcmlwdGlvbiByZXF1ZXN0IC0tLS0tLS0tLSBcXG4nKTtcblxuICAgICAgLy8gQWxsIHN1YnNjcmlwdGlvbiByZXF1ZXN0ZWQgYXJlIGFjY2VwdGVkXG5cbiAgICAgIGV2ZW50LmFjY2VwdCgpO1xuICAgIH0pO1xuXG4gICAgaGVsbG9PYmp0UmVwb3J0ZXIub25SZWFkKChldmVudCkgPT4ge1xuICAgICAgZXZlbnQuYWNjZXB0KCk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFVwZGF0ZSBIZWxsb1dvcmxkIERhdGEgT2JqZWN0XG4gICpcbiAgKi9cblxuICBieWUoYnllTXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdieWU6JywgX3RoaXMuaGVsbG9PYmp0UmVwb3J0ZXIgKTtcblxuICAgIGlmIChieWVNc2cpXG4gICAgICBfdGhpcy5oZWxsb09ianRSZXBvcnRlci5kYXRhLmhlbGxvID0gYnllTXNnO1xuICAgIGVsc2Uge1xuICAgICAgX3RoaXMuaGVsbG9PYmp0UmVwb3J0ZXIuZGF0YS5oZWxsbyA9IFwiYnllLCBieWVcIjtcbiAgICAgIH1cbiAgfVxuXG4gIG9uUmVwb3J0ZXJSZXN1bWUoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9vblJlcG9ydGVyUmVzdW1lID0gY2FsbGJhY2s7XG4gIH1cblxuXG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZShoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24pIHtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdIZWxsb1dvcmxkUmVwb3J0ZXInLFxuICAgIGluc3RhbmNlOiBuZXcgSGVsbG9Xb3JsZFJlcG9ydGVyKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbilcbiAgfTtcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2hlbGxvLXdvcmxkL0hlbGxvV29ybGRSZXBvcnRlci5oeS5qcyJdLCJzb3VyY2VSb290IjoiIn0=